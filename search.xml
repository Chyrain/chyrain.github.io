<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title></title>
      <url>https://chyrain.github.io/2017/02/28/JS-%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E4%B8%8D%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<!DOCTYPE html><html><head><meta charset="utf-8"><meta name="date" content="2017-2-28 16:21:54">
<meta name="toc" content="true">
<meta name="categories" content="前端"><style>body {
  width: 45em;
  border: 1px solid #ddd;
  outline: 1300px solid #fff;
  margin: 16px auto;
}

body .markdown-body
{
  padding: 30px;
}

@font-face {
  font-family: fontawesome-mini;
  src: url(data:font/woff;charset=utf-8;base64,d09GRgABAAAAAAzUABAAAAAAFNgAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAABGRlRNAAABbAAAABwAAAAcZMzaOEdERUYAAAGIAAAAHQAAACAAOQAET1MvMgAAAagAAAA+AAAAYHqhde9jbWFwAAAB6AAAAFIAAAFa4azkLWN2dCAAAAI8AAAAKAAAACgFgwioZnBnbQAAAmQAAAGxAAACZVO0L6dnYXNwAAAEGAAAAAgAAAAIAAAAEGdseWYAAAQgAAAFDgAACMz7eroHaGVhZAAACTAAAAAwAAAANgWEOEloaGVhAAAJYAAAAB0AAAAkDGEGa2htdHgAAAmAAAAAEwAAADBEgAAQbG9jYQAACZQAAAAaAAAAGgsICJBtYXhwAAAJsAAAACAAAAAgASgBD25hbWUAAAnQAAACZwAABOD4no+3cG9zdAAADDgAAABsAAAAmF+yXM9wcmVwAAAMpAAAAC4AAAAusPIrFAAAAAEAAAAAyYlvMQAAAADLVHQgAAAAAM/u9uZ4nGNgZGBg4ANiCQYQYGJgBEJuIGYB8xgABMMAPgAAAHicY2Bm42OcwMDKwMLSw2LMwMDQBqGZihmiwHycoKCyqJjB4YPDh4NsDP+BfNb3DIuAFCOSEgUGRgAKDgt4AAB4nGNgYGBmgGAZBkYGEAgB8hjBfBYGCyDNxcDBwMTA9MHhQ9SHrA8H//9nYACyQyFs/sP86/kX8HtB9UIBIxsDXICRCUgwMaACRoZhDwA3fxKSAAAAAAHyAHABJQB/AIEAdAFGAOsBIwC/ALgAxACGAGYAugBNACcA/wCIeJxdUbtOW0EQ3Q0PA4HE2CA52hSzmZDGe6EFCcTVjWJkO4XlCGk3cpGLcQEfQIFEDdqvGaChpEibBiEXSHxCPiESM2uIojQ7O7NzzpkzS8qRqnfpa89T5ySQwt0GzTb9Tki1swD3pOvrjYy0gwdabGb0ynX7/gsGm9GUO2oA5T1vKQ8ZTTuBWrSn/tH8Cob7/B/zOxi0NNP01DoJ6SEE5ptxS4PvGc26yw/6gtXhYjAwpJim4i4/plL+tzTnasuwtZHRvIMzEfnJNEBTa20Emv7UIdXzcRRLkMumsTaYmLL+JBPBhcl0VVO1zPjawV2ys+hggyrNgQfYw1Z5DB4ODyYU0rckyiwNEfZiq8QIEZMcCjnl3Mn+pED5SBLGvElKO+OGtQbGkdfAoDZPs/88m01tbx3C+FkcwXe/GUs6+MiG2hgRYjtiKYAJREJGVfmGGs+9LAbkUvvPQJSA5fGPf50ItO7YRDyXtXUOMVYIen7b3PLLirtWuc6LQndvqmqo0inN+17OvscDnh4Lw0FjwZvP+/5Kgfo8LK40aA4EQ3o3ev+iteqIq7wXPrIn07+xWgAAAAABAAH//wAPeJyFlctvG1UUh+/12DPN1B7P3JnYjj2Ox4/MuDHxJH5N3UdaEUQLqBIkfQQioJWQ6AMEQkIqsPGCPwA1otuWSmTBhjtps2ADWbJg3EpIXbGouqSbCraJw7kzNo2dRN1cnXN1ZvT7zuuiMEI7ncizyA0URofRBJpCdbQuIFShYY+GZRrxMDVtih5TwQPHtXDFFSIKoWIbuREBjLH27Ny4MsbVx+uOJThavebgVrNRLAiYx06rXsvhxLgWx9xpfHdrs/ekc2Pl2cpPCVEITQpwbj8VQhfXSq2m+Wxqaq2D73Kne5e3NjHqQNj3CRYlJlgUl/jRNP+2Gs2pNYRQiOnmUaQDqm30KqKiTTWPWjboxnTWpvgxjXo0KrtZXAHt7hwIz0YVcj88JnKlJKi3NPAwLyDwZudSmJSMMJFDYaOkaol6XtESx3Gt1VTytdZJ3DCLeaVhVnCBH1fycHTxFXwPX+l2e3d6H/TufGGmMTLTnbSJUdo00zuBswMO/nl3YLeL/wnu9/limCuD3vC54h5NBVz6Li414AI8Vx3iiosKcQXUbrvhFFiYb++HN4DaF4XzFW0fIN4XDWJ3a3XQoq9V8WiyRmdsatV9xUcHims1JloH0YUa090G3Tro3mC6c01f+YwCPquINr1PTaCP6rVTOOmf0GE2dBc7zWIhji3/5MchSuBHgDbU99RMWt3YUNMZMJmx92YP6NsHx/5/M1yvInpnkIOM3Z8fA3JQ2lW1RFC1KaBPDFXNAHYYvGy73aYZZZ3HifbeuiVZCpwA3oQBs0wGPYJbJfg60xrKEbKiNtTe1adwrpBRwlAuQ3q3VRaX0QmQ9a49BTSCuF1MLfQ6+tinOubRBZuWPNoMevGMT+V41KitO1is3D/tpMcq1JHZqDHGs8DoYGDkxJgKjHROeTCmhZvzPm9pod+ltKm4PN7Dyvvldlpsg8D+4AUJZ3F/JBstZz7cbFRxsaAGV6yX/dkcycWf8eS3QlQea+YLjdm3yrOnrhFpUyKVvFE4lpv4bO3Svx/6F/4xmiDu/RT5iI++lko18mY1oX+5UGKR6kmVjM/Zb76yfHtxy+h/SyQ0lLdpdKy/lWB6szatetQJ8nZ80A2Qt6ift6gJeavU3BO4gtxs/KCtNPVibCtYCWY3SIlSBPKXZALXiIR9oZeJ1AuMyxLpHIy/yO7vSiSE+kZvk0ihJ30HgHfzZtEMmvV58x6dtqns0XTAW7Vdm4HJ04OCp/crOO7rd9SGxQAE/mVA9xRN+kVSMRFF6S9JFGUtthkjBA5tFCWc2l4V43Ex9GmUP3SI37Jjmir9KqlaDJ4S4JB3vuM/jzyH1+8MuoZ+QGzfnvPoJb96cZlWjMcKLfgDwB7E634JTY+asjsPzS5CiVnEWY+KsrsIN5rn3mAPjqmQBxGjcGKB9f9ZxY3mYC2L85CJ2FXIxKKyHk+dg0FHbuEc7D5NzWUX32WxFcWNGRAbvwSx0RmIXVDuYySafluQBmzA/ssqJAMLnli+WIC90Gw4lm85wcp0qjArEDPJJV/sSx4P9ungTpgMw5gVC1XO4uULq0s3v1rqLi0vX/z65vlH50f8T/RHmSPTk5xxWBWOluMT6WiOy+tdvWxlV/XQb3o3c6Ssr+r6I708GsX9/nzp1tKFh0s3v7m4vAy/Hnb/KMOvc1wump6Il48K6mGDy02X9Yd65pa+nQIjk76lWxCkG8NBCP0HQS9IpAAAeJxjYGRgYGBhcCrq214Qz2/zlUGenQEEzr/77oug/zewFbB+AHI5GJhAogBwKQ0qeJxjYGRgYH3/P46BgZ0BBNgKGBgZUAEPAE/7At0AAAB4nGNngAB2IGYjhBsYBAAIYADVAAAAAAAAAAAAAFwAyAEeAaACCgKmAx4DggRmAAAAAQAAAAwAagAEAAAAAAACAAEAAgAWAAABAAChAAAAAHiclZI7bxQxFIWPd/JkUYQChEhIyAVKgdBMskm1QkKrRETpQiLRUczueB/K7HhlOxttg8LvoKPgP9DxFxANDR0tHRWi4NjrPIBEgh1p/dm+vufcawNYFWsQmP6e4jSyQB2fI9cwj++RE9wTjyPP4LYoI89iWbyLPIe6+Bh5Hs9rryMv4GbtW+RF3EhuRa7jbrIbeQkPkjdUETOLnL0Kip4FVvAhco1RXyMnSPEz8gzWxE7kWTwUp5HnsCLeR57HW/El8gJWa58iL+JO7UfkOh4l9yMv4UnyEtvQGGECgwF66MNBooF1bGCL1ELB/TYU+ZBRlvsKQ44Se6jQ4a7hef+fh72Crv25kp+8lNWGmeKoOI5jJLb1aGIGvb6TjfWNLdkqdFvJw4l1amjlXtXRZqRN7lSRylZZyhBqpVFWmTEXgWfUrpi/hZOQXdOd4rKuXOtEWT3k5IArPRzTUU5tHKjecZkTpnVbNOnt6jzN8240GD4xtikvZW56043rPMg/dS+dlOceXoR+WPbJ55Dsekq1lJpnypsMUsYOdCW30o103Ytu/lvh+5RWFLfBjm9/N8hJntPhvx92rnoE/kyHdGasGy754kw36vsVf/lFeBi+0COu+cfgQr42G3CRpeLoZ53gmfe3X6rcKt5oVxnptHR9JS8ehVUd5wvvahN2uqxOOpMXapibI5k7Zwbt4xBSaTfoKBufhAnO/uqNcfK8OTs0OQ6l7JIqFjDhYj5WcjevCnI/1DDiI8j4ndWb/5YzDZWh79yomWXeXj7Nnw70/2TIeFPTrlSh89k1ObOSRVZWZfgF0r/zJQB4nG2JUQuCQBCEd07TTg36fb2IyBaLd3vWaUh/vmSJnvpgmG8YcmS8X3Shf3R7QA4OBUocUKHGER5NNbOOEvwc1txnuWkTRb/aPjimJ5vXabI+3VfOiyS15UWvyezM2xiGOPyuMohOH8O8JiO4Af+FsAGNAEuwCFBYsQEBjlmxRgYrWCGwEFlLsBRSWCGwgFkdsAYrXFhZsBQrAAA=) format('woff');
}

@font-face {
  font-family: octicons-anchor;
  src: url(data:font/woff;charset=utf-8;base64,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) format('woff');
}

.markdown-body {
  font-family: sans-serif;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
  color: #333333;
  overflow: hidden;
  font-family: "Helvetica Neue", Helvetica, "Segoe UI", Arial, freesans, sans-serif;
  font-size: 16px;
  line-height: 1.6;
  word-wrap: break-word;
}

.markdown-body a {
  background: transparent;
}

.markdown-body a:active,
.markdown-body a:hover {
  outline: 0;
}

.markdown-body b,
.markdown-body strong {
  font-weight: bold;
}

.markdown-body mark {
  background: #ff0;
  color: #000;
  font-style: italic;
  font-weight: bold;
}

.markdown-body sub,
.markdown-body sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}
.markdown-body sup {
  top: -0.5em;
}
.markdown-body sub {
  bottom: -0.25em;
}

.markdown-body h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

.markdown-body img {
  border: 0;
}

.markdown-body hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0;
}

.markdown-body pre {
  overflow: auto;
}

.markdown-body code,
.markdown-body kbd,
.markdown-body pre,
.markdown-body samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

.markdown-body input {
  color: inherit;
  font: inherit;
  margin: 0;
}

.markdown-body html input[disabled] {
  cursor: default;
}

.markdown-body input {
  line-height: normal;
}

.markdown-body input[type="checkbox"] {
  box-sizing: border-box;
  padding: 0;
}

.markdown-body table {
  border-collapse: collapse;
  border-spacing: 0;
}

.markdown-body td,
.markdown-body th {
  padding: 0;
}

.markdown-body .codehilitetable {
  border: 0;
  border-spacing: 0;
}

.markdown-body .codehilitetable tr {
  border: 0;
}

.markdown-body .codehilitetable pre,
.markdown-body .codehilitetable div.codehilite {
  margin: 0;
}

.markdown-body .linenos,
.markdown-body .code,
.markdown-body .codehilitetable td {
  border: 0;
  padding: 0;
}

.markdown-body td:not(.linenos) .linenodiv {
  padding: 0 !important;
}

.markdown-body .code {
  width: 100%;
}

.markdown-body .linenos div pre,
.markdown-body .linenodiv pre,
.markdown-body .linenodiv {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-left-radius: 3px;
  -webkit-border-bottom-left-radius: 3px;
  -moz-border-radius-topleft: 3px;
  -moz-border-radius-bottomleft: 3px;
  border-top-left-radius: 3px;
  border-bottom-left-radius: 3px;
}

.markdown-body .code div pre,
.markdown-body .code div {
  border: 0;
  -webkit-border-radius: 0;
  -moz-border-radius: 0;
  border-radius: 0;
  -webkit-border-top-right-radius: 3px;
  -webkit-border-bottom-right-radius: 3px;
  -moz-border-radius-topright: 3px;
  -moz-border-radius-bottomright: 3px;
  border-top-right-radius: 3px;
  border-bottom-right-radius: 3px;
}

.markdown-body * {
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body input {
  font: 13px Helvetica, arial, freesans, clean, sans-serif, "Segoe UI Emoji", "Segoe UI Symbol";
  line-height: 1.4;
}

.markdown-body a {
  color: #4183c4;
  text-decoration: none;
}

.markdown-body a:hover,
.markdown-body a:focus,
.markdown-body a:active {
  text-decoration: underline;
}

.markdown-body hr {
  height: 0;
  margin: 15px 0;
  overflow: hidden;
  background: transparent;
  border: 0;
  border-bottom: 1px solid #ddd;
}

.markdown-body hr:before,
.markdown-body hr:after {
  display: table;
  content: " ";
}

.markdown-body hr:after {
  clear: both;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  margin-top: 15px;
  margin-bottom: 15px;
  line-height: 1.1;
}

.markdown-body h1 {
  font-size: 30px;
}

.markdown-body h2 {
  font-size: 21px;
}

.markdown-body h3 {
  font-size: 16px;
}

.markdown-body h4 {
  font-size: 14px;
}

.markdown-body h5 {
  font-size: 12px;
}

.markdown-body h6 {
  font-size: 11px;
}

.markdown-body blockquote {
  margin: 0;
}

.markdown-body ul,
.markdown-body ol {
  padding: 0;
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body ol ol,
.markdown-body ul ol {
  list-style-type: lower-roman;
}

.markdown-body ul ul ol,
.markdown-body ul ol ol,
.markdown-body ol ul ol,
.markdown-body ol ol ol {
  list-style-type: lower-alpha;
}

.markdown-body dd {
  margin-left: 0;
}

.markdown-body code,
.markdown-body pre,
.markdown-body samp {
  font-family: Consolas, "Liberation Mono", Menlo, Courier, monospace;
  font-size: 12px;
}

.markdown-body pre {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body kbd {
  background-color: #e7e7e7;
  background-image: -moz-linear-gradient(#fefefe, #e7e7e7);
  background-image: -webkit-linear-gradient(#fefefe, #e7e7e7);
  background-image: linear-gradient(#fefefe, #e7e7e7);
  background-repeat: repeat-x;
  border-radius: 2px;
  border: 1px solid #cfcfcf;
  color: #000;
  padding: 3px 5px;
  line-height: 10px;
  font: 11px Consolas, "Liberation Mono", Menlo, Courier, monospace;
  display: inline-block;
}

.markdown-body>*:first-child {
  margin-top: 0 !important;
}

.markdown-body>*:last-child {
  margin-bottom: 0 !important;
}

.markdown-body .headeranchor-link {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  display: block;
  padding-right: 6px;
  padding-left: 30px;
  margin-left: -30px;
}

.markdown-body .headeranchor-link:focus {
  outline: none;
}

.markdown-body h1,
.markdown-body h2,
.markdown-body h3,
.markdown-body h4,
.markdown-body h5,
.markdown-body h6 {
  position: relative;
  margin-top: 1em;
  margin-bottom: 16px;
  font-weight: bold;
  line-height: 1.4;
}

.markdown-body h1 .headeranchor,
.markdown-body h2 .headeranchor,
.markdown-body h3 .headeranchor,
.markdown-body h4 .headeranchor,
.markdown-body h5 .headeranchor,
.markdown-body h6 .headeranchor {
  display: none;
  color: #000;
  vertical-align: middle;
}

.markdown-body h1:hover .headeranchor-link,
.markdown-body h2:hover .headeranchor-link,
.markdown-body h3:hover .headeranchor-link,
.markdown-body h4:hover .headeranchor-link,
.markdown-body h5:hover .headeranchor-link,
.markdown-body h6:hover .headeranchor-link {
  height: 1em;
  padding-left: 8px;
  margin-left: -30px;
  line-height: 1;
  text-decoration: none;
}

.markdown-body h1:hover .headeranchor-link .headeranchor,
.markdown-body h2:hover .headeranchor-link .headeranchor,
.markdown-body h3:hover .headeranchor-link .headeranchor,
.markdown-body h4:hover .headeranchor-link .headeranchor,
.markdown-body h5:hover .headeranchor-link .headeranchor,
.markdown-body h6:hover .headeranchor-link .headeranchor {
  display: inline-block;
}

.markdown-body h1 {
  padding-bottom: 0.3em;
  font-size: 2.25em;
  line-height: 1.2;
  border-bottom: 1px solid #eee;
}

.markdown-body h2 {
  padding-bottom: 0.3em;
  font-size: 1.75em;
  line-height: 1.225;
  border-bottom: 1px solid #eee;
}

.markdown-body h3 {
  font-size: 1.5em;
  line-height: 1.43;
}

.markdown-body h4 {
  font-size: 1.25em;
}

.markdown-body h5 {
  font-size: 1em;
}

.markdown-body h6 {
  font-size: 1em;
  color: #777;
}

.markdown-body p,
.markdown-body blockquote,
.markdown-body ul,
.markdown-body ol,
.markdown-body dl,
.markdown-body table,
.markdown-body pre,
.markdown-body .admonition {
  margin-top: 0;
  margin-bottom: 16px;
}

.markdown-body hr {
  height: 4px;
  padding: 0;
  margin: 16px 0;
  background-color: #e7e7e7;
  border: 0 none;
}

.markdown-body ul,
.markdown-body ol {
  padding-left: 2em;
}

.markdown-body ul ul,
.markdown-body ul ol,
.markdown-body ol ol,
.markdown-body ol ul {
  margin-top: 0;
  margin-bottom: 0;
}

.markdown-body li>p {
  margin-top: 16px;
}

.markdown-body dl {
  padding: 0;
}

.markdown-body dl dt {
  padding: 0;
  margin-top: 16px;
  font-size: 1em;
  font-style: italic;
  font-weight: bold;
}

.markdown-body dl dd {
  padding: 0 16px;
  margin-bottom: 16px;
}

.markdown-body blockquote {
  padding: 0 15px;
  color: #777;
  border-left: 4px solid #ddd;
}

.markdown-body blockquote>:first-child {
  margin-top: 0;
}

.markdown-body blockquote>:last-child {
  margin-bottom: 0;
}

.markdown-body table {
  display: block;
  width: 100%;
  overflow: auto;
  word-break: normal;
  word-break: keep-all;
}

.markdown-body table th {
  font-weight: bold;
}

.markdown-body table th,
.markdown-body table td {
  padding: 6px 13px;
  border: 1px solid #ddd;
}

.markdown-body table tr {
  background-color: #fff;
  border-top: 1px solid #ccc;
}

.markdown-body table tr:nth-child(2n) {
  background-color: #f8f8f8;
}

.markdown-body img {
  max-width: 100%;
  -moz-box-sizing: border-box;
  box-sizing: border-box;
}

.markdown-body code,
.markdown-body samp {
  padding: 0;
  padding-top: 0.2em;
  padding-bottom: 0.2em;
  margin: 0;
  font-size: 85%;
  background-color: rgba(0,0,0,0.04);
  border-radius: 3px;
}

.markdown-body code:before,
.markdown-body code:after {
  letter-spacing: -0.2em;
  content: "\00a0";
}

.markdown-body pre>code {
  padding: 0;
  margin: 0;
  font-size: 100%;
  word-break: normal;
  white-space: pre;
  background: transparent;
  border: 0;
}

.markdown-body .codehilite {
  margin-bottom: 16px;
}

.markdown-body .codehilite pre,
.markdown-body pre {
  padding: 16px;
  overflow: auto;
  font-size: 85%;
  line-height: 1.45;
  background-color: #f7f7f7;
  border-radius: 3px;
}

.markdown-body .codehilite pre {
  margin-bottom: 0;
  word-break: normal;
}

.markdown-body pre {
  word-wrap: normal;
}

.markdown-body pre code {
  display: inline;
  max-width: initial;
  padding: 0;
  margin: 0;
  overflow: initial;
  line-height: inherit;
  word-wrap: normal;
  background-color: transparent;
  border: 0;
}

.markdown-body pre code:before,
.markdown-body pre code:after {
  content: normal;
}

/* Admonition */
.markdown-body .admonition {
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  position: relative;
  border-radius: 3px;
  border: 1px solid #e0e0e0;
  border-left: 6px solid #333;
  padding: 10px 10px 10px 30px;
}

.markdown-body .admonition table {
  color: #333;
}

.markdown-body .admonition p {
  padding: 0;
}

.markdown-body .admonition-title {
  font-weight: bold;
  margin: 0;
}

.markdown-body .admonition>.admonition-title {
  color: #333;
}

.markdown-body .attention>.admonition-title {
  color: #a6d796;
}

.markdown-body .caution>.admonition-title {
  color: #d7a796;
}

.markdown-body .hint>.admonition-title {
  color: #96c6d7;
}

.markdown-body .danger>.admonition-title {
  color: #c25f77;
}

.markdown-body .question>.admonition-title {
  color: #96a6d7;
}

.markdown-body .note>.admonition-title {
  color: #d7c896;
}

.markdown-body .admonition:before,
.markdown-body .attention:before,
.markdown-body .caution:before,
.markdown-body .hint:before,
.markdown-body .danger:before,
.markdown-body .question:before,
.markdown-body .note:before {
  font: normal normal 16px fontawesome-mini;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  line-height: 1.5;
  color: #333;
  position: absolute;
  left: 0;
  top: 0;
  padding-top: 10px;
  padding-left: 10px;
}

.markdown-body .admonition:before {
  content: "\f056\00a0";
  color: 333;
}

.markdown-body .attention:before {
  content: "\f058\00a0";
  color: #a6d796;
}

.markdown-body .caution:before {
  content: "\f06a\00a0";
  color: #d7a796;
}

.markdown-body .hint:before {
  content: "\f05a\00a0";
  color: #96c6d7;
}

.markdown-body .danger:before {
  content: "\f057\00a0";
  color: #c25f77;
}

.markdown-body .question:before {
  content: "\f059\00a0";
  color: #96a6d7;
}

.markdown-body .note:before {
  content: "\f040\00a0";
  color: #d7c896;
}

.markdown-body .admonition::after {
  content: normal;
}

.markdown-body .attention {
  border-left: 6px solid #a6d796;
}

.markdown-body .caution {
  border-left: 6px solid #d7a796;
}

.markdown-body .hint {
  border-left: 6px solid #96c6d7;
}

.markdown-body .danger {
  border-left: 6px solid #c25f77;
}

.markdown-body .question {
  border-left: 6px solid #96a6d7;
}

.markdown-body .note {
  border-left: 6px solid #d7c896;
}

.markdown-body .admonition>*:first-child {
  margin-top: 0 !important;
}

.markdown-body .admonition>*:last-child {
  margin-bottom: 0 !important;
}

/* progress bar*/
.markdown-body .progress {
  display: block;
  width: 300px;
  margin: 10px 0;
  height: 24px;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #ededed;
  position: relative;
  box-shadow: inset -1px 1px 3px rgba(0, 0, 0, .1);
}

.markdown-body .progress-label {
  position: absolute;
  text-align: center;
  font-weight: bold;
  width: 100%; margin: 0;
  line-height: 24px;
  color: #333;
  text-shadow: 1px 1px 0 #fefefe, -1px -1px 0 #fefefe, -1px 1px 0 #fefefe, 1px -1px 0 #fefefe, 0 1px 0 #fefefe, 0 -1px 0 #fefefe, 1px 0 0 #fefefe, -1px 0 0 #fefefe, 1px 1px 2px #000;
  -webkit-font-smoothing: antialiased !important;
  white-space: nowrap;
  overflow: hidden;
}

.markdown-body .progress-bar {
  height: 24px;
  float: left;
  -webkit-border-radius: 3px;
  -moz-border-radius: 3px;
  border-radius: 3px;
  background-color: #96c6d7;
  box-shadow: inset 0 1px 0 rgba(255, 255, 255, .5), inset 0 -1px 0 rgba(0, 0, 0, .1);
  background-size: 30px 30px;
  background-image: -webkit-linear-gradient(
    135deg, rgba(255, 255, 255, .4) 27%,
    transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%,
    transparent 77%, transparent
  );
  background-image: -moz-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -ms-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: -o-linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
  background-image: linear-gradient(
    135deg,
    rgba(255, 255, 255, .4) 27%, transparent 27%,
    transparent 52%, rgba(255, 255, 255, .4) 52%,
    rgba(255, 255, 255, .4) 77%, transparent 77%,
    transparent
  );
}

.markdown-body .progress-100plus .progress-bar {
  background-color: #a6d796;
}

.markdown-body .progress-80plus .progress-bar {
  background-color: #c6d796;
}

.markdown-body .progress-60plus .progress-bar {
  background-color: #d7c896;
}

.markdown-body .progress-40plus .progress-bar {
  background-color: #d7a796;
}

.markdown-body .progress-20plus .progress-bar {
  background-color: #d796a6;
}

.markdown-body .progress-0plus .progress-bar {
  background-color: #c25f77;
}

.markdown-body .candystripe-animate .progress-bar{
  -webkit-animation: animate-stripes 3s linear infinite;
  -moz-animation: animate-stripes 3s linear infinite;
  animation: animate-stripes 3s linear infinite;
}

@-webkit-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@-moz-keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

@keyframes animate-stripes {
  0% {
    background-position: 0 0;
  }

  100% {
    background-position: 60px 0;
  }
}

.markdown-body .gloss .progress-bar {
  box-shadow:
    inset 0 4px 12px rgba(255, 255, 255, .7),
    inset 0 -12px 0 rgba(0, 0, 0, .05);
}

/* Multimarkdown Critic Blocks */
.markdown-body .critic_mark {
  background: #ff0;
}

.markdown-body .critic_delete {
  color: #c82829;
  text-decoration: line-through;
}

.markdown-body .critic_insert {
  color: #718c00 ;
  text-decoration: underline;
}

.markdown-body .critic_comment {
  color: #8e908c;
  font-style: italic;
}

.markdown-body .headeranchor {
  font: normal normal 16px octicons-anchor;
  line-height: 1;
  display: inline-block;
  text-decoration: none;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

.headeranchor:before {
  content: '\f05c';
}

.markdown-body .task-list-item {
  list-style-type: none;
}

.markdown-body .task-list-item+.task-list-item {
  margin-top: 3px;
}

.markdown-body .task-list-item input {
  margin: 0 4px 0.25em -20px;
  vertical-align: middle;
}

/* Media */
@media only screen and (min-width: 480px) {
  .markdown-body {
    font-size:14px;
  }
}

@media only screen and (min-width: 768px) {
  .markdown-body {
    font-size:16px;
  }
}

@media print {
  .markdown-body * {
    background: transparent !important;
    color: black !important;
    filter:none !important;
    -ms-filter: none !important;
  }

  .markdown-body {
    font-size:12pt;
    max-width:100%;
    outline:none;
    border: 0;
  }

  .markdown-body a,
  .markdown-body a:visited {
    text-decoration: underline;
  }

  .markdown-body .headeranchor-link {
    display: none;
  }

  .markdown-body a[href]:after {
    content: " (" attr(href) ")";
  }

  .markdown-body abbr[title]:after {
    content: " (" attr(title) ")";
  }

  .markdown-body .ir a:after,
  .markdown-body a[href^="javascript:"]:after,
  .markdown-body a[href^="#"]:after {
    content: "";
  }

  .markdown-body pre {
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
  }

  .markdown-body pre,
  .markdown-body blockquote {
    border: 1px solid #999;
    padding-right: 1em;
    page-break-inside: avoid;
  }

  .markdown-body .progress,
  .markdown-body .progress-bar {
    -moz-box-shadow: none;
    -webkit-box-shadow: none;
    box-shadow: none;
  }

  .markdown-body .progress {
    border: 1px solid #ddd;
  }

  .markdown-body .progress-bar {
    height: 22px;
    border-right: 1px solid #ddd;
  }

  .markdown-body tr,
  .markdown-body img {
    page-break-inside: avoid;
  }

  .markdown-body img {
    max-width: 100% !important;
  }

  .markdown-body p,
  .markdown-body h2,
  .markdown-body h3 {
    orphans: 3;
    widows: 3;
  }

  .markdown-body h2,
  .markdown-body h3 {
    page-break-after: avoid;
  }
}
</style><title>JS-基础问题不基础</title></head><body><article class="markdown-body"><h2 id="js"><a name="user-content-js" href="#js" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>JS基础问题</h2>
<p>推荐：<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="external">《你不知道的Javascript》</a></p>
<h3 id="1"><a name="user-content-1" href="#1" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>1. 引用传递与值传递</h3>
<p><strong>js 中什么类型是引用传递, 什么类型是值传递? 如何将值类型的变量以引用的方式传递?</strong></p>
<blockquote>
<p>简单点说, <strong><code>对象</code></strong>是<code>引用传递</code>, <strong><code>基础类型</code></strong>是<code>值传递</code>, 通过将基础类型包装 (boxing) 可以以引用的方式传递.</p>
</blockquote>
<p>仔细查看并理解下面代码：<br>
<pre><code class="js">function changeStuff(a, b, c)
{
  a = a * 10;
  b.item = &quot;changed&quot;;
  c = {item: &quot;changed&quot;};
}

var num = 10;
var obj1 = {item: &quot;unchanged&quot;};
var obj2 = {item: &quot;unchanged&quot;};

changeStuff(num, obj1, obj2);

console.log(num);
console.log(obj1.item);    
console.log(obj2.item);
</code></pre><br>
(类推C++)指针与引用的区别（C++语言中，函数的参数和返回值的传递方式有三种：值传递、指针传递和引用传递）：</p>
<ul>
<li>指针是一个实体，而引用仅是个别名</li>
<li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。</li>
<li>不能有NULL 引用，引用必须与合法的存储单元关联（指针则可以是NULL）。</li>
<li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li>
<li>“sizeof 引用”得到的是所指向的变量（对象）的大小，而“sizeof指针”得到的是指针本身（所指向的变量或对象的地址）的大小；</li>
<li>引用没有 const，指针有 const，const 的指针不可变；</li>
</ul>
<p>引用是一种特殊的操作被限定的指针(必须初始化不为空，不用判空，不可重新赋值到其他对象的引用)，指针是一把可以砍树、割草、割断绳子的刀，引用是一把剪绳子的剪刀，引用可以干的事指针也可以，但是引用比较安全，为什么要用引用，其实即“用适当的工具做恰如其分的工作”。指针能够毫无约束地操作内存中的如何东西，尽管指针功能强大，但是非常危险。 如果的确只需要借用一下某个对象的“别名”，那么就用“引用”，而不要用“指针”，以免发生意外。比如说，某人需要一份证明，本来在文件上盖上公章的印子就行了，如果把取公章的钥匙交给他，那么他就获得了不该有的权利。</p>
<h3 id="2"><a name="user-content-2" href="#2" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>2. <code>==</code>和<code>===</code></h3>
<ul>
<li>==， 两边值类型不同的时候，会先进行类型转换，再比较。 </li>
<li>===，不做类型转换，类型不同的一定不等。</li>
</ul>
<blockquote>
<p>下面分别说明：<br>
先说 ===，这个比较简单。下面的规则用来判断两个值是否===相等：<br>
1、如果类型不同，就[不相等]<br>
2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断）<br>
3、如果两个都是字符串，每个位置的字符都一样，那么[相等]；否则[不相等]。<br>
4、如果两个值都是true，或者都是false，那么[相等]。<br>
5、如果两个值都引用同一个对象或函数，那么[相等]；否则[不相等]。<br>
6、如果两个值都是null，或者都是undefined，那么[相等]。<br>
再说 ==，根据以下规则：<br>
1、如果两个值类型相同，进行 === 比较。<br>
2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：<br>
a、如果一个是null、一个是undefined，那么[相等]。<br>
b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。<br>
c、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。<br>
d、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。非js核心的对象，令说（比较麻 烦，我也不大懂）<br>
e、任何其他组合，都[不相等]。</p>
<p>主要注意区分<code>Nan</code>、<code>undefined</code>、<code>null</code>间的判断。</p>
</blockquote>
<pre><code class="js">1 == '1'        //true
1 === '1'       //false
'123' === '123' //true
1 === 1         //true
[1] == [1]      //false
{} == {}        //false
1 == true       //true
1 === true      //false
2 == true       //false
0 == false      //true
0 === false     //false
var a = [1], b = a;
a === b         //true

null === null           //true
undefined == undefined  //true
undefined == null       //true
undefined === null      //false
undefined == NaN        //false
null == NaN             //false
NaN == NaN              //false ***注意***
NaN === NaN             //false ***注意***
</code></pre>

<h3 id="3-typeof"><a name="user-content-3-typeof" href="#3-typeof" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>3. 类型判断<code>typeof</code></h3>
<p><strong>你知道下面typeof运算的结果吗？</strong></p>
<p><pre><code class="js">typeof(1);
typeof(NaN);
typeof(Number.MIN_VALUE);
typeof(Infinity);
typeof(&quot;123&quot;);
typeof(true);
typeof(window);
typeof(document);
typeof(null);
typeof(eval);
typeof(Date);
typeof(sss);
typeof(undefined);
</code></pre><br>
看看你会几个？<br>
我们来试试看看结果：</p>
<pre><code>alert(typeof(1));                   // number
alert(typeof(NaN));                 // number
alert(typeof(Number.MIN_VALUE));    // number
alert(typeof(Infinity));            // number  
alert(typeof(&quot;123&quot;));               // string
alert(typeof(true));                // boolean
alert(typeof(window));              // object
alert(typeof(document));            // object
alert(typeof(null));                // object
alert(typeof(eval));                // function
alert(typeof(Date));                // function
alert(typeof(sss));                 // undefined
alert(typeof(undefined));           // undefined
</code></pre>

<p>何甘霖<br>
js中typeof的用法汇总</p>
<p>这篇文章主要是对js中typeof的用法进行了详细的汇总介绍，需要的朋友可以过来参考下，希望对大家有所帮助</p>
<p>JavaScript中的typeof其实非常复杂,它可以用来做很多事情,但同时也有很多怪异的表现.本文列举出了它的多个用法,而且还指出了存在的问题以及解决办法.</p>
<p>先来了解一下js中typeof的用法：</p>
<p>typeof运算符介绍：typeof 是一个一元运算，放在一个运算数之前，运算数可以是任意类型。它返回值是一个字符串，该字符串说明运算数的类型。<br>
你 知道下面typeof运算的结果吗？<br>
typeof(1);<br>
typeof(NaN);<br>
typeof(Number.MIN_VALUE);<br>
typeof(Infinity);<br>
typeof(&ldquo;123&rdquo;);<br>
typeof(true);<br>
typeof(window);<br>
typeof(document);<br>
typeof(null);<br>
typeof(eval);<br>
typeof(Date);<br>
typeof(sss);<br>
typeof(undefined);<br>
看 看你会几个？</p>
<p>我们来试试看看结果</p>
<pre><code>alert(typeof(1));    　　　　　 // number
alert(typeof(NaN));　　　　　　　　// number
alert(typeof(Number.MIN_VALUE));  // number
alert(typeof(Infinity));      // number  
alert(typeof("123"));　　　　　　　// string
alert(typeof(true));　　　　　　　 // boolean
alert(typeof(window));　　　　　　 // object
alert(typeof(document));　　　　　 // object
alert(typeof(null));　　　　　　　 // object
alert(typeof(eval));　　　　　　　 // function
alert(typeof(Date));　　　　　　　 // function
alert(typeof(sss));　　　　　　　　// undefined
alert(typeof(undefined));　　　　　// undefined
</code></pre>
<p>如果看了以后，不是很明白的话，请看下面：<br>
typeof是一个一元运算符，它返回的结果 始终是一个字符串，对不同的操作数，它返回不同的结果。<br>
具体的规则如下：</p>
<ol>
<li>
<p>对于数字类型的操作数而言， typeof 返回的值是 number。比如说：typeof(1)，返回的值就是number。<br>
上面是举的常规数字，对于非常规的数字类型而言，其结果返回的也是number。比如typeof(NaN)，NaN在<br>
JavaScript中代表的是特殊非数字值，虽然它本身是一个数字类型。<br>
在JavaScript中，特殊的数字类型还有几种：<br>
Infinity 表示无穷大特殊值<br>
NaN　　　　　　　　　　　　特殊的非数字值<br>
Number.MAX_VALUE　　　　　可表示的最大数字<br>
Number.MIN_VALUE　　　　　可表示的最小数字（与零最接近）<br>
Number.NaN　　　　　 　　　特殊的非数字值<br>
Number.POSITIVE_INFINITY　表示正无穷大的特殊值<br>
Number.NEGATIVE_INFINITY  表 示负无穷大的特殊值<br>
以上特殊类型，在用typeof进行运算进，其结果都将是number。</p>
</li>
<li>
<p>对于字符串类型， typeof 返回的值是 string。比如typeof(&ldquo;123&rdquo;)返回的值是string。 </p>
</li>
<li>对于布尔类型， typeof 返回的值是 boolean 。比如typeof(true)返回的值是boolean。</li>
<li>对于对象、数组、null 返回的值是 object 。比如typeof(window)，typeof(document)，typeof(null)返回的值都是object。</li>
<li>对于函数类型，返回的值是 function。比如：typeof(eval)，typeof(Date)返回的值都是function。</li>
<li>如 果运算数是没有定义的（比如说不存在的变量、函数或者undefined），将返回undefined。比如：typeof(sss)、typeof(undefined)都返回undefined。</li>
</ol>
<h3 id="4"><a name="user-content-4" href="#4" class="headeranchor-link" aria-hidden="true"><span class="headeranchor"></span></a>4. 作用域</h3></article></body></html>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS-基础问题不基础]]></title>
      <url>https://chyrain.github.io/2017/02/28/JS-%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E4%B8%8D%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="JS基础问题"><a href="#JS基础问题" class="headerlink" title="JS基础问题"></a>JS基础问题</h2><p>推荐：<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="external">《你不知道的Javascript》</a></p>
<h3 id="1-引用传递与值传递"><a href="#1-引用传递与值传递" class="headerlink" title="1. 引用传递与值传递"></a>1. 引用传递与值传递</h3><p><strong>js 中什么类型是引用传递, 什么类型是值传递? 如何将值类型的变量以引用的方式传递?</strong></p>
<blockquote>
<p>简单点说, <strong><code>对象</code></strong>是<code>引用传递</code>, <strong><code>基础类型</code></strong>是<code>值传递</code>, 通过将基础类型包装 (boxing) 可以以引用的方式传递.</p>
</blockquote>
<p>仔细查看并理解下面代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStuff</span>(<span class="params">a, b, c</span>)</span></div><div class="line">&#123;</div><div class="line">  a = a * <span class="number">10</span>;</div><div class="line">  b.item = <span class="string">"changed"</span>;</div><div class="line">  c = &#123;<span class="attr">item</span>: <span class="string">"changed"</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">item</span>: <span class="string">"unchanged"</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">item</span>: <span class="string">"unchanged"</span>&#125;;</div><div class="line"></div><div class="line">changeStuff(num, obj1, obj2);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="built_in">console</span>.log(obj1.item);    </div><div class="line"><span class="built_in">console</span>.log(obj2.item);</div></pre></td></tr></table></figure></p>
<p>(类推C++)指针与引用的区别（C++语言中，函数的参数和返回值的传递方式有三种：值传递、指针传递和引用传递）：</p>
<ul>
<li>指针是一个实体，而引用仅是个别名</li>
<li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。</li>
<li>不能有NULL 引用，引用必须与合法的存储单元关联（指针则可以是NULL）。</li>
<li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li>
<li>“sizeof 引用”得到的是所指向的变量（对象）的大小，而“sizeof指针”得到的是指针本身（所指向的变量或对象的地址）的大小；</li>
<li>引用没有 const，指针有 const，const 的指针不可变；</li>
</ul>
<p>引用是一种特殊的操作被限定的指针(必须初始化不为空，不用判空，不可重新赋值到其他对象的引用)，指针是一把可以砍树、割草、割断绳子的刀，引用是一把剪绳子的剪刀，引用可以干的事指针也可以，但是引用比较安全，为什么要用引用，其实即“用适当的工具做恰如其分的工作”。指针能够毫无约束地操作内存中的如何东西，尽管指针功能强大，但是非常危险。 如果的确只需要借用一下某个对象的“别名”，那么就用“引用”，而不要用“指针”，以免发生意外。比如说，某人需要一份证明，本来在文件上盖上公章的印子就行了，如果把取公章的钥匙交给他，那么他就获得了不该有的权利。</p>
<h3 id="2-和"><a href="#2-和" class="headerlink" title="2. ==和==="></a>2. <code>==</code>和<code>===</code></h3><ul>
<li>==， 两边值类型不同的时候，会先进行类型转换，再比较。 </li>
<li>===，不做类型转换，类型不同的一定不等。</li>
</ul>
<blockquote>
<p>下面分别说明：<br>先说 ===，这个比较简单。下面的规则用来判断两个值是否===相等：<br>1、如果类型不同，就[不相等]<br>2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断）<br>3、如果两个都是字符串，每个位置的字符都一样，那么[相等]；否则[不相等]。<br>4、如果两个值都是true，或者都是false，那么[相等]。<br>5、如果两个值都引用同一个对象或函数，那么[相等]；否则[不相等]。<br>6、如果两个值都是null，或者都是undefined，那么[相等]。<br>再说 ==，根据以下规则：<br>1、如果两个值类型相同，进行 === 比较。<br>2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：<br>a、如果一个是null、一个是undefined，那么[相等]。<br>b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。<br>c、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。<br>d、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。非js核心的对象，令说（比较麻 烦，我也不大懂）<br>e、任何其他组合，都[不相等]。</p>
<p>主要注意区分<code>Nan</code>、<code>undefined</code>、<code>null</code>间的判断。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> == <span class="string">'1'</span>        <span class="comment">//true</span></div><div class="line"><span class="number">1</span> === <span class="string">'1'</span>       <span class="comment">//false</span></div><div class="line"><span class="string">'123'</span> === <span class="string">'123'</span> <span class="comment">//true</span></div><div class="line"><span class="number">1</span> === <span class="number">1</span>         <span class="comment">//true</span></div><div class="line">[<span class="number">1</span>] == [<span class="number">1</span>]      <span class="comment">//false</span></div><div class="line">&#123;&#125; == &#123;&#125;        <span class="comment">//false</span></div><div class="line"><span class="number">1</span> == <span class="literal">true</span>       <span class="comment">//true</span></div><div class="line"><span class="number">1</span> === <span class="literal">true</span>      <span class="comment">//false</span></div><div class="line"><span class="number">2</span> == <span class="literal">true</span>       <span class="comment">//false</span></div><div class="line"><span class="number">0</span> == <span class="literal">false</span>      <span class="comment">//true</span></div><div class="line"><span class="number">0</span> === <span class="literal">false</span>     <span class="comment">//false</span></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>], b = a;</div><div class="line">a === b         <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="literal">null</span> === <span class="literal">null</span>           <span class="comment">//true</span></div><div class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>  <span class="comment">//true</span></div><div class="line"><span class="literal">undefined</span> == <span class="literal">null</span>       <span class="comment">//true</span></div><div class="line"><span class="literal">undefined</span> === <span class="literal">null</span>      <span class="comment">//false</span></div><div class="line"><span class="literal">undefined</span> == <span class="literal">NaN</span>        <span class="comment">//false</span></div><div class="line"><span class="literal">null</span> == <span class="literal">NaN</span>             <span class="comment">//false</span></div><div class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>              <span class="comment">//false ***注意***</span></div><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>             <span class="comment">//false ***注意***</span></div></pre></td></tr></table></figure>
<h3 id="3-类型判断typeof"><a href="#3-类型判断typeof" class="headerlink" title="3. 类型判断typeof"></a>3. 类型判断<code>typeof</code></h3><p><strong>你知道下面typeof运算的结果吗？</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span>(<span class="number">1</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">NaN</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">Number</span>.MIN_VALUE);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">Infinity</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="string">"123"</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">window</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">document</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">eval</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">Date</span>);</div><div class="line"><span class="keyword">typeof</span>(sss);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">undefined</span>);</div></pre></td></tr></table></figure>
<p>看看你会几个？<br>我们来试试看看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">alert(typeof(1));                   // number</div><div class="line">alert(typeof(NaN));                 // number</div><div class="line">alert(typeof(Number.MIN_VALUE));    // number</div><div class="line">alert(typeof(Infinity));            // number  </div><div class="line">alert(typeof(&quot;123&quot;));               // string</div><div class="line">alert(typeof(true));                // boolean</div><div class="line">alert(typeof(window));              // object</div><div class="line">alert(typeof(document));            // object</div><div class="line">alert(typeof(null));                // object</div><div class="line">alert(typeof(eval));                // function</div><div class="line">alert(typeof(Date));                // function</div><div class="line">alert(typeof(sss));                 // undefined</div><div class="line">alert(typeof(undefined));           // undefined</div></pre></td></tr></table></figure>
<p>如果看了以后，不是很明白的话，请看下面：<br>typeof是一个一元运算符，它返回的结果 始终是一个字符串，对不同的操作数，它返回不同的结果。<br>具体的规则如下：</p>
<ol>
<li><p>对于数字类型的操作数而言， typeof 返回的值是 number。比如说：typeof(1)，返回的值就是number。<br>上面是举的常规数字，对于非常规的数字类型而言，其结果返回的也是number。比如typeof(NaN)，NaN在<br>JavaScript中代表的是特殊非数字值，虽然它本身是一个数字类型。<br>在JavaScript中，特殊的数字类型还有几种：<br>Infinity 表示无穷大特殊值<br>NaN　　　　　　　　　　　　特殊的非数字值<br>Number.MAX_VALUE　　　　　可表示的最大数字<br>Number.MIN_VALUE　　　　　可表示的最小数字（与零最接近）<br>Number.NaN　　　　　 　　　特殊的非数字值<br>Number.POSITIVE_INFINITY　表示正无穷大的特殊值<br>Number.NEGATIVE_INFINITY  表 示负无穷大的特殊值<br>以上特殊类型，在用typeof进行运算进，其结果都将是number。</p>
</li>
<li><p>对于字符串类型， typeof 返回的值是 string。比如typeof(“123”)返回的值是string。 </p>
</li>
<li>对于布尔类型， typeof 返回的值是 boolean 。比如typeof(true)返回的值是boolean。</li>
<li>对于对象、数组、null 返回的值是 object 。比如typeof(window)，typeof(document)，typeof(null)返回的值都是object。</li>
<li>对于函数类型，返回的值是 function。比如：typeof(eval)，typeof(Date)返回的值都是function。</li>
<li>如 果运算数是没有定义的（比如说不存在的变量、函数或者undefined），将返回undefined。比如：typeof(sss)、typeof(undefined)都返回undefined。</li>
</ol>
<h3 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h3><p><strong><code>let</code> 和 <code>var</code> 的区别？</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> me = <span class="string">'go'</span>;  <span class="comment">// globally scoped</span></div><div class="line"><span class="keyword">var</span> i = <span class="string">'able'</span>; <span class="comment">// globally scoped</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.me); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.i); <span class="comment">// 'able'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allyIlliterate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//tuce is *not* visible out here</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> tuce = <span class="number">0</span>; tuce &lt; <span class="number">5</span>; tuce++ ) &#123;</div><div class="line">        <span class="comment">//tuce is only visible in here (and in the for() parentheses)</span></div><div class="line">        <span class="comment">//and there is a separate tuce variable for each iteration of the loop</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//tuce is *not* visible out here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">byE40</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//nish *is* visible out here</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> nish = <span class="number">0</span>; nish &lt; <span class="number">5</span>; nish++ ) &#123;</div><div class="line">        <span class="comment">//nish is visible to the whole function</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//nish *is* visible out here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>var的作用域：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyLike = <span class="string">'C#'</span>;</div><div class="line">YouLike = <span class="string">'C++'</span>;</div><div class="line">alert(<span class="string">'我喜欢：'</span> + MyLike + <span class="string">" 你喜欢："</span> + YouLike);</div><div class="line"><span class="comment">//输出：我喜欢：C# 你喜欢：C++</span></div><div class="line">ChangeLike();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChangeLike</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    alert(MyLike + <span class="string">'是我喜欢 '</span> + YouLike + <span class="string">'是你喜欢'</span>); <span class="comment">//undefined是我喜欢 C++是你喜欢</span></div><div class="line">    <span class="keyword">var</span> MyLike = <span class="string">'JS'</span>;</div><div class="line">    YouLike = <span class="string">'JAVA'</span>;</div><div class="line">    alert(MyLike + <span class="string">'是我喜欢 '</span> + YouLike + <span class="string">'是你喜欢'</span>)<span class="comment">//JS是我喜欢 JAVA是你喜欢</span></div><div class="line">&#125;</div><div class="line">alert(MyLike + <span class="string">'是我喜欢 '</span> + YouLike + <span class="string">'是你喜欢'</span>)<span class="comment">//C#是我喜欢 JAVA是你喜欢</span></div></pre></td></tr></table></figure>
<p>相对于let的区别:</p>
<ol>
<li><p>块级作用域if</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">flag</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="keyword">var</span> a = <span class="string">'js'</span></div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 这里也可以访问 a</span></div><div class="line">&#125;</div><div class="line">变量a在<span class="keyword">if</span>块里声明的，但在<span class="keyword">else</span>块和<span class="keyword">if</span>外都可以访问到val, 把<span class="keyword">var</span>换成<span class="keyword">let</span>后：</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">flag</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="keyword">let</span> a = <span class="string">'js'</span></div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 这里也访问不到 a</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>块级作用域for</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer i: '</span> + i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'inner i: '</span>+i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">outer i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">1</span></div></pre></td></tr></table></figure>
<p>可以看到，外层循环被打断了，因为ｉ为全局变量所以 i 的值被内层循环修改了， 把内层循环的var换成let后：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer i: '</span> + i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'inner i: '</span>+i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">outer i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">1</span></div><div class="line">test.html:<span class="number">10</span> outer i: <span class="number">1</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">1</span></div></pre></td></tr></table></figure>
<ol>
<li>变量提升</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先使用后声明</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line"></div><div class="line"><span class="comment">//变量val先使用后声明，输出undefined，也不报错。把var换成let，就报错了</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// Uncaught ReferenceError: a is not defined</span></div><div class="line"><span class="keyword">let</span> a;</div><div class="line"></div><div class="line"><span class="comment">//先判断后声明</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a == <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="string">''</span></div><div class="line"></div><div class="line"><span class="comment">//把var换成let，if处报语法错  Uncaught ReferenceError: a is not defined</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a == <span class="string">'undefined'</span>) &#123; <span class="comment">// Uncaught ReferenceError: a is not defined</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="string">''</span></div></pre></td></tr></table></figure>
<p>ES6规定，如果代码块中存在let，这个区块从一开始就形成了封闭作用域,凡是在声明之前就使用，就会报错。即在代码块内，在let声明之前使用变量都是不可用的。</p>
<ol>
<li>覆盖声明</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">let</span> me = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">let</span> me = <span class="string">'bar'</span>; <span class="comment">// SyntaxError: Identifier 'me' has already been declared</span></div><div class="line"><span class="meta"></span></div><div class="line">'use strict';</div><div class="line"><span class="keyword">var</span> me = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">var</span> me = <span class="string">'bar'</span>; <span class="comment">// No problem, `me` is replaced.</span></div></pre></td></tr></table></figure>
<h3 id="5-箭头函数-与-function-的区别"><a href="#5-箭头函数-与-function-的区别" class="headerlink" title="5. 箭头函数 与 function 的区别"></a>5. 箭头函数 与 function 的区别</h3><ul>
<li>function: function内this对象指向函数执行者，可使用bind(this)改变函数this指向，或者使用call(this)来调用时改变this指向。</li>
<li>箭头函数: 函数内部的this是词法作用域，由上下文确定。</li>
</ul>
<h3 id="6-内存释放"><a href="#6-内存释放" class="headerlink" title="6. 内存释放"></a>6. 内存释放</h3><p><a href="https://eggggger.xyz/2016/10/22/node-gc/" target="_blank" rel="external">《Node.js 垃圾回收》</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AWS配置shadowsocks和node.js]]></title>
      <url>https://chyrain.github.io/2017/01/21/AWS%E9%85%8D%E7%BD%AEshadowsocks%E5%92%8Cnode.js/</url>
      <content type="html"><![CDATA[<p>听说AWS绑定信用卡免费使用一年，屁颠屁颠跑去开了个账户，折腾了半天，搞了个shadowsocks代理(不懂是什么？google一下你就知道了，对了，有了它你就能google了)，装了个node.js，这里简要说说。</p>
<h2 id="申请AWS"><a href="#申请AWS" class="headerlink" title="申请AWS"></a>申请AWS</h2><p>首先是注册账户并绑定信用卡，这个不需要我多说了，打开<a href="http://aws.amazon.com/cn/" target="_blank" rel="external">AWS官网</a>，按照操作提示进行即可，绑定信用卡会有一个电话打来，让你打开键盘输入网页上显示的PIN码，绑定成功后选择支持方案为“基本（免费）”，即创建成功。</p>
<h2 id="创建和配置EC2"><a href="#创建和配置EC2" class="headerlink" title="创建和配置EC2"></a>创建和配置EC2</h2><p>（网上看到一篇类似的配置文章可作为参考：<a href="http://www.cnblogs.com/gyouxu/p/3617906.html" target="_blank" rel="external">http://www.cnblogs.com/gyouxu/p/3617906.html</a>）</p>
<p>进入AWS选择第一个：EC2，即云中的虚拟服务器，进入控制台选择地区，然后点击“启动实例”，之后要选择一个系统映像（AMI），我选择的是第一个“Amazon Linux AMI (HVM)”，大部分的Linux操作系统在Amazon EC2中是可以免费使用的，但是不包括SuSe Linux Enterprise Server 和 Red Hat Enterprise Linux (RHEL)，然后根据提示都选择默认的下一步，存储好像是限制30G，我填的10G，其他都没变，流量和存储超出限额的话是会计费的，到时候会在信用卡上扣费。最后点击“启动”，需要创建密钥对，输入名称、密码，点击下载密钥对（一个*.pem文件），保存到电脑上，ssh连接的时候需要用到。</p>
<p>注意EC2控制面板有个<code>弹性IP（Elastic IP）</code>如果申请了Elastic IP而没有与任何Instance绑定的话，每小时会收1美分，如果已经与某一Instance绑定则不会收费，所以没有用到的时候千万不要申请，避免被无辜扣费。</p>
<p>详细问题可查看：<a href="https://aws.amazon.com/cn/ec2/faqs/" target="_blank" rel="external">AWS FAQ</a></p>
<h2 id="连接EC2服务器"><a href="#连接EC2服务器" class="headerlink" title="连接EC2服务器"></a>连接EC2服务器</h2><p>下载<em>.pem文件后会提示一个连接远程服务器的命令，在你的shell终端里执行这个命令（注意：</em>.pem文件要在终端运行当前目录下，且权限为“400”才可以成功连接）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 首先，找到刚刚保存的*.pem文件，比如文件名叫amazon.pem，确认文件路径，</div><div class="line"># 打开终端，进到*.pem文件所在目录，</div><div class="line"># 执行chmod 400 *.pem 修改文件权限</div><div class="line">ssh -i &quot;pem文件名.pem&quot; 服务器用户账号名@你的服务器节点和ip信息</div></pre></td></tr></table></figure></p>
<p>上传文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -i pem文件.pem 上传的文件 服务器用户账号名@你的服务器节点和ip信息:/home/ec2-user/接收文件路径</div></pre></td></tr></table></figure></p>
<h2 id="安装配置shadowsocks"><a href="#安装配置shadowsocks" class="headerlink" title="安装配置shadowsocks"></a>安装配置shadowsocks</h2><blockquote>
<p>注：以下安装配置都是针对Amazon Linux AMI，也即CentOS Linux系统的，其他系统安装配置方法会有所不同。</p>
</blockquote>
<h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><p>首先我们需要安装python包管理工具，绕个弯然后用pip安装shadowsocks：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install python-setuptools #安装python包管理工具pip</div><div class="line">$ sudo easy_install pip</div><div class="line">$ sudo pip install shadowsocks</div></pre></td></tr></table></figure></p>
<h3 id="配置shadowsocks"><a href="#配置shadowsocks" class="headerlink" title="配置shadowsocks"></a>配置shadowsocks</h3><p>创建并配置shadowsocks.json（ps：可能有人不会用vi，这里简单说下，vi打开文件后，按i即可进入编辑状态，编辑完后，按esc退出编辑状态，按:进入命令状态，输入wq即可保存并退出，还不懂的话自行搜索vi用法吧）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /etc/shadowsocks.json</div><div class="line"></div><div class="line">#在文件里输入如下内容，其中端口和连接秘密自己填写，连接时用到</div><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;:端口,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;连接密码&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;:false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="运行shadowsocks"><a href="#运行shadowsocks" class="headerlink" title="运行shadowsocks"></a>运行shadowsocks</h3><p>安装配置好shadowsocks后，便可以运行了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssserver -c /etc/shadowsocks.json -d start #启动shadowsocks</div></pre></td></tr></table></figure></p>
<h3 id="AWS配置入站端口"><a href="#AWS配置入站端口" class="headerlink" title="AWS配置入站端口"></a>AWS配置入站端口</h3><p>配置好shaodowsocks后，还需要将配置中的端口打开,这样客户端的服务才能链接得上EC2中的shadowsocks服务，<br>首先打开正在运行的实例，向右滚动表格，记录下<code>公有IP</code>：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss1.png" alt="公有IP"><br>然后到最后一项<code>安全组</code>，点击进入<code>编辑入站规则</code>：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss2.png" alt="安全组"><br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss3.png" alt="选择编辑"><br>认是开启了一个22端口（这是给ssh访问的），再建一个如下图红框标示的端口，我的shadowsocks配置的端口是1080，所以这里就开启1080，填入你上面配置的端口，因为下文需要安装node作为http服务器，也顺便开了个80端口：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss4.png" alt="入站规则"></p>
<h3 id="shadowsocks客户端配置"><a href="#shadowsocks客户端配置" class="headerlink" title="shadowsocks客户端配置"></a>shadowsocks客户端配置</h3><p>进入<a href="https://shadowsocks.com/client.html" target="_blank" rel="external">下载页</a>，选择对应平台的客户端下载。</p>
<p>打开客户端，配置要填的东西就这三个东西：</p>
<ul>
<li>地址：服务器实例的外网ip，端口</li>
<li>密码：shadowsocks配置的密码</li>
<li>加密：aes-256-cfb<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss5.png" alt="shadowsocks客户端配置"></li>
</ul>
<p>默认是选择自动代理模式，这个模式下，GWF白名单的站点不会通过代理访问，当然也可以通过chrome插件Proxy SwitchyOmega实现chrome浏览器的局部代理，配置也非常简单，如下图：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss6.png" alt="SwitchyOmega配置"></p>
<h2 id="安装配置node-js"><a href="#安装配置node-js" class="headerlink" title="安装配置node.js"></a>安装配置node.js</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>在个人目录下新建一个packages文件夹用来存放安装包，然后下载node.js并解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir packages &amp; cd packages/</div><div class="line">$ wget http://nodejs.org/dist/v6.9.4/node-v6.9.4.tar.gz #版本号可替换成你当前最新的node版本</div><div class="line">$ tar -zxvf node-v6.9.4.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压好了需要编译安装node，这里需要用到gcc-c++，如果没有的话就需要安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum update #先更新yum</div><div class="line">$ sudo yum install gcc-c++ make</div></pre></td></tr></table></figure></p>
<p>编译安装node，编译过程较久，请耐心等待：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd node-v6.9.4 #进入解压后的文件夹</div><div class="line">$ ./configure --prefix=/usr/local/node #配置安装路径</div><div class="line">$ make #编译，时间较长</div><div class="line">$ sudo make install #完成安装</div></pre></td></tr></table></figure></p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>安装完成了，这时候执行<code>node -v</code>是找不到命令的，node安装在<code>/usr/local/node/</code>下，因为node的安装路径还不在环境变量中，下面来配置node运行的环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /etc/profile</div></pre></td></tr></table></figure></p>
<p>在<code>export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</code>这一行前面添加两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NODE_HOME=/usr/local/node</div><div class="line">export PATH=$NODE_HOME/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>然后输入命令<code>source /etc/pro</code>来使编辑立即生效，这时输入<code>node -v</code>发现已成功配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.9.4</div></pre></td></tr></table></figure></p>
<p>最后，运行node作为http服务器的话要开启端口，就是编辑上面的AWS实例的<code>安全组</code>，添加<code>入站规则</code>允许80端口就好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序-ToolTip信息提示组件]]></title>
      <url>https://chyrain.github.io/2017/01/20/WXA-ToolTip/</url>
      <content type="html"><![CDATA[<h1 id="WXA-ToolTip"><a href="#WXA-ToolTip" class="headerlink" title="WXA-ToolTip"></a>WXA-ToolTip</h1><p>微信小程序-ToolTip信息提示组件</p>
<p><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/tooltip.gif" alt="tooltip"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Chyrain/WXA-ToolTip.git" target="_blank" rel="external">https://github.com/Chyrain/WXA-ToolTip.git</a></p>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>将ToolTip文件夹复制到pages文件夹内</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>在需要使用ToolTip的页面对应的.wxml文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;import src=&quot;../ToolTip/toolTip.wxml&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!-- 引入toolTip模板 --&gt;</div><div class="line">&lt;template is=&quot;toolTip&quot; data=&quot;&#123;&#123;_toolTip_&#125;&#125;&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在需要使用ToolTip的页面对应的.wxss文件顶部添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import &quot;./ToolTip/toolTip.wxss&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>在.js中调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 在顶部引入toolTip.js</div><div class="line">var toolTip = require(&apos;../ToolTip/toolTip.js&apos;);</div><div class="line"></div><div class="line">// 在onLoad中初始化toolTip</div><div class="line">toolTip.init(this);</div><div class="line"></div><div class="line">// 调用showToolTip显示提示信息，参数:</div><div class="line">// type:类型包含&apos;success&apos;|&apos;info&apos;|&apos;warn&apos;|&apos;error&apos;, </div><div class="line">// text:内容</div><div class="line">// delay:延迟消失时间,不填不自动消失,只有success|info类型会自动消失</div><div class="line">toolTip.showToolTip(&apos;success&apos;, &apos;显示success提示&apos;, 2000);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有意思的JS]]></title>
      <url>https://chyrain.github.io/2017/01/19/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84JS/</url>
      <content type="html"><![CDATA[<h2 id="函数闭包-amp-柯里化"><a href="#函数闭包-amp-柯里化" class="headerlink" title="函数闭包&amp;柯里化"></a>函数闭包&amp;柯里化</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>有这么一道题：</p>
<blockquote>
<p>要实现一个函数，主要功能是对参数进行加法运算，但是参数传递方式略有不同：</p>
<p><code>CISDI_Cal(0).toString() //输出0</code><br><code>CISDI_Cal(0)(1).toString() //输出1</code><br><code>CISDI_Cal(0)(1)(2).toString() //输出3</code><br><code>var v = CISDI_Cal(0)(1); v(2).toString() //输出3</code></p>
</blockquote>
<p>这个题考察的是javascript里面常用的函数闭包，从示例可以看到：</p>
<ol>
<li>从第二个示例<code>CISDI_Cal(n)</code>返回的是一个函数对象，从第三和四示例可以看到<code>CISDI_Cal(n)(n)</code>返回的也是一个函数对象；</li>
<li><code>CISDI_Cal(0).toString()</code>返回了累加的结果，说明每个返回的函数对象都有<code>toString</code>方法；</li>
<li>多次函数调用累加得到结果，故前一函数获得参数累加后的值保留到了后一函数进行累加。</li>
</ol>
<p>由上面分析可知，<code>CISDI_Cal</code>内部有一个函数，这个函数执行后对输入进行了累加并返回了一个同样的函数，这个函数有<code>toString</code>方法输出累加结果：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CISDI_Cal</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        n += a;</div><div class="line">        <span class="keyword">return</span> add;</div><div class="line">    &#125;</div><div class="line">    add.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> add;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个例子讲的是函数闭包，过上面这种特殊的函数写法，可以让一个函数读取一个与自己不同作用域的局部变量，上面的<code>n</code>是函数<code>CISDI_Cal</code>内的局部变量，对<code>add</code>是可见的，但是反过来就不行，<code>add</code>内部的局部变量，对<code>CISDI_Cal</code>就是不可见的，既然<code>add</code>可以读取<code>CISDI_Cal</code>中的局部变量，那么只要把<code>add</code>作为返回值，我们就可以在<code>CISDI_Cal</code>外部读取它的内部变量，简单一句话来说函数闭包就是 <strong>函数内包含子函数，并最终return子函数</strong> ，<br>闭包函数的最大价值在于：我们可以在函数的外部（即子函数），直接读取该函数的局部变量。再仔细研究，就会发现<code>CISDI_Cal</code>函数就如同一个“类”，而其定义的局部变量就如同该“类”的全局变量；而子函数<code>add</code>函数，则如同这个“类”的方法，可以直接使用这个“类”的全局变量n。</p>
<h3 id="闭包函数的主要作用"><a href="#闭包函数的主要作用" class="headerlink" title="闭包函数的主要作用"></a>闭包函数的主要作用</h3><ol>
<li>缓存：可以实现数据缓存，我们可以把一个需要长期用到的变量设为闭包函数的局部变量，在子函数里面直接使用它。因此局部变量只定义初始化一次，但我们可以多次调用子函数并使用该变量。这比起我们在子函数中定义初始化变量，多次调用则多次初始化的做法，效率更高。闭包函数常见的一种用途就是，我们可以通过此实现计数功能。在闭包函数定义一个计数变量，而在子函数中对其进行++的操作。这样每次调用闭包函数，计数变量就会加1。</li>
<li>实现封装：如同前面所说，闭包函数就如同一个“类”，只有在该闭包函数里的方法才可以使用其局部变量，闭包函数之外的方法是不能读取其局部变量的。这就实现了面向对象的封装性，更安全更可靠。</li>
</ol>
<h3 id="那什么是柯里化呢？"><a href="#那什么是柯里化呢？" class="headerlink" title="那什么是柯里化呢？"></a>那什么是柯里化呢？</h3><p>额，这么说吧…利用柯里化机制的函数function就是闭包函数。</p>
<blockquote>
<p><em>柯里化（Currying）</em>，又称部分求值<em>（Partial Evaluation）</em>，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p>
</blockquote>
<p>百科上的定义是针对众多函数式语言而言的，按照Stoyan Stefanov(《JavaScript Pattern》作者)的说法，所谓“柯里化”就是使函数理解并处理部分应用.举个栗子的话，就是下面这个(来自<a href="http://www.zhangxinxu.com/wordpress/2013/02/js-currying/" target="_blank" rel="external">张鑫旭</a>)：</p>
<blockquote>
<p>柯南身子虽小，但是里面住的却是大柯南，也就是一个function里面还有个function。不同柯南处理不同情况，例如，小柯南可以和…稍等，他女朋友叫什么的忘了，我查查…哦，毛利兰一起洗澡澡；但是大柯南就不行。小柯南不能当面指正犯人，需借助小五郎；但是，大柯南就可以直接质问指出凶手。就类似于，内外function处理不同的参数。如果代码表示就是(小柯南=smallKenan; 大柯南=bigKenan; 小柯南嗑药会变大柯南)：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> smallKenan = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> bigKenan = <span class="function"><span class="keyword">function</span>(<span class="params">doing</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (action === <span class="string">"take drugs"</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (doing === <span class="string">"bathWithGirlFriend"</span>) &#123;</div><div class="line">                result = <span class="string">"尖叫，新一，你这个色狼，然后一巴掌，脸煮熟了~"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doing === <span class="string">"pointOutKiller"</span>) &#123;</div><div class="line">                result = <span class="string">"新一，这个案子就交给你的，快点找出谁是凶手吧~"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (doing === <span class="string">"bathWithGirlFriend"</span>) &#123;</div><div class="line">                result = <span class="string">"来吧，柯南，一起洗澡吧~"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doing === <span class="string">"pointOutKiller"</span>) &#123;</div><div class="line">                result = <span class="string">"小孩子家，滚一边去！"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee; <span class="comment">// 等同于return bigKenan</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> bigKenan;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 小柯南吃药了，然后和毛利兰洗澡，凶案现场指证犯人；结果是……</span></div><div class="line">smallKenan(<span class="string">"take drugs"</span>)(<span class="string">"bathWithGirlFriend"</span>)(<span class="string">"pointOutKiller"</span>);</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<p>尖叫，新一，你这个色狼，然后一巴掌，脸煮熟了~<br>新一，这个案子就交给你的，快点找出谁是凶手吧~</p>
</blockquote>
<p>“吃药”、“洗澡”、“指出凶手”就可以看成三个参数，其中，“吃药”确实是小柯南使用的，而后面的是“洗澡”、“指出凶手”虽然跟在smallKenan()后面，实际上是大柯南使用的。这个就是柯里化，参数部分使用。外部函数处理部分应用，剩下的由外部函数的返回函数处理。</p>
<p><strong>柯里化有3个常见作用：1. 参数复用；2. 提前返回；3. 延迟计算/运行。</strong></p>
<h4 id="1-参数复用"><a href="#1-参数复用" class="headerlink" title="1.参数复用"></a>1.参数复用</h4><p>前面第一个栗子就是，每次<code>add</code>都需要一个n参与计算，并保存计算结果，通过柯里化过程，<code>add</code>无需添加这个多余的参数。</p>
<h4 id="2-提前返回"><a href="#2-提前返回" class="headerlink" title="2.提前返回"></a>2.提前返回</h4><p>很常见的一个例子，兼容现代浏览器以及IE浏览器的事件添加方法。我们正常情况可能会这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn, capture</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">        el.addEventListener(type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            fn.call(el, e);</div><div class="line">        &#125;, capture);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">        el.attachEvent(<span class="string">"on"</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            fn.call(el, e);</div><div class="line">        &#125;);</div><div class="line">    &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的方法有什么问题呢？很显然，我们每次使用addEvent为元素添加事件的时候，(eg. IE6/IE7)都会走一遍if…else if …，其实只要一次判定就可以了，怎么做？–柯里化。改为下面这样子的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, sType, fn, capture</span>) </span>&#123;</div><div class="line">            el.addEventListener(sType, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                fn.call(el, e);</div><div class="line">            &#125;, (capture));</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, sType, fn, capture</span>) </span>&#123;</div><div class="line">            el.attachEvent(<span class="string">"on"</span> + sType, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                fn.call(el, e);</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>初始addEvent的执行其实值实现了部分的应用（只有一次的if…else if…判定），而剩余的参数应用都是其返回函数实现的，典型的柯里化。</p>
<h4 id="3-延迟计算"><a href="#3-延迟计算" class="headerlink" title="3.延迟计算"></a>3.延迟计算</h4><p>一般而言，延迟计算或运行是没有必要的，因为一天花10块钱和月末花300块钱没什么本质区别——只是心里好受点（温水炖青蛙）。嘛，毕竟只是个人看法，您可能会不这么认为。举个例子，我每周末都要去钓鱼，我想知道我12月份4个周末总共钓了几斤鱼，把一些所谓的模式、概念抛开，我们可能就会下面这样实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fishWeight = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> addWeight = <span class="function"><span class="keyword">function</span>(<span class="params">weight</span>) </span>&#123;</div><div class="line">    fishWeight += weight;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">addWeight(<span class="number">2.3</span>);</div><div class="line">addWeight(<span class="number">6.5</span>);</div><div class="line">addWeight(<span class="number">1.2</span>);</div><div class="line">addWeight(<span class="number">2.5</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fishWeight);   <span class="comment">// 12.5</span></div></pre></td></tr></table></figure>
<p>每次addWeight都会累加鱼的总重量。<br>若是有柯里化实现，则会是下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curryWeight = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _fishWeight = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, _fishWeight);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            _fishWeight = _fishWeight.concat([].slice.call(<span class="built_in">arguments</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fishWeight = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> addWeight = curryWeight(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i=<span class="number">0</span>; len = <span class="built_in">arguments</span>.length;</div><div class="line">    <span class="keyword">for</span> (i; i&lt;len; i+=<span class="number">1</span>) &#123;</div><div class="line">        fishWeight += <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">addWeight(<span class="number">2.3</span>);</div><div class="line">addWeight(<span class="number">6.5</span>);</div><div class="line">addWeight(<span class="number">1.2</span>);</div><div class="line">addWeight(<span class="number">2.5</span>);</div><div class="line">addWeight();    <span class="comment">//  这里才计算</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fishWeight);    <span class="comment">// 12.5</span></div></pre></td></tr></table></figure>
<blockquote>
<p>部分内容转载自<a href="http://www.zhangxinxu.com" target="_blank" rel="external">张鑫旭-鑫空间-鑫生活</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在MAC上使用SVN]]></title>
      <url>https://chyrain.github.io/2017/01/16/SVN%E5%9C%A8MAC%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="SVN在MAC"><a href="#SVN在MAC" class="headerlink" title="SVN在MAC"></a>SVN在MAC</h2><ul>
<li>checkout一个远程库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn checkout https://svn.duapp.com/appid8dt61afdcf --username=chy19910810@163.com --password=chy10350722. ./baidu</div></pre></td></tr></table></figure>
<ul>
<li>从本地导入代码到服务器(第一次初始化导入)，在终端中输入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn import /Users/apple/Documents/eclipse_workspace/weibo svn://localhost/mycode/weibo --username=mj --password=123 -m &quot;初始化导入&quot;</div></pre></td></tr></table></figure>
<ul>
<li>提交代码到服务器：svn commit -m “修改了main.m文件”</li>
<li>更新服务器端的代码到客户端：svn update</li>
<li>svn的其他用法，可以在终端输入：svn help</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信抢红包神器，安卓党的福音]]></title>
      <url>https://chyrain.github.io/2017/01/05/%E5%BE%AE%E4%BF%A1%E6%8A%A2%E7%BA%A2%E5%8C%85%E7%A5%9E%E5%99%A8%EF%BC%8C%E5%AE%89%E5%8D%93%E5%85%9A%E7%9A%84%E7%A6%8F%E9%9F%B3/</url>
      <content type="html"><![CDATA[<h2 id="微信红包助手"><a href="#微信红包助手" class="headerlink" title="微信红包助手"></a>微信红包助手</h2><p><a href="http://chyrain.com/app/wxbot/app.html" target="_blank" rel="external"><br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/V5WxBot_m.gif" width="330" alt="chess_react" align="center"><br></a></p>
<h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><ol>
<li>使用手机时，自动识别微信通知，快速抢红包</li>
<li>屏幕未解锁，发出红包提醒</li>
<li>取消屏幕密码，息屏也能自动抢红包</li>
</ol>
<h3 id="应用介绍"><a href="#应用介绍" class="headerlink" title="应用介绍"></a>应用介绍</h3><p>微信红包提醒，自动抢红包，让你的小伙伴们惊讶吧！</p>
<blockquote>
<p>注：本软件仅供学习使用，完全模拟人工操作，抢红包速度取决于你手机的性能与网络，不涉及任何第三方软件接口，本软件无病毒、不收集用户隐私信息，禁止使用本软件参与赌博活动。一切因使用本软件造成的任何后果，本软件责任人概不负责，亦不承担任何法律责任!<br>本应用源于codyboy的qianghongbao(github)项目，经过改进和再次开发以适应当前版本的微信，不做任何盈利性目的，特此声明，同时感谢原作者，如有侵权请联系客服告知。<br>应用截图</p>
</blockquote>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ol>
<li>进入“V5红包助手”，需要打开“微信”开关和“快速监听通知栏”开关，并进入右上角菜单页的“打开辅助服务”和“打开通知栏服务”检查对应服务是否被允许（魅族手机打开辅助服务需要在打开“打开辅助服务”后进入“无障碍”，再选择打开“V5红包助手”）。</li>
<li>进入微信，确保 微信 -&gt; 我 -&gt; 设置 -&gt; 新消息提醒 -&gt; 通知显示消息详情保持打开状态，且红包所在群聊不能开启消息免打扰。</li>
<li>确保V5红包助手处于运行状态，不被系统后台清理，各系统手机设置不同，一般在省电管理中可以找到对应设置项。（例如：<br> 魅族：手机管家-&gt;省电模式-&gt;待机耗电管理-&gt;选择保持运行的耗电应用开启“V5红包助手”的对应开关；<br> 三星：设置-&gt;电池-&gt;应用程序省电[详情]-&gt;找到”V5红包助手”并点击选择“已禁用”选项）</li>
<li>仅支持Android 4.3及以上系统。</li>
<li>为防止微信跟踪发现到异常抢红包行为导致账号使用异常，请避免频繁使用红包助手抢红包，并尽量设置延迟拆红包时间来防止微信捕捉到异常抢红包行为（进入“V5红包助手“-“微信设置”-“设置延迟拆红包/查看手气时间”值为1000毫秒以上)，因使用”V5红包助手”出现的后果本应用概不负责。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结]]></title>
      <url>https://chyrain.github.io/2016/12/23/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="2016年终总结"><a href="#2016年终总结" class="headerlink" title="2016年终总结"></a>2016年终总结</h1><blockquote>
<p>“时间是一切财富中最宝贵的财富。。。” — 狭缩德</p>
</blockquote>
<h2 id="迅捷的2016"><a href="#迅捷的2016" class="headerlink" title="迅捷的2016"></a>迅捷的2016</h2><blockquote>
<p><em>——人生天地之间，若白驹过隙，忽然而已。蓦然回首，头上似霜雪，脸上似山川。</em></p>
</blockquote>
<p><strong>一年过去了，总结自己有以下几个遗憾：</strong></p>
<ul>
<li>没有时间坚持技术博客写作，尽管在不断给自己的某某云服务充值，博客内容始终空空如也</li>
<li>没能坚持走一条完整的技术路线，而是四处涉猎，缺哪补哪</li>
<li>工资不够花（好吧，我知道你也一样）</li>
</ul>
<p><strong>一年过去了，我都干了些啥：</strong></p>
<ul>
<li>公司Android平台App的全新2.x版本的升级，以及功能更新和维护，从原先的开放链接下载到陆续上架到应用宝、豌豆荚、360手机助手，最近还将推出小米市场专版</li>
<li>公司iOS平台App的业务完善和发布，以及上架这一年的常规功能更新和维护</li>
<li>公司Android和iOS两个平台的SDK接口的逐步完善和稳定，不定时地充当这两个sdk的技术客服</li>
<li>从9月底开始接手公司HTML5开发维护任务，完成了大概13个座席版本和10个客户版本的release功能升级和bug维护</li>
<li>拿了驾照，经过了前后6个月时间，利用个别零散的休息日，也时而请下假，算是比较轻松地拿下了驾照</li>
<li>总结：几乎把所有时间给了公司，白天上班，晚上回来经常加班加点完善产品</li>
</ul>
<p><strong>一年过去了，同样也会有如下几个收获：</strong></p>
<ul>
<li>横跨三大技术路线(其实并不想…)，从Android到iOS再到H5的“无缝衔接”，当然，这很让人头大，就像熟悉了Eclipse的切换到Android Studio，从Eclipse切换到Xcode再切换到Sublime Text，这其中的快捷键使用，还有java、OC和js的语法经常方寸大乱。</li>
<li>重拾大学时期接触过的网页开发知识，发现如今前端技术架构已发生巨变，WVVM架构和组件化的思路是一大亮点(与App开发越发接近)</li>
<li>公司客服系统的所有前端产品算是都让我给承包了，感到责任重于泰山啊😹</li>
<li>获得温柔贤淑的女票一枚</li>
</ul>
<p><strong>这一年的自我感觉：</strong></p>
<ul>
<li>感觉能力提升不大，但思维方式改变比较多</li>
<li>开发的同时也注重产品思维</li>
<li>看到大牛的博客依然莫名的兴奋</li>
<li>执行力决定效果，杜绝了大部分的光说不练</li>
</ul>
<h2 id="2017？"><a href="#2017？" class="headerlink" title="2017？"></a>2017？</h2><p>身体是革命的本钱，这一年发现眼神越来越不好了，经常有莫名的闪光和模糊，毕竟作为程序员一整天面对显示屏，这个日后一定得好好保护。未来一年，不需要太多的计划，有时间多出去走走，把生活过得更像生活一些，而不只是工作。</p>
<p>计划：</p>
<ul>
<li>利用空闲时间做一款让自己满意的作品（网页竞价推广过滤插件，H5跨平台桌面应用，个人微信智能助手，抢红包利器，精美个人博客页）</li>
<li>带女票去一个远点的地方旅游</li>
<li>提升薪资到自己能够接受的水平</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[使用React遇到的坑]]></title>
      <url>https://chyrain.github.io/2016/12/03/%E4%BD%BF%E7%94%A8React%E7%9A%84%E5%9D%91/</url>
      <content type="html"><![CDATA[<h2 id="React-ES6开发过程中遇到的坑"><a href="#React-ES6开发过程中遇到的坑" class="headerlink" title="React/ES6开发过程中遇到的坑"></a>React/ES6开发过程中遇到的坑</h2><ol>
<li>setState第二层级必须assign，而且$.assign({}, this.state.xxx, {x:x})，尽量不要使用一层以上层级</li>
<li>redux connect 组件中，传入props内的函数function声明方式才可以获得bind或者call传入的this参数</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React实现国际象棋]]></title>
      <url>https://chyrain.github.io/2016/11/17/Chess-With-React/</url>
      <content type="html"><![CDATA[<h2 id="ChessWithReact"><a href="#ChessWithReact" class="headerlink" title="ChessWithReact"></a>ChessWithReact</h2><p>A chess web game use <a href="https://facebook.github.io/react" target="_blank" rel="external">react</a> and <a href="http://gaearon.github.io/react-dnd/" target="_blank" rel="external">react-dnd</a>.</p>
<p>本实例参考<code>react-dnd</code>官方Tutorial实例，并进行扩展和改进。</p>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/chess_react.gif" width="330" alt="chess_react" align="center"></p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://github.com/Chyrain/ChessWithReact.git" target="_blank" rel="external">github地址</a></p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><blockquote>
<p>  MIT License<br>  Copyright (c) 2016 <a href="http://chyrain.com" target="_blank" rel="external">Chyrain</a></p>
<p>  Permission is hereby granted, free of charge, to any person obtaining a copy<br>    of this software and associated documentation files (the “Software”), to deal<br>    in the Software without restriction, including without limitation the rights<br>    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>    copies of the Software, and to permit persons to whom the Software is<br>    furnished to do so, subject to the following conditions:</p>
<p>  The above copyright notice and this permission notice shall be included in all<br>    copies or substantial portions of the Software.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git操作记录]]></title>
      <url>https://chyrain.github.io/2016/06/08/git%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><ul>
<li><p>放弃本地所有修改，强制更新</p>
<p>  git fetch –all<br>  git reset –hard origin/master</p>
</li>
<li><p>删除本地tag</p>
<p>  git tag -d <tagname></tagname></p>
</li>
<li><p>删除远程tag</p>
<p>  git push origin –delete tag <tagname></tagname></p>
<p>  or</p>
<p>  git tag -d <tagname><br>  git push origin :refs/tags/<tagname></tagname></tagname></p>
</li>
<li><p>本地tag推送到远程</p>
<p>  git push –tags</p>
</li>
<li><p>获取远程tag</p>
<p>  git fetch origin tag <tagname></tagname></p>
</li>
<li><p>删除远程分支</p>
<p>  git push origin –delete <branchname></branchname></p>
<p>  or</p>
<p>  git push origin :<branchname></branchname></p>
</li>
<li><p>本地clone后更新远程库内容</p>
<p>  如果你不是fork的项目的话：</p>
<pre><code>git pull
</code></pre><p>  即可。如果你是fork的话，把原来的项目添加到：</p>
<pre><code>git remote add usp [主项目地址]
</code></pre><p>  然后：</p>
<pre><code>git fetch ups &amp;&amp; git merge ups/master
</code></pre></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sudo 命令的一些小技巧]]></title>
      <url>https://chyrain.github.io/2016/03/17/sudo%20Tips/</url>
      <content type="html"><![CDATA[<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><blockquote>
<p>在Linux下，我们需要使用sudo命令，让普通用户也能执行一些root命令，本文对常用的一些sudo操作以及平时没有发现的小技巧进行简单介绍。</p>
</blockquote>
<h3 id="1-授权"><a href="#1-授权" class="headerlink" title="1. 授权"></a>1. 授权</h3><p>普通用户如果没有权限访问某些文件或者执行某个命令时，要是该用户获得root授权，就可以通过在要执行的命令前加上sudo，临时切换到root用户的权限完成相关操作。</p>
<p>怎样让用户可以临时获取root权限呢？这就需要在<code>/etc/sudoers</code>文件中进行配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#授权给单个用户所有命令的执行权限</div><div class="line">username ALL=(ALL) ALL</div></pre></td></tr></table></figure>
<p>上面这个例子中：</p>
<ul>
<li>username: 允许使用suod的用户名</li>
<li>ALL: 允许从任何终端(机器)使用sudo</li>
<li>(ALL): 允许以任何用户身份执行sudo</li>
<li>ALL: 允许sudo权限执行任何命令</li>
</ul>
<p>如果我们想让用户<code>chyrain</code>只能在本机（主机名为<code>work-pc</code>）以<code>root</code>账户执行<code>/bin/chown</code>、<code>/bin/chmod</code>这两条命令，那么就应该这样配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chyrain work-pc=(root) /bin/chown,/bin/chmod</div></pre></td></tr></table></figure>
<p>当你的帐号在<code>/etc/sudoers</code>文件中被授予 sudo 的权限，那么你就可以将任何 root 命令作为 sudo 命令的参数，使用 root 权限来执行该命令。首次使用会要求你输入当前用户的密码，系统确实输入正确即以 root 权限来执行 mount 命令，接下来一段时间（默认为5分钟）再次使用 sudo 命令就不需要输密码了。</p>
<h3 id="2-执行root命令后忘记加sudo"><a href="#2-执行root命令后忘记加sudo" class="headerlink" title="2. 执行root命令后忘记加sudo"></a>2. 执行root命令后忘记加sudo</h3><p>我们会碰到这样一种情形，当我们输入一个长长的命令，果断地敲下回车之后出现无权限操作，才发现忘记在命令前面加sudo了，一般我们的做法是按 ↑ 回到上一条命令，在该命令之前加上sudo，再执行该命令。</p>
<p>其实，我们并不需要这样，只要输入<code>sudo !!</code>即可，这里的<code>!!</code>代表上一条命令。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/sudoers</div><div class="line">cat: cannot open /etc/sudoers for reading: Permission denied</div><div class="line"></div><div class="line">$ sudo !!</div><div class="line">sudo cat /etc/sudoers</div><div class="line">## sudoers file.</div><div class="line">##</div><div class="line">## This file MUST be edited with the &apos;visudo&apos; command as root.</div><div class="line">## Failure to use &apos;visudo&apos; may result in syntax or file permission errors</div><div class="line">## that prevent sudo from running.</div><div class="line">##</div><div class="line">## See the sudoers man page for the details on how to write a sudoers file.</div><div class="line">##</div><div class="line">## User privilege specification</div><div class="line">##</div><div class="line">root ALL=(ALL) ALL</div><div class="line">%admin  ALL=(ALL) ALL</div><div class="line">#</div></pre></td></tr></table></figure>
<h3 id="3-vim编辑完成后发现忘记使用sudo无法保存"><a href="#3-vim编辑完成后发现忘记使用sudo无法保存" class="headerlink" title="3. vim编辑完成后发现忘记使用sudo无法保存"></a>3. vim编辑完成后发现忘记使用sudo无法保存</h3><p>我们经常会遇到这样的一个囧境：使用 <code>vim</code> 对某个文件进行编辑，编辑完之后，按 ESC 之后回到普通模式，再按 <code>:wq</code> 准备保存退出时，发现没有权限对该文件进行修改，我们在使用 vim 命令时忘记在前面加 sudo 了。我就经常出现这种问题，之前的做法是只能不保存强退，再加上 sudo 重新编辑。</p>
<p>但是今后我们再也不需要用这么愚蠢的做法了，我们可以在 vim 的普通模式下，按 <code>:w !sudo tee %</code> ，这样就可以 root 权限来保存文件了，你也无需因为自己一时忘记加个 sudo 而沮丧懊恼了！</p>
<h3 id="4-shell-内置命令如何使用-sudo"><a href="#4-shell-内置命令如何使用-sudo" class="headerlink" title="4. shell 内置命令如何使用 sudo"></a>4. shell 内置命令如何使用 sudo</h3><p>shell 是一个交互式的应用程序，在执行外部命令时通过 fork 来创建一个子进程，再通过 exec 来加载外部命令的程序来执行，但是如果一个命令是 shell 内置命令，那么只能直接由 shell 来运行。sudo 的意思是，以别的用户（如root）的权限来 fork 一个进程，加载程序并运行，因此 sudo 后面不能跟 shell 的内置命令，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo cd /sys/kernel/debugfs</div><div class="line">sudo: cd: command not found</div></pre></td></tr></table></figure>
<p>在这种情况，我们又没有 root 账户的密码，我们怎样执行该命令呢？有种办法就是使用 <code>sudo</code> 获得root shell 的权限，然后 <em>在root shell 中执行该命令</em> 。进入root shell 很简单，输入sudo bash 确认本用户的密码即可，此时你会发现命令提示符显示当前是 root。一旦获得root shell，你可以执行任何命令而不需要在每条命令前输入sudo了。</p>
<p>另外，常用的shell 内置命令在这里 有简单介绍，我们可以使用 type 命令来查看命令的类型，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ type ls</div><div class="line">ls is /bin/ls</div><div class="line">$ type umask</div><div class="line">umask is a shell builtin</div></pre></td></tr></table></figure>
<h3 id="5-sudo操作记录日志"><a href="#5-sudo操作记录日志" class="headerlink" title="5. sudo操作记录日志"></a>5. sudo操作记录日志</h3><p>作为一个 Linux 系统的管理员，不仅可以让指定的用户或用户组作为root用户或其它用户来运行某些命令，还能将指定的用户所输入的命令和参数作详细的记录。而sudo的日志功能就可以用户跟踪用户输入的命令，这不仅能增进系统的安全性，还能用来进行故障检修。但是要记录sudo的日志还要一些简单的配置：</p>
<ul>
<li><p>创建sudo日志文件<br>  我们将sudo日志文件放置在<code>/var/log/sudo.log</code>文件中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo touch /var/log/sudo.log</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/rsyslog.conf</code>配置文件<br>  我的系统为Ubuntu为该名字，但有些系统名为<code>/etc/syslog.conf</code>，注意不同发行版本之间的差别，在该文件加入下面一行：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">local2.debug    /var/log/sudo.log    #空白不能用空格，必须用tab</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/sudoers</code>配置文件<br>  注意网上很多关于sudo日志文件配置的都缺少这一步，在该文件中加入下面一行：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Defaults    logfile=/var/log/sudo.log</div></pre></td></tr></table></figure>
</li>
<li><p>重启syslog服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service rsysylog restart</div></pre></td></tr></table></figure>
</li>
<li><p>查看suod日志记录<br>  经过上面配置，sudo的命令记录都会记录到文件<code>/var/log/sudo.log</code>中，例如我们执行几条sudo命令之后，查看该文件的记录如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat sudo.log</div><div class="line">Nov 17 22:23:52 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/bin/cat /etc/sudoers</div><div class="line">Nov 17 22:24:42 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/bin/ls</div><div class="line">Nov 17 22:28:12 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/usr/sbin/service rsyslog restart</div><div class="line">Nov 17 22:29:26 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/bin/ls /root/</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://chyrain.github.io/2015/05/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>https://chyrain.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><ul>
<li>Chyrain<blockquote>
<ul>
<li>chyrain.com</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>https://chyrain.github.io/index.html</url>
      <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><ul>
<li>Chyrain<blockquote>
<ul>
<li>chyrain.com</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
  
</search>
