<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[前端长列表如何流畅高效渲染]]></title>
      <url>https://chyrain.github.io/2017/12/25/%E5%89%8D%E7%AB%AF%E9%95%BF%E5%88%97%E8%A1%A8%E5%A6%82%E4%BD%95%E6%B5%81%E7%95%85%E9%AB%98%E6%95%88%E6%B8%B2%E6%9F%93/</url>
      <content type="html"><![CDATA[<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>长列表渲染节点数由于较多，直接渲染肯定会造成页面的卡顿，一种方式是滚动加载（infinite scrool），并非一次性渲染全部列表，而在滚动到页面底部的时候，再去加载剩余的数据，二是通过合理的逻辑来限制仅渲染可视区域部分；</p>
<p>当然方式一需要产品设计允许，毕竟滚动到底步才加载的方式对体验有一定折损，而方式二就需要比较复杂的逻辑了。</p>
<p>对于方式二实现的一些思路：</p>
<ul>
<li>首先是优化列表项，每个列表项内的节点数尽量少；</li>
<li>不在页面显示区域的项目需要将列表高度撑起，不用渲染，只需要一个占位元素，高度为全部列表项加载完的scrollHeight<blockquote>
<p>令列表中的每个元素的高度是 <code>itemHeight</code>， 列表高度是 <code>clientHeight</code>，列表一共10000条数据，总高度为 itemheight * 10000，可视区域列表项数量为 <code>visibleCount = Math.ceil(clientHeight / itemHeight)</code>.</p>
</blockquote>
</li>
<li>计算当前在可视区域的元素数据索引并渲染<blockquote>
<p>通过onScroll监听当前滚动位置 <code>scrollTop</code>，计算得到当前位置列表位置序号<code>var start = Math.floor(scrollTop / itemHeight)</code>，<code>var end = start + visibleCount</code>， start 和 end 分别记录可见区域开始和结束位置索引；然后截取数据 <code>data.slice(start, end)}</code> 渲染到列表上，这样每次仅渲染 visibleCount 数量节点，大大提高渲染效率</p>
</blockquote>
</li>
<li>此时滚动起来后面的数据就看不见了，还需要优化滚动位置<blockquote>
<p>给占位元素加上一个 <code>transform = `translate(0, ${fixedScrollTop}px)</code>，其中 <code>fixedScrollTop = scrollTop - scrollTop % 30</code>.</p>
</blockquote>
</li>
</ul>
<p>此方法在某些scroll事件支持不好的浏览器下可能存在问题，另外还有限制列表项高度是固定的</p>
<p>具体实现可查看<a href="https://jsfiddle.net/quvkwyqn/" target="_blank" rel="external">demo</a></p>
<p><del>此外，还思考在快递滚动下是否可以再进一步优化性能，或许可能影响一点点视觉效果，比如：</del></p>
<ul>
<li><del>在快速滚动时，跳过中间滚动列表项的细节，只需渲染出大致的骨骼框架，减少需要渲染的节点数；</del></li>
<li><del>通过判断滚动速度低于一定阈值时就需要渲染出可视区域的列表项的完整细节了；</del></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Redux在非React下的应用]]></title>
      <url>https://chyrain.github.io/2017/12/12/Redux%E5%9C%A8%E9%9D%9EReact%E7%8E%AF%E5%A2%83%E4%B8%8B%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      <content type="html"><![CDATA[<h1 id="Redux在非react下的应用"><a href="#Redux在非react下的应用" class="headerlink" title="Redux在非react下的应用"></a>Redux在非react下的应用</h1><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'header'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'body'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'footer'</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* 通过 provider 生成这个 store 对应的 connect 函数 */</span></div><div class="line"><span class="keyword">const</span> connect = provider(store)</div><div class="line"></div><div class="line"><span class="comment">/* 普通的 render 方法(类似React中的组件) */</span></div><div class="line"><span class="keyword">let</span> renderHeader = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'render header'</span>)</div><div class="line">  $(<span class="string">'#header'</span>).html(props.header)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/* 用 connect 取数据传给 render 方法 */</span></div><div class="line"><span class="keyword">const</span> mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">header</span>: state.header &#125;</div><div class="line">&#125;</div><div class="line">renderHeader = connect(mapStateToProps)(renderHeader)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> provider = <span class="function">(<span class="params">store</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">mapStateToProps</span>) =&gt;</span> &#123; <span class="comment">// connect 函数</span></div><div class="line">    <span class="keyword">return</span> <span class="function">(<span class="params">render</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">/* 返回新的渲染函数，就像 React-redux 的 connect 返回新组件 */</span></div><div class="line">        <span class="keyword">const</span> renderWrapper = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">            <span class="keyword">const</span> newProps = mapStateToProps(store.getState())</div><div class="line">            <span class="comment">/* 如果新的结果和原来的一样，就不要重新渲染了 */</span></div><div class="line">            <span class="keyword">if</span> (shallowEqual(props, newProps)) <span class="keyword">return</span></div><div class="line">            props = newProps</div><div class="line">            render(props)</div><div class="line">        &#125;</div><div class="line">        <span class="comment">/* 监听数据变化重新渲染 */</span></div><div class="line">        store.subscribe(renderWrapper)</div><div class="line">        <span class="keyword">return</span> renderWrapper</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* body */</span></div><div class="line"><span class="keyword">let</span> renderBody = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'render body'</span>)</div><div class="line">  $(<span class="string">'#body'</span>).html(props.body)</div><div class="line">&#125;</div><div class="line">mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">body</span>: state.body &#125;</div><div class="line">&#125;</div><div class="line">renderBody = connect(mapStateToProps)(renderBody)</div><div class="line"></div><div class="line"><span class="comment">/* footer */</span></div><div class="line"><span class="keyword">let</span> renderFooter = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="string">'render footer'</span>)</div><div class="line">  $(<span class="string">'#footer'</span>).html(props.footer)</div><div class="line">&#125;</div><div class="line">mapStateToProps = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123; <span class="attr">footer</span>: state.footer &#125;</div><div class="line">&#125;</div><div class="line">renderFooter = connect(mapStateToProps)(renderFooter)</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">shallowEqual</span>(<span class="params">left, right</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> left) &#123;</div><div class="line">        <span class="keyword">if</span> (left[key] !== right[key]) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Javascript的事件循环]]></title>
      <url>https://chyrain.github.io/2017/11/24/Javascript%E7%9A%84%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
      <content type="html"><![CDATA[<h2 id="从一个示例开始"><a href="#从一个示例开始" class="headerlink" title="从一个示例开始"></a>从一个示例开始</h2><p>在查看解析之前，思考一下下面的代码会输出什么内容？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">1</span>)</div><div class="line">&#125;, <span class="number">0</span>);</div><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> <span class="title">executor</span>(<span class="params">resolve</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>);</div><div class="line">  <span class="keyword">for</span>( <span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;<span class="number">10000</span> ; i++ ) &#123;</div><div class="line">    i == <span class="number">9999</span> &amp;&amp; resolve();</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">3</span>);</div><div class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">4</span>);</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="number">5</span>);</div></pre></td></tr></table></figure>
<p>解析：</p>
<ul>
<li>首先 <code>setTimeout</code> 里的内容进入 Event Loop 的 <strong>macrotask</strong>，在下一个 Event Loop 中执行，所以暂不执行.</li>
<li>Promise里的函数是立即执行的，其中 <code>resolve</code> 中的任务会进入 Event Loop 的 <strong>microtask</strong>，所以最先输出 2 和 3.</li>
<li>而后是Promise之后的语句，输出 5. 到这里立即执行的语句已经结束.</li>
<li>下一阶段开始执行 <strong>microtask</strong> 中的任务，即 <code>resolve</code> 后 <code>then</code> 中的回调，故输出 4 .</li>
<li>然后，开始下一轮循环，执行 <strong>macrotask</strong> 中的任务，所以是执行到 <code>setTimeout</code> 的回调输出 1.</li>
</ul>
<blockquote>
<p>其中要注意的是，Promise.then()里面的回调属于 <strong>microtask</strong>, 会在当前 Event Loop 的最后执行, 而 <code>setTimeout</code> 内的回调属于 <strong>macrotask</strong>, 会在下一个 Event Loop 中执行.</p>
</blockquote>
<p>所以正确输出顺序是：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span></div><div class="line"><span class="number">3</span></div><div class="line"><span class="number">5</span></div><div class="line"><span class="number">4</span></div><div class="line"><span class="number">1</span></div></pre></td></tr></table></figure>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><p>一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。</p>
<p>任务队列又分为macro-task（宏任务）与micro-task（微任务）。</p>
<ul>
<li><p>macro-task大概包括：script(整体代码), setTimeout, setInterval, setImmediate, I/O, UI rendering。</p>
</li>
<li><p>micro-task大概包括: process.nextTick, Promise, Object.observe(已废弃), MutationObserver(html5新特性)</p>
</li>
</ul>
<p>事件循环的顺序，决定了JavaScript代码的执行顺序。它从script(整体代码)开始第一次循环。之后全局上下文进入函数调用栈。直到调用栈清空(只剩全局)，然后执行所有的micro-task。当所有可执行的micro-task执行完毕之后。循环再次从macro-task开始，找到其中一个任务队列执行完毕，然后再执行所有的micro-task，这样一直循环下去。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[为什么我选 React 而不是 Vue(翻译)]]></title>
      <url>https://chyrain.github.io/2017/11/14/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E9%80%89%20React%20%E8%80%8C%E4%B8%8D%E6%98%AF%20Vue(%E7%BF%BB%E8%AF%91)/</url>
      <content type="html"><![CDATA[<p>你是否注意到了我起的相当老练的标题？这是一篇依据我个人喜好而非客观评价好坏试图引起框架口舌之争的文章。我猜想这并不会发生。</p>
<p>React和Vue看起来非常相似的并且我在项目中两者都用过。他们都使用了虚拟DOM，并且都专注于组件化视图。<br>React 和 Vue 从表面上来看是非常相似的，我在项目当中使用了这两个框架。他们都运用了 virtual DOM 并且都是重点关注 View 层的。两者都是为了解决相同的作为动态 HTML 渲染工具的问题，但我相信它们两者之间肯定存在着定义上的差异，贯穿着整个工作流。 React 是完全采用 Javascript 的， 而 Vue 不是。</p>
<p>在 React 的使用者中，有一个非常常见且真实的口头禅，那就是“这只是 Javascript”（“it’s just Javascript”），Vue 似乎有很多不必要的功能，这就会让组件更难理解，下面给出一些例子：</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><p>一个 React 组件可以简单地被认为是返回元素的函数（或者至少有一个具有这样的功能的类）。 这种功能性方法对于 Javascript 开发人员是非常自然的。 传入数据，得到元素。 如果你有一堆内容在数组当中，你可以简单地将它们遍历出一系列元素。 如果你想排除这些项目中的某一些元素，你可以使用 Array 数组对象中的 filter 方法和 map 方法去处理元素并且得到结果。这个功能性工作流程完美地反映了您对应用程序的其他部分的理解。 这种方法是对Javascript的优势的补充。</p>
<p>一个 Vue 组件更像是一个能够从数据结构当中引用数据的模板。它包含了一个 DSL（Domain specific language），虽然是次要的，但是显然是完全没有必要的。我<strong>不需要</strong> v-for 因为我可以使用 map()。我<strong>不需要</strong> v-if 因为我可以使用普通的老旧的 if。模板至少会带来一定程度的有限或无益的认知压力。</p>
<p>模板还引入了作用域的问题。 如果我将一些静态数据导入到我的 React 组件中，我可以在我的渲染函数中使用它，因为<strong>所有标准的 JavaScript 作用域规则都应用于此</strong>。 它只是一个 函数，与其他任何 函数 完全一样。 Vue 的模板与 Javascript 的单独作用域相互作用，因此您必须将该静态数据写到 Vue 组件中，并将其作为计算属性字段返回。 这些东西都不是特别痛苦，但都是不必要的。</p>
<h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>因为 React 是“Just Javascript”，在我的经验中，开发经验要好得多。 例如，prettier-js（一个令人惊讶的，有主见的代码格式化程序）只适用于JSX，但是在 Vue 模板中可以嵌入表达式，因为 Vue 的模板不是“Just Javascript”。 另外，由于模板和 Javascript 在不同的范围内运行，所以对于 linter （此处 Linter 参考维基百科） 来说，模板中缺少/拼错的变量是不可能的（至少目前是这样）。 这是另一个烦心且不必要的地方。</p>
<h2 id="惯例的颠覆者：响应式状态"><a href="#惯例的颠覆者：响应式状态" class="headerlink" title="惯例的颠覆者：响应式状态"></a>惯例的颠覆者：响应式状态</h2><p>React 和 Redux 永远不变地拥抱它们的核心。同样，React 是一个 reducer 渲染函数，它将 props 传入一个元素当中，React 状态变化也是简单的函数将旧状态和一个动作变成一个新的状态。而 Vue（和Vuex）有 <strong> 响应式状态 </strong>，这意味着你可以使用规定的方法修改状态。这与我在 JavaScript 中其他地方使用的操作风格不太协调。</p>
<p>我已经习惯了不可变的数据结构，这对我来说会觉得比较靠谱。Vuex 几乎迫使你不去使用它们，因为所有的 getter/setter 都被添加进了 store。在 React/Redux 中也有 state/store，你猜对了，“只是 JavaScript 对象”。</p>
<p>如果你喜欢这篇文章，请点击 :green_heart: 标志，让更多的人能读到它！</p>
<p>_Steven Poulton 是一位居住在英国曼彻斯特的 Web开发者和技术架构师。 在空余时间，他喜欢制作独立音乐和独立游戏，与自己的猫咪们一起玩耍。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[中文技术文档写作规范]]></title>
      <url>https://chyrain.github.io/2017/10/25/%E4%B8%AD%E6%96%87%E6%96%87%E6%A1%A3%E5%86%99%E4%BD%9C%E8%A7%84%E8%8C%83/</url>
      <content type="html"><![CDATA[<h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><!-- MarkdownTOC -->
<ul>
<li><a href="#%E6%A0%87%E9%A2%98">标题</a><ul>
<li><a href="#%E5%B1%82%E7%BA%A7">层级</a></li>
<li><a href="#%E5%8E%9F%E5%88%99">原则</a></li>
</ul>
</li>
<li><a href="#%E6%96%87%E6%9C%AC">文本</a><ul>
<li><a href="#%E5%AD%97%E9%97%B4%E8%B7%9D">字间距</a></li>
<li><a href="#%E5%8F%A5%E5%AD%90">句子</a></li>
<li><a href="#%E5%86%99%E4%BD%9C%E9%A3%8E%E6%A0%BC">写作风格</a></li>
<li><a href="#%E8%8B%B1%E6%96%87%E5%A4%84%E7%90%86">英文处理</a></li>
</ul>
</li>
<li><a href="#%E6%AE%B5%E8%90%BD">段落</a><ul>
<li><a href="#%E5%8E%9F%E5%88%99-1">原则</a></li>
<li><a href="#%E5%BC%95%E7%94%A8">引用</a></li>
</ul>
</li>
<li><a href="#%E6%95%B0%E5%80%BC">数值</a><ul>
<li><a href="#%E5%8D%8A%E8%A7%92%E6%95%B0%E5%AD%97">半角数字</a></li>
<li><a href="#%E5%8D%83%E5%88%86%E5%8F%B7">千分号</a></li>
<li><a href="#%E8%B4%A7%E5%B8%81">货币</a></li>
<li><a href="#%E6%95%B0%E5%80%BC%E8%8C%83%E5%9B%B4">数值范围</a></li>
<li><a href="#%E5%8F%98%E5%8C%96%E7%A8%8B%E5%BA%A6%E7%9A%84%E8%A1%A8%E7%A4%BA%E6%B3%95">变化程度的表示法</a></li>
</ul>
</li>
<li><a href="#%E6%A0%87%E7%82%B9%E7%AC%A6%E5%8F%B7">标点符号</a><ul>
<li><a href="#%E5%8E%9F%E5%88%99-2">原则</a></li>
<li><a href="#%E5%8F%A5%E5%8F%B7">句号</a></li>
<li><a href="#%E9%80%97%E5%8F%B7">逗号</a></li>
<li><a href="#%E9%A1%BF%E5%8F%B7">顿号</a></li>
<li><a href="#%E5%88%86%E5%8F%B7">分号</a></li>
<li><a href="#%E5%BC%95%E5%8F%B7">引号</a></li>
<li><a href="#%E5%9C%86%E6%8B%AC%E5%8F%B7">圆括号</a></li>
<li><a href="#%E5%86%92%E5%8F%B7">冒号</a></li>
<li><a href="#%E7%9C%81%E7%95%A5%E5%8F%B7">省略号</a></li>
<li><a href="#%E6%84%9F%E5%8F%B9%E5%8F%B7">感叹号</a></li>
<li><a href="#%E7%A0%B4%E6%8A%98%E5%8F%B7">破折号</a></li>
<li><a href="#%E8%BF%9E%E6%8E%A5%E5%8F%B7">连接号</a></li>
</ul>
</li>
<li><a href="#%E6%96%87%E6%A1%A3%E4%BD%93%E7%B3%BB">文档体系</a><ul>
<li><a href="#%E7%BB%93%E6%9E%84">结构</a></li>
<li><a href="#%E6%96%87%E4%BB%B6%E5%90%8D">文件名</a></li>
</ul>
</li>
<li><a href="#%E5%8F%82%E8%80%83%E9%93%BE%E6%8E%A5">参考链接</a></li>
</ul>
<!-- /MarkdownTOC -->
<h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><h2 id="层级"><a href="#层级" class="headerlink" title="层级"></a>层级</h2><p>标题分为四级。</p>
<ul>
<li>一级标题：文章的标题</li>
<li>二级标题：文章主要部分的大标题</li>
<li>三级标题：二级标题下面一级的小标题</li>
<li>四级标题：三级标题下面某一方面的小标题</li>
</ul>
<h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ul>
<li>一级标题下，不能直接出现三级标题。</li>
<li>标题要避免孤立编号（即同级标题只有一个）。</li>
<li>下级标题不重复上一级标题的内容。</li>
<li>谨慎使用四级标题，尽量避免出现，保持层级的简单和防止出现过于复杂的章节。如果三级标题下有并列性的内容，建议只使用项目列表（Item list）。</li>
</ul>
<h1 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h1><h2 id="字间距"><a href="#字间距" class="headerlink" title="字间距"></a>字间距</h2><p>全角中文字符与半角英文字符之间，应有一个半角空格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：本文介绍如何快速启动Windows系统。</div><div class="line"></div><div class="line">正确：本文介绍如何快速启动 Windows 系统。</div></pre></td></tr></table></figure>
<p>全角中文字符与半角阿拉伯数字之间，有没有半角空格都可，但必须保证风格统一，不能两种风格混杂。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">正确：2011年5月15日，我订购了5台笔记本电脑与10台平板电脑。</div><div class="line"></div><div class="line">正确：2011 年 5 月 15 日，我订购了 5 台笔记本电脑与 10 台平板电脑。</div></pre></td></tr></table></figure>
<p>半角的百分号，视同阿拉伯数字。</p>
<p>英文单位若不翻译，单位前的阿拉伯数字与单位间不留空格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：一部容量为 16 GB 的智能手机</div><div class="line"></div><div class="line">正确：一部容量为 16GB 的智能手机</div></pre></td></tr></table></figure>
<p>半角英文字符和半角阿拉伯数字，与全角标点符号之间不留空格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：他的电脑是 MacBook Air 。</div><div class="line"></div><div class="line">正确：他的电脑是 MacBook Air。</div></pre></td></tr></table></figure>
<h2 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h2><ul>
<li>避免使用长句。句子内部不使用逗号时，总长度不应该超过 40 个字；使用逗号时，总长度不应该超过 100 字或者正文的 3 行。</li>
<li>尽量使用简单句和并列句，避免使用复合句。</li>
</ul>
<h2 id="写作风格"><a href="#写作风格" class="headerlink" title="写作风格"></a>写作风格</h2><p>尽量不使用被动语态，改为使用主动语态。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：假如此软件尚未被安装，</div><div class="line"></div><div class="line">正确：假如尚未安装这个软件，</div></pre></td></tr></table></figure>
<p>不使用非正式的语言风格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：Lady Gaga 的演唱会真是酷毙了，从没看过这么给力的表演！！！</div><div class="line"></div><div class="line">正确：无法参加本次活动，我深感遗憾。</div></pre></td></tr></table></figure>
<p>用对“的”、“地”、“得”。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">她露出了开心的笑容。</div><div class="line">（形容词＋的＋名词）</div><div class="line"></div><div class="line">她开心地笑了。</div><div class="line">（副词＋地＋动词）</div><div class="line"></div><div class="line">她笑得很开心。</div><div class="line">（动词＋得＋副词）</div></pre></td></tr></table></figure>
<p>使用代词时（比如“其”、“该”、“此”、“这”等词），必须明确指代的内容，保证只有一个含义。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：从管理系统可以监视中继系统和受其直接控制的分配系统。</div><div class="line"></div><div class="line">正确：从管理系统可以监视两个系统：中继系统和受中继系统直接控制的分配系统。</div></pre></td></tr></table></figure>
<p>名词前不要使用过多的形容词。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：此设备的使用必须在接受过本公司举办的正式的设备培训的技师的指导下进行。</div><div class="line"></div><div class="line">正确：此设备必须在技师的指导下使用，且指导技师必须接受过由本公司举办的正式设备培训。</div></pre></td></tr></table></figure>
<p>不包含任何标点符号的单个句子，或者以逗号分隔的句子构件，长度尽量保持在 20 个字以内；20～29 个字的句子，可以接受；30～39 个字的句子，语义必须明确，才能接受；多于 40 个字的句子，在任何情况下都不能接受。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：本产品适用于从由一台服务器进行动作控制的单一节点结构到由多台服务器进行动作控制的并行处理程序结构等多种体系结构。</div><div class="line"></div><div class="line">正确：本产品适用于多种体系结构。无论是由一台服务器（单一节点结构），还是由多台服务器（并行处理结构）进行动作控制，均可以使用本产品。</div></pre></td></tr></table></figure>
<p>同样一个意思，尽量使用肯定句表达，不使用否定句表达。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：请确认没有接通装置的电源。</div><div class="line"></div><div class="line">正确：请确认装置的电源已关闭。</div></pre></td></tr></table></figure>
<p>避免使用双重否定句。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：没有删除权限的用户，不能删除此文件。</div><div class="line"></div><div class="line">正确：用户必须拥有删除权限，才能删除此文件。</div></pre></td></tr></table></figure>
<h2 id="英文处理"><a href="#英文处理" class="headerlink" title="英文处理"></a>英文处理</h2><p>英文原文如果使用了复数形式，翻译成中文时，应该将其还原为单数形式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">英文：⋯information stored in random access memory (RAMs)⋯</div><div class="line"></div><div class="line">中文：……存储在随机存取存储器（RAM）里的信息……</div></pre></td></tr></table></figure>
<p>外文缩写可以使用半角圆点(<code>.</code>)表示缩写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">U.S.A.</div><div class="line">Apple, Inc.</div></pre></td></tr></table></figure>
<p>表示中文时，英文省略号（<code>⋯</code>）应改为中文省略号（<code>……</code>）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">英文：5 minutes later⋯</div><div class="line"></div><div class="line">中文：5 分钟过去了⋯⋯</div></pre></td></tr></table></figure>
<p>英文书名或电影名改用中文表达时，双引号应改为书名号。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">英文：He published an article entitled &quot;The Future of the Aviation&quot;.</div><div class="line"></div><div class="line">中文：他发表了一篇名为《航空业的未来》的文章。</div></pre></td></tr></table></figure>
<p>第一次出现英文词汇时，在括号中给出中文标注。此后再次出现时，直接使用英文缩写即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">IOC（International Olympic Committee，国际奥林匹克委员会）。这样定义后，便可以直接使用“IOC”了。</div></pre></td></tr></table></figure>
<p>专有名词中每个词第一个字母均应大写，非专有名词则不需要大写。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">“American Association of Physicists in Medicine”（美国医学物理学家协会）是专有名词，需要大写。</div><div class="line"></div><div class="line">“online transaction processing”（在线事务处理）不是专有名词，不应大写。</div></pre></td></tr></table></figure>
<h1 id="段落"><a href="#段落" class="headerlink" title="段落"></a>段落</h1><h2 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h2><ul>
<li>一个段落只能有一个主题，或一个中心句子。</li>
<li>段落的中心句子放在段首，对全段内容进行概述。后面陈述的句子为核心句服务。</li>
<li>一个段落的长度不能超过七行，最佳段落长度小于等于四行。</li>
<li>段落的句子语气要使用陈述和肯定语气，避免使用感叹语气。</li>
<li>段落之间使用一个空行隔开。</li>
<li>段落开头不要留出空白字符。</li>
</ul>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用第三方内容时，应注明出处。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">One man’s constant is another man’s variable. — Alan Perlis</div></pre></td></tr></table></figure>
<p>如果是全篇转载，请在全文开头显著位置注明作者和出处，并链接至原文。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">本文转载自 WikiQuote</div></pre></td></tr></table></figure>
<p>使用外部图片时，必须在图片下方或文末标明来源。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">本文部分图片来自 Wikipedia</div></pre></td></tr></table></figure>
<h1 id="数值"><a href="#数值" class="headerlink" title="数值"></a>数值</h1><h2 id="半角数字"><a href="#半角数字" class="headerlink" title="半角数字"></a>半角数字</h2><p>数字一律使用半角形式，不得使用全角形式。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误： 这件商品的价格是１０００元。</div><div class="line"></div><div class="line">正确： 这件商品的价格是 1000 元。</div></pre></td></tr></table></figure>
<h2 id="千分号"><a href="#千分号" class="headerlink" title="千分号"></a>千分号</h2><p>数值为千位以上，应添加千分号（半角逗号）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">XXX 公司的实收资本为 RMB1,258,000。</div></pre></td></tr></table></figure>
<p>对于 4 ～ 6 位的数值，千分号是选用的，比如<code>1000</code>和<code>1,000</code>都可以接受。对于7位及以上的数值，千分号是必须的。</p>
<p>多位小数要从小数点后从左向右添加千分号，比如<code>4.234,345</code>。</p>
<h2 id="货币"><a href="#货币" class="headerlink" title="货币"></a>货币</h2><p>货币应为阿拉伯数字，并在数字前写出货币符号，或在数字后写出货币中文名称。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$1,000</div><div class="line">1,000 美元</div></pre></td></tr></table></figure>
<h2 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h2><p>表示数值范围时，用<code>～</code>连接。参见《标点符号》一节的“连接号”部分。</p>
<p>带有单位或百分号时，两个数字都要加上单位或百分号，不能只加后面一个。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">错误：132～234kg</div><div class="line">正确：132kg～234kg</div><div class="line"></div><div class="line">错误：67～89%</div><div class="line">正确：67%～89%</div></pre></td></tr></table></figure>
<h2 id="变化程度的表示法"><a href="#变化程度的表示法" class="headerlink" title="变化程度的表示法"></a>变化程度的表示法</h2><p>数字的增加要使用“增加了”、“增加到”。“了”表示增量，“到”表示定量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">增加到过去的两倍</div><div class="line">（过去为一，现在为二）</div><div class="line"></div><div class="line">增加了两倍</div><div class="line">（过去为一，现在为三）</div></pre></td></tr></table></figure>
<p>数字的减少要使用“降低了”、“降低到”。“了”表示增量，“到”表示定量。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">降低到百分之八十</div><div class="line">（定额是一百，现在是八十）</div><div class="line"></div><div class="line">降低了百分之八十</div><div class="line">（原来是一百，现在是二十）</div></pre></td></tr></table></figure>
<p>不能用“降低N倍”或“减少N倍”的表示法，要用“降低百分之几”或“减少百分之几”。因为减少（或降低）一倍表示数值原来为一百，现在等于零。</p>
<h1 id="标点符号"><a href="#标点符号" class="headerlink" title="标点符号"></a>标点符号</h1><h2 id="原则-2"><a href="#原则-2" class="headerlink" title="原则"></a>原则</h2><ul>
<li>中文语句的标点符号，均应该采取全角符号，这样可以保证视觉的一致。</li>
<li>如果整句为英文，则该句使用英文/半角标点。</li>
<li>句号、问号、叹号、逗号、顿号、分号和冒号不得出现在一行之首。</li>
</ul>
<h2 id="句号"><a href="#句号" class="headerlink" title="句号"></a>句号</h2><p>中文语句中的结尾处应该用全角句号（<code>。</code>）。</p>
<p>句子末尾用括号加注时，句号应在括号之外。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：关于文件的输出，请参照第 1.3 节（见第 26 页。）</div><div class="line"></div><div class="line">正确：关于文件的输出，请参照第 1.3 节（见第 26 页）。</div></pre></td></tr></table></figure>
<h2 id="逗号"><a href="#逗号" class="headerlink" title="逗号"></a>逗号</h2><p>逗号<code>，</code>表示句子内部的一般性停顿。</p>
<p>注意避免“一逗到底”，即整个段落除了结尾，全部停顿都使用逗号。</p>
<h2 id="顿号"><a href="#顿号" class="headerlink" title="顿号"></a>顿号</h2><p>句子内部的并列词，应该用全角顿号(<code>、</code>) 分隔，而不用逗号，即使并列词是英语也是如此。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：我最欣赏的科技公司有 Google, Facebook, 腾讯, 阿里和百度等。</div><div class="line"></div><div class="line">正确：我最欣赏的科技公司有 Google、Facebook、腾讯、阿里和百度等。</div></pre></td></tr></table></figure>
<p>英文句子中，并列词语之间使用半角逗号（<code>,</code>）分隔。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：Microsoft Office includes Word, Excel, PowerPoint, Outlook and other components.</div></pre></td></tr></table></figure>
<h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>分号<code>；</code>表示复句内部并列分句之间的停顿。</p>
<h2 id="引号"><a href="#引号" class="headerlink" title="引号"></a>引号</h2><p>引用时，应该使用全角双引号（<code>“ ”</code>），注意前后双引号不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：许多人都认为客户服务的核心是“友好”和“专业”。</div></pre></td></tr></table></figure>
<p>引号里面还要用引号时，外面一层用双引号，里面一层用单引号（<code>‘ ’</code>），注意前后单引号不同。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：鲍勃解释道：“我要放音乐，可萨利说，‘不行！’。”</div></pre></td></tr></table></figure>
<h2 id="圆括号"><a href="#圆括号" class="headerlink" title="圆括号"></a>圆括号</h2><p>补充说明时，使用全角圆括号<code>（）</code>，括号前后不加空格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：请确认所有的连接（电缆和接插件）均安装牢固。</div></pre></td></tr></table></figure>
<h2 id="冒号"><a href="#冒号" class="headerlink" title="冒号"></a>冒号</h2><p>全角冒号（<code>：</code>）常用在需要解释的词语后边，引出解释和说明。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：请确认以下几项内容：时间、地点、活动名称，以及来宾数量。</div></pre></td></tr></table></figure>
<p>表示时间时，应使用半角冒号（<code>:</code>）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：早上 8:00</div></pre></td></tr></table></figure>
<h2 id="省略号"><a href="#省略号" class="headerlink" title="省略号"></a>省略号</h2><p>省略号<code>……</code>表示语句未完、或者语气的不连续。它占两个汉字空间、包含六个省略点，不要使用<code>。。。</code>或<code>...</code>等非标准形式。</p>
<p>省略号不应与“等”这个词一起使用。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">错误：我们为会餐准备了香蕉、苹果、梨…等各色水果。</div><div class="line"></div><div class="line">正确：我们为会餐准备了各色水果，有香蕉、苹果、梨……</div><div class="line"></div><div class="line">正确：我们为会餐准备了香蕉、苹果、梨等各色水果。</div></pre></td></tr></table></figure>
<h2 id="感叹号"><a href="#感叹号" class="headerlink" title="感叹号"></a>感叹号</h2><p>应该使用平静的语气叙述，尽量避免使用感叹号<code>！</code>。</p>
<p>不得多个感叹号连用，比如<code>！！</code>和<code>!!!</code>。</p>
<h2 id="破折号"><a href="#破折号" class="headerlink" title="破折号"></a>破折号</h2><p>破折号<code>————</code>一般用于进一步解释。</p>
<p>破折号应占两个汉字的位置。如果破折号本身只占一个汉字的位置，那么前后应该留出一个半角空格。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">例句：直觉————尽管它并不总是可靠的————告诉我，这事可能出了些问题。</div><div class="line"></div><div class="line">例句：直觉 —— 尽管它并不总是可靠的 —— 告诉我，这事可能出了些问题。</div></pre></td></tr></table></figure>
<h2 id="连接号"><a href="#连接号" class="headerlink" title="连接号"></a>连接号</h2><p>连接号用于连接两个类似的词。</p>
<p>以下场合应该使用直线连接号（<code>-</code>），占一个半角字符的位置。</p>
<ul>
<li>两个名词的复合</li>
<li>图表编号</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">例句：氧化-还原反应</div><div class="line"></div><div class="line">例句：图 1-1</div></pre></td></tr></table></figure>
<p>以下场合应该使用波浪连接号（<code>～</code>），占一个全角字符的位置。</p>
<ul>
<li>数值范围（例如日期、时间或数字）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：2009 年～2011 年</div></pre></td></tr></table></figure>
<p>注意，波浪连接号前后两个值都应该加上单位。</p>
<p>波浪连接号也可以用汉字“至”代替。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">例句：周围温度：-20°C 至 -10°C</div></pre></td></tr></table></figure>
<h1 id="文档体系"><a href="#文档体系" class="headerlink" title="文档体系"></a>文档体系</h1><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>软件手册是一部完整的书，建议采用下面的结构。</p>
<ul>
<li><strong>简介</strong>（Introduction）： [必备] [文件] 提供对产品和文档本身的总体的、扼要的说明</li>
<li><strong>快速上手</strong>（Getting Started）：[可选] [文件] 如何最快速地使用产品</li>
<li><strong>入门篇</strong>（Basics）： [必备] [目录] 又称”使用篇“，提供初级的使用教程<ul>
<li><strong>环境准备</strong>（Prerequisite）：[必备] [文件] 软件使用需要满足的前置条件</li>
<li><strong>安装</strong>（Installation）：[可选] [文件] 软件的安装方法</li>
<li><strong>设置</strong>（Configuration）：[必备] [文件] 软件的设置</li>
</ul>
</li>
<li><strong>进阶篇</strong>（Advanced)：[可选] [目录] 又称”开发篇“，提供中高级的开发教程</li>
<li><strong>API</strong>（Reference）：[可选] [目录|文件] 软件 API 的逐一介绍</li>
<li><strong>FAQ</strong>：[可选] [文件] 常见问题解答</li>
<li><strong>附录</strong>（Appendix）：[可选] [目录] 不属于教程本身、但对阅读教程有帮助的内容<ul>
<li><strong>Glossary</strong>：[可选] [文件] 名词解释</li>
<li><strong>Recipes</strong>：[可选] [文件] 最佳实践</li>
<li><strong>Troubleshooting</strong>：[可选] [文件] 故障处理</li>
<li><strong>ChangeLog</strong>：[可选] [文件] 版本说明</li>
<li><strong>Feedback</strong>：[可选] [文件] 反馈方式</li>
</ul>
</li>
</ul>
<p>下面是两个真实范例，可参考。</p>
<ul>
<li><a href="http://redux.js.org/index.html" target="_blank" rel="external">Redux 手册</a></li>
<li><a href="http://flight-manual.atom.io/" target="_blank" rel="external">Atom 手册</a></li>
</ul>
<h2 id="文件名"><a href="#文件名" class="headerlink" title="文件名"></a>文件名</h2><p>文档的文件名不得含有空格。</p>
<p>文件名必须使用半角字符，不得使用全角字符。这也意味着，中文不能用于文件名。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误： 名词解释.md</div><div class="line"></div><div class="line">正确： glossary.md</div></pre></td></tr></table></figure>
<p>文件名建议只使用小写字母，不使用大写字母。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">错误：TroubleShooting.md</div><div class="line"></div><div class="line">正确：troubleshooting.md</div></pre></td></tr></table></figure>
<p>为了醒目，某些说明文件的文件名，可以使用大写字母，比如<code>README</code>、<code>LICENSE</code>。</p>
<p>文件名包含多个单词时，单词之间建议使用半角的连词线（<code>-</code>）分隔。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">不佳：advanced_usage.md</div><div class="line"></div><div class="line">正确：advanced-usage.md</div></pre></td></tr></table></figure>
<h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><ul>
<li><a href="http://wenku.baidu.com/view/23cc1a6527d3240c8447efbf.html" target="_blank" rel="external">产品手册中文写作规范</a>, by 华为</li>
<li><a href="http://docs.daocloud.io/write-docs/format" target="_blank" rel="external">写作规范和格式规范</a>, by DaoCloud</li>
<li><a href="http://www.hitachi-tc.co.jp/company/thesis/thesis.pdf" target="_blank" rel="external">技术写作技巧在日汉翻译中的应用</a>, by 刘方</li>
<li><a href="https://www.lengoo.de/documents/styleguides/lengoo_styleguide_ZH.pdf" target="_blank" rel="external">简体中文规范指南</a>, by lengoo</li>
<li><a href="https://open.leancloud.cn/copywriting-style-guide.html" target="_blank" rel="external">文档风格指南</a>, by LeanCloud</li>
<li><a href="https://docs.google.com/document/d/1R8lMCPf6zCD5KEA8ekZ5knK77iw9J-vJ6vEopPemqZM/edit" target="_blank" rel="external">豌豆荚文案风格指南</a>, by 豌豆荚</li>
<li><a href="https://github.com/sparanoid/chinese-copywriting-guidelines" target="_blank" rel="external">中文文案排版指北</a>, by sparanoid</li>
<li><a href="http://w3c.github.io/clreq/" target="_blank" rel="external">中文排版需求</a>, by W3C</li>
<li><a href="http://www.ruanyifeng.com/blog/2017/02/filename-should-be-lowercase.html" target="_blank" rel="external">为什么文件名要小写？</a>, by 阮一峰</li>
<li><a href="https://developers.google.com/style/" target="_blank" rel="external">Google Developer Documentation Style Guide</a>, by Google</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React填坑笔记]]></title>
      <url>https://chyrain.github.io/2017/09/03/React%E5%A1%AB%E5%9D%91%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h2 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h2><p>图例</p>
<p><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/react_lifecircle.png" alt="res/react_lifecircle.png"><br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/ajs-life.png" alt="res/ajs-life.png"></p>
<p>实例</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">import React from 'react';</div><div class="line"></div><div class="line">class Card extends React.Component &#123;</div><div class="line">    /*</div><div class="line">     - 组件的生命周期</div><div class="line">     */</div><div class="line"></div><div class="line">    constructor (props, context) &#123;</div><div class="line">        super(props, context);</div><div class="line">        this.state = &#123;text: 'Hello world'&#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillMount() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // render</div><div class="line">    componentDidMount() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillReceiveProps(nextProps) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    shouldComponentUpdate(nextProps, nextState) &#123;</div><div class="line">        return nextState.text != this.state.text;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUpdate (nextProps, nextState) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // render</div><div class="line">    componentDidUpdate() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">        return (</div><div class="line">            &lt;div&gt;</div><div class="line">                &#123;this.state.text&#125;</div><div class="line">            &lt;/div&gt;</div><div class="line">        );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">export default Card</div></pre></td></tr></table></figure>
<h3 id="mounting"><a href="#mounting" class="headerlink" title="mounting"></a>mounting</h3><ul>
<li>constructor()</li>
<li>componentWillMount()</li>
<li>render()</li>
<li>componentDidMount()</li>
</ul>
<h3 id="Updating"><a href="#Updating" class="headerlink" title="Updating"></a>Updating</h3><ul>
<li>componentWillReceiveProps()</li>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>componentDidUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ul>
<h3 id="Unmounting"><a href="#Unmounting" class="headerlink" title="Unmounting"></a>Unmounting</h3><ul>
<li>componentWillUnmount()</li>
</ul>
<h3 id="调用forceUpdate时"><a href="#调用forceUpdate时" class="headerlink" title="调用forceUpdate时"></a>调用forceUpdate时</h3><ul>
<li>componentWillUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ul>
<h3 id="接收到新参数时props"><a href="#接收到新参数时props" class="headerlink" title="接收到新参数时props"></a>接收到新参数时props</h3><ul>
<li>同Updating</li>
</ul>
<h3 id="setState时"><a href="#setState时" class="headerlink" title="setState时"></a>setState时</h3><ul>
<li>shouldComponentUpdate()</li>
<li>componentWillUpdate()</li>
<li>componentDidUpdate()</li>
<li>render()</li>
<li>componentDidUpdate()</li>
</ul>
<h2 id="React的-props-amp-state"><a href="#React的-props-amp-state" class="headerlink" title="React的 props &amp; state"></a>React的 <code>props</code> &amp; <code>state</code></h2><ul>
<li><p><em><code>props</code></em></p>
<blockquote>
<p><code>props</code> (properties的简称) 是一个组件的 配置选项 。<code>props</code>是由上到下指定且不可改变的。一个组件不能改变自身的<code>props</code>, 但要负责设置子组件的<code>props</code>。</p>
</blockquote>
</li>
<li><p><em><code>state</code></em></p>
<blockquote>
<p>当组件加载时，<code>state</code>有一个默认值，后来<code>state</code>会不定期地改变（主要是用户行为触发的）。<code>state</code>是每一时间点组件状态的代表-快照。<br>一个组件在内部管理自己的<code>state</code>，除了设置子组件的<code>state</code>之外，该组件与其子组件的<code>state</code>没有任何联系。你可以认为<code>state</code>是私有的。</p>
</blockquote>
</li>
<li><p>改变 <code>props</code> &amp; <code>state</code></p>
<p>  | -    | <code>props</code> | <code>state</code> |<br>  |: — |: — :|: — :|<br>  | 能否从父组件获取初始值？ | <code>Yes</code> | <code>Yes</code> |<br>  | 能否被父组件改变？ | <code>Yes</code> | <code>No</code> |<br>  | 能否在组件内设置默认值?* | <code>Yes</code> | <code>Yes</code> |<br>  | 能否在组件内改变? | <code>No</code> | <code>Yes</code> |<br>  | 能否设置子组件的初始值? | <code>Yes</code> | <code>Yes</code> |<br>  | 能否在子组件中改变? | <code>Yes</code> | <code>No</code> |</p>
</li>
<li><p>组件的类型与 <code>props</code> &amp; <code>state</code> 关系</p>
<ul>
<li><p>组件是否应该有<code>state</code>?</p>
<blockquote>
<p><code>state</code>是可选项，不是React强制实现的。因为state增加了组件的复杂度同时降低了组件的可预见性，所以没有<code>state</code>的组件 要略胜一筹。即便在一个交互式应用中，你显然离不开<code>state</code>，你也要避免有太多的有状态化组件（含有<code>state</code>的组件）。</p>
</blockquote>
</li>
<li><p>组件类型:</p>
<ul>
<li><em>无状态组件</em><blockquote>
<p>— 只有<code>props</code>, 没有<code>state</code>。 除去render() 函数和所有围绕props的逻辑之外，没有什么要关心的地方。这使他们易于理解且易于测试</p>
</blockquote>
</li>
<li><em>有状态组件</em><blockquote>
<p>既有<code>props</code>又有<code>state</code>。也被称作状态管理者 。他们负责客户端-服务器通信(通过XHR, web sockets, 等)，数据处理和给用户行为反馈。 </p>
</blockquote>
</li>
</ul>
</li>
<li><p>哪些组件应该有 State？</p>
<blockquote>
<p>大部分组件的工作应该是从 <code>props</code> 里取数据并渲染出来。但是，有时需要对用户输入、服务器请求或者时间变化等作出响应，这时才需要使用 <code>state</code>。</p>
<p><strong><em>尝试把尽可能多的组件无状态化</em></strong>。 这样做能隔离state，把它放到最合理的地方，也能减少冗余，同时易于解释程序运作过程。</p>
<p>常用的模式是创建多个只负责渲染数据的无状态<em>（stateless）</em>组件，在它们的上层创建一个有状态<em>（stateful）</em>组件并把它的状态通过<code>props</code>传给子级。这个有状态的组件封装了所有用户的交互逻辑，而这些无状态组件则负责声明式地渲染数据。</p>
</blockquote>
</li>
<li><p>哪些应该作为<code>State</code>？</p>
<blockquote>
<p><code>State</code>应该包括那些可能被组件的事件处理器改变并触发用户界面更新的数据。真实的应用中这种数据一般都很小且能被 <em>JSON</em> 序列化。当创建一个状态化的组件时，想象一下表示它的状态最少需要哪些数据，并只把这些数据存入<code>this.state</code>。在<code>render()</code>里再根据<code>state</code>来计算你需要的其它数据。你会发现以这种方式思考和开发程序最终往往是正确的，因为如果在<code>state</code>里添加冗余数据或计算所得数据，需要你经常手动保持数据同步，不能让 <em>React</em> 来帮你处理。</p>
</blockquote>
</li>
<li><p>哪些不应该作为 State？</p>
<p>  <code>this.state</code> 应该仅包括能表示用户界面状态所需的最少数据。因此，它不应该包括：</p>
<ul>
<li><blockquote>
<p>计算所得数据： 不要担心根据 state 来预先计算数据 —— 把所有的计算都放到 <code>render()</code> 里更容易保证用户界面和数据的一致性。例如，在 <code>state</code> 里有一个数组<em>（listItems）</em>，我们要把数组长度渲染成字符串， 直接在 <code>render()</code> 里使用 <code>this.state.listItems.length + ’ list items’</code> 比把它放到 <code>state</code> 里好的多。</p>
</blockquote>
</li>
<li><blockquote>
<p><em>React</em> 组件： 在 <code>render()</code> 里使用当前 <code>props</code> 和 <code>state</code> 来创建它。</p>
</blockquote>
</li>
<li><blockquote>
<p>基于 <code>props</code> 的重复数据： 尽可能使用 <code>props</code> 来作为惟一数据来源。把 <code>props</code> 保存到 <code>state</code> 的一个有效的场景是需要知道它以前值的时候，因为未来的 <code>props</code> 可能会变化。</p>
</blockquote>
</li>
</ul>
</li>
<li><p>判断数据是否可以作为 <code>state</code> ，简单地对每一项数据提出三个问题：</p>
<ul>
<li><blockquote>
<p>是否是从父级通过 <code>props</code> 传入的？如果是，可能不是 <code>state</code> 。</p>
</blockquote>
</li>
<li><blockquote>
<p>是否会随着时间改变？如果不是，可能不是 <code>state</code> 。</p>
</blockquote>
</li>
<li><blockquote>
<p>能根据组件中其它 <code>state</code> 数据或者 <code>props</code> 计算出来吗？如果是，就不是 <code>state</code> 。</p>
</blockquote>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="React最佳实践"><a href="#React最佳实践" class="headerlink" title="React最佳实践"></a>React最佳实践</h2><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><ul>
<li>组件绑定 this</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//Constructor 内绑定</span></div><div class="line"><span class="keyword">constructor</span>(props) &#123;</div><div class="line">  <span class="keyword">super</span>(props);</div><div class="line">  <span class="keyword">this</span>.handleChange = <span class="keyword">this</span>.handleChange.bind(<span class="keyword">this</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Class 属性中使用 = 和箭头函数</span></div><div class="line">handleChange = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">  <span class="comment">// call this function from render </span></div><div class="line">  <span class="comment">// and this.whatever in here works fine.</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<ul>
<li>setState 接受一个函数作为参数(setState的异步性)</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.setState(<span class="function"><span class="params">prevState</span> =&gt;</span> (&#123; <span class="attr">expanded</span>: !prevState.expanded &#125;))</div></pre></td></tr></table></figure>
<ul>
<li>避免以下情况</li>
</ul>
<blockquote>
<p>因为每次父组件 render 的时候，都会新建一个新的函数并传递给 input，如果 input 是一个 React 组件，这会粗暴地直接导致这个组件的 re-render（props参数改变）</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//不要：</span></div><div class="line">onChange = &#123;(e) =&gt; &#123; model.name = e.target.value &#125;&#125;</div><div class="line"></div><div class="line"><span class="comment">//而是：</span></div><div class="line">onChange = &#123;<span class="keyword">this</span>.handleChange&#125;</div><div class="line"></div><div class="line">handleChange = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">this</span>.props.model.name = e.target.value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="React-组件设计"><a href="#React-组件设计" class="headerlink" title="React 组件设计"></a>React 组件设计</h3><ol>
<li><p>分解组件，切割子组件</p>
</li>
<li><p>模板化组件，利用React 可以传递 React element 的特性，我们将 React element 进行组件间传递</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Comment</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> metadata = <span class="keyword">this</span>.props.publishTime ?</div><div class="line">      &lt;PublishTime time=&#123;this.props.publishTime&#125; /&gt; :</div><div class="line">      &lt;span&gt;Saving...&lt;/span&gt;;</div><div class="line"></div><div class="line">    const actions = [];</div><div class="line">    if (this.props.isSignedIn) &#123;</div><div class="line">      actions.push(&lt;LikeAction /&gt;);</div><div class="line">      actions.push(&lt;ReplyAction /&gt;);</div><div class="line">    &#125;</div><div class="line">    if (this.props.isAuthor) &#123;</div><div class="line">      actions.push(&lt;DeleteAction /&gt;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return &lt;CommentTemplate metadata=&#123;metadata&#125; actions=&#123;actions&#125; /&gt;;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<ol>
<li>高阶组件</li>
</ol>
<p>withLinkAnalytics 函数并不会去改变 WrappedComponent 组件本身，更不会去改变 WrappedComponent 组件的行为。而是返回了一个被包裹的新组件:</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//场景：我们想统计页面中所有链接的点击信息。在链接点击时，发送统计请求，同时这条请求需要包含此页面 document 的 id 值</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">withLinkAnalytics</span>(<span class="params">mapPropsToData, WrappedComponent</span>) </span>&#123;</div><div class="line">  <span class="class"><span class="keyword">class</span> <span class="title">LinkAnalyticsWrapper</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">    componentDidMount() &#123;</div><div class="line">      ReactDOM.findDOMNode(<span class="keyword">this</span>).addEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.onClick);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    componentWillUnmount() &#123;</div><div class="line">      ReactDOM.findDOMNode(<span class="keyword">this</span>).removeEventListener(<span class="string">'click'</span>, <span class="keyword">this</span>.onClick);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    onClick = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</div><div class="line">      <span class="keyword">if</span> (e.target.tagName === <span class="string">'A'</span>) &#123; <span class="comment">// Naive check for &lt;a&gt; elements</span></div><div class="line">        <span class="keyword">const</span> data = mapPropsToData ? mapPropsToData(<span class="keyword">this</span>.props) : &#123;&#125;;</div><div class="line">        sendAnalytics(<span class="string">'link clicked'</span>, data);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    render() &#123;</div><div class="line">      <span class="comment">// Simply render the WrappedComponent with all props</span></div><div class="line">      <span class="keyword">return</span> &lt;WrappedComponent &#123;...this.props&#125; /&gt;;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line"></div><div class="line">class Document extends React.Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    // ...</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default withLinkAnalytics((props) =&gt; (&#123;</div><div class="line">  documentId: props.documentId</div><div class="line">&#125;), Document);</div></pre></td></tr></table></figure>]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[一道神奇的前端面试题]]></title>
      <url>https://chyrain.github.io/2017/08/14/%E4%B8%80%E9%81%93%E7%A5%9E%E5%A5%87%E7%9A%84%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      <content type="html"><![CDATA[<p>前端面试中警察会碰到下面这样类型的题，很多前端工程师并不能完全回答正确，这是一道怎样的一道神奇的面试题呢？<br>题目如下：下面这段代码的输出实际运行效果如何，new Date输出时间差是多少？</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div></pre></td></tr></table></figure>
<p>正确结果是：立即输出5，然后大概1秒后，连续输出四个5。<br>如果我们约定，用箭头表示其前后的两次输出之间有 1 秒的时间间隔，而逗号表示其前后的两次输出之间的时间间隔可以忽略<br>运行结果可以描述为：5 -&gt; 5,5,5,5,5</p>
<p>这里的问题主要出现在，js中 var 定义的 i 是函数级作用域，函数块循环中并不会保留每次i的值的复制，而是共享一个i，等到setTimeout中的回调函数执行时i已经加到5了。<br>并且还考察了JS 中的定时器工作机制，setTimeout中回调事件的处理是提交到事件队列中，等到延时时间到就都依次执行了，这5个回调都等待了1s，故1s后相继输出而几乎没有时间间隔。</p>
<p>那么如何实现：0 -&gt; 1 -&gt; 2 -&gt; 3 -&gt; 4 -&gt; 5 的输出呢？<br>下面总结出了一些实践方案。</p>
<ol>
<li>利用闭包<br>熟悉闭包思想的话，传递i的值作为函数参数，并立即执行，则会复制i的值进入函数参数，从而到达保留i的每次循环值的效果。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> output = <span class="function"><span class="keyword">function</span> (<span class="params">i</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">    &#125;, <span class="number">1000</span> * i);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    output(i);</div><div class="line">&#125;</div><div class="line"></div><div class="line">output(i);</div></pre></td></tr></table></figure>
<ol>
<li>利用bind<br>上面利用闭包就是利用了私有作用域不能立即被销毁，导致了 i 的保留，没有共享一个 i，同理，用 bind 方法也会保留 i 的引用，不会共享一个 i。</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">      <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, j);</div><div class="line">    &#125;.bind(<span class="keyword">this</span>, i), <span class="number">1000</span> * i);</div><div class="line">&#125;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">&#125;, i * <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="built_in">console</span>.log.bind(<span class="built_in">console</span>, <span class="keyword">new</span> <span class="built_in">Date</span>, i), <span class="number">1000</span> * i);</div><div class="line">&#125;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">&#125;, i * <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<p>但是这里的上一个 new Date 是固定值，不符合预期要求，只是提供下简洁代码的思路。</p>
<ol>
<li>利用setTimeout第三个参数<br>很多人容易忽略定时器可以传递三个及以上的参数 (从第三个参数开始是传入函数里面的参数)，这个参数传递恰好可以解决i的作用域问题</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, j);</div><div class="line">    &#125;, <span class="number">1000</span> * i, i);</div><div class="line">&#125;</div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">&#125;, i * <span class="number">1000</span>);</div></pre></td></tr></table></figure>
<ol>
<li>利用ES6的<code>let</code></li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">    &#125;, <span class="number">1000</span> * i);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// let是块级作用域，这里会报错</span></div><div class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">&#125;, <span class="number">1000</span> * i);</div></pre></td></tr></table></figure>
<ol>
<li>利用ES6的Promise</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> tasks = []; <span class="comment">// 这里存放异步操作的 Promise</span></div><div class="line"><span class="keyword">const</span> output = <span class="function">(<span class="params">i</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">        resolve();</div><div class="line">    &#125;, <span class="number">1000</span> * i);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">// 生成全部的异步操作</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    tasks.push(output(i));</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 异步操作完成之后，输出最后的 i</span></div><div class="line"><span class="built_in">Promise</span>.all(tasks).then(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">    &#125;, <span class="number">1000</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<ol>
<li>利用ES7的async, await</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 模拟其他语言中的 sleep，实际上可以是任何异步操作</span></div><div class="line"><span class="keyword">const</span> sleep = <span class="function">(<span class="params">timeountMS</span>) =&gt;</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</div><div class="line">    setTimeout(resolve, timeountMS);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function">(<span class="params"><span class="keyword">async</span> (</span>) =&gt;</span> &#123;  <span class="comment">// 声明即执行的 async 函数表达式</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">        <span class="keyword">await</span> sleep(<span class="number">1000</span>);</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">await</span> sleep(<span class="number">1000</span>);</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">new</span> <span class="built_in">Date</span>, i);</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>改善版：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">timeout</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> setTimeout(resolve, n))</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">output</span> (<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> i</div><div class="line">  <span class="keyword">for</span>(i = <span class="number">0</span>; i &lt; n; i++) &#123;</div><div class="line">    <span class="built_in">console</span>.log(i)</div><div class="line">    <span class="keyword">await</span> timeout(<span class="number">1000</span>)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> i</div><div class="line">&#125;</div><div class="line"></div><div class="line">output(<span class="number">5</span>).then(<span class="built_in">console</span>.log)</div></pre></td></tr></table></figure>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS继承的几种方式]]></title>
      <url>https://chyrain.github.io/2017/07/28/JS%E7%BB%A7%E6%89%BF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      <content type="html"><![CDATA[<p>定义一个父类：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="comment">// 实例属性</span></div><div class="line">    <span class="keyword">this</span>.name = name || <span class="string">'人类'</span>;</div><div class="line">    <span class="comment">// 实例方法</span></div><div class="line">    <span class="keyword">this</span>.walk = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在行走'</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 父类实例引用属性</span></div><div class="line">    <span class="keyword">this</span>.likes = [];</div><div class="line">&#125;</div><div class="line"><span class="comment">// 原型属性</span></div><div class="line">People.prototype.age = <span class="number">30</span>;</div><div class="line">People.prototype.hates = [];</div><div class="line"><span class="comment">// 原型方法</span></div><div class="line">People.prototype.speak = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'说：“'</span> + text + <span class="string">'“'</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子类定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.grade = <span class="string">'六年级'</span>;</div><div class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在学习：'</span> + type);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Student.prototype = <span class="keyword">new</span> People(<span class="string">'学生'</span>); <span class="comment">// 关键点</span></div><div class="line">Student.prototype.school = <span class="string">'实验小学'</span>;</div><div class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在睡觉'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类新增原型方法和属性</span></div><div class="line">People.prototype.gender = <span class="string">'male'</span>;</div><div class="line">People.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在跑步'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 测试代码</span></div><div class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'Jack'</span>);</div><div class="line"><span class="built_in">console</span>.log(student.grade); <span class="comment">// 六年级</span></div><div class="line"><span class="built_in">console</span>.log(student.study(<span class="string">'英语'</span>)); <span class="comment">// 学生在学习：英语</span></div><div class="line"><span class="built_in">console</span>.log(student.school); <span class="comment">// 实验小学</span></div><div class="line"><span class="built_in">console</span>.log(student.sleep()); <span class="comment">// 学生在睡觉</span></div><div class="line"><span class="built_in">console</span>.log(student.name); <span class="comment">// 学生</span></div><div class="line"><span class="built_in">console</span>.log(student.walk()); <span class="comment">// 学生在行走</span></div><div class="line"><span class="built_in">console</span>.log(student.age); <span class="comment">// 30</span></div><div class="line"><span class="built_in">console</span>.log(student.speak(<span class="string">'你好'</span>)); <span class="comment">// 学生说：“你好“</span></div><div class="line"><span class="built_in">console</span>.log(student.gender); <span class="comment">// male</span></div><div class="line"><span class="built_in">console</span>.log(student.run()); <span class="comment">// 学生在跑步</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> People); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></div><div class="line"><span class="comment">// another student</span></div><div class="line"><span class="keyword">var</span> another = <span class="keyword">new</span> Student(<span class="string">'Tomas'</span>);</div><div class="line">another.likes.push(<span class="string">'football'</span>);</div><div class="line"><span class="comment">// student</span></div><div class="line">student.likes.push(<span class="string">'Basketball'</span>);</div><div class="line">student.hates.push(<span class="string">'Apple'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(another.name); <span class="comment">// 学生</span></div><div class="line"><span class="built_in">console</span>.log(another.age); <span class="comment">// 30</span></div><div class="line"><span class="built_in">console</span>.log(another.walk()); <span class="comment">// 学生在行走</span></div><div class="line"><span class="comment">// 父类实例属性likes</span></div><div class="line"><span class="built_in">console</span>.log(student.likes); <span class="comment">// ["football", "Basketball"]</span></div><div class="line"><span class="built_in">console</span>.log(another.likes); <span class="comment">// ["football", "Basketball"]</span></div><div class="line"><span class="comment">// 父类原型属性hates</span></div><div class="line"><span class="built_in">console</span>.log(student.hates); <span class="comment">// ["Apple"]</span></div><div class="line"><span class="built_in">console</span>.log(another.hates); <span class="comment">// ["Apple"]</span></div></pre></td></tr></table></figure>
<p>特点：</p>
<ul>
<li>子类将父类的实例作为原型，实例是子类的实例，也是父类的实例</li>
<li>父类的原型方法、原型属性、实例方法和实例属性都能访问到</li>
<li>父类新增的原型方法、原型属性，子类都能访问到</li>
<li>创建子类实例时，无法向父类构造函数传参，仅在父类实例化时(<code>new People(&#39;学生&#39;)</code>)可传参</li>
<li>父类的引用属性是所有子类实例共享的</li>
</ul>
<blockquote>
<p>注意：要为子类新增原型属性和方法，则必须放在 <code>new People(&#39;学生&#39;)</code> 这样的语句之后执行。</p>
</blockquote>
<h2 id="构造函数继承"><a href="#构造函数继承" class="headerlink" title="构造函数继承"></a>构造函数继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子类定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    People.call(<span class="keyword">this</span>, name); <span class="comment">// 关键点</span></div><div class="line">    <span class="keyword">this</span>.grade = <span class="string">'六年级'</span>;</div><div class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在学习：'</span> + type);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Student.prototype.school = <span class="string">'实验小学'</span>;</div><div class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在睡觉'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类新增原型方法和属性</span></div><div class="line">People.prototype.gender = <span class="string">'male'</span>;</div><div class="line">People.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在跑步'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 测试代码</span></div><div class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'Jack'</span>);</div><div class="line"><span class="built_in">console</span>.log(student.grade); <span class="comment">// 六年级</span></div><div class="line"><span class="built_in">console</span>.log(student.study(<span class="string">'英语'</span>)); <span class="comment">// Jack在学习：英语</span></div><div class="line"><span class="built_in">console</span>.log(student.school); <span class="comment">// 实验小学</span></div><div class="line"><span class="built_in">console</span>.log(student.sleep()); <span class="comment">// Jack在睡觉</span></div><div class="line"><span class="built_in">console</span>.log(student.name); <span class="comment">// Jack</span></div><div class="line"><span class="built_in">console</span>.log(student.walk()); <span class="comment">// Jack在行走</span></div><div class="line"><span class="built_in">console</span>.log(student.age); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(student.speak(<span class="string">'你好'</span>)); <span class="comment">// Uncaught TypeError: student.speak is not a function</span></div><div class="line"><span class="built_in">console</span>.log(student.gender); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(student.run()); <span class="comment">// Uncaught TypeError: student.speak is not a function</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> People); <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></div><div class="line"><span class="comment">// another student</span></div><div class="line"><span class="keyword">var</span> another = <span class="keyword">new</span> Student(<span class="string">'Tomas'</span>);</div><div class="line"><span class="built_in">console</span>.log(another.name); <span class="comment">// Tomas</span></div><div class="line"><span class="built_in">console</span>.log(another.age); <span class="comment">// undefined</span></div><div class="line"></div><div class="line">another.likes.push(<span class="string">'football'</span>); <span class="comment">// 1</span></div><div class="line">student.likes.push(<span class="string">'Basketball'</span>); <span class="comment">// 1</span></div><div class="line">student.hates.push(<span class="string">'Apple'</span>); <span class="comment">// Uncaught TypeError: Cannot read property 'push' of undefined</span></div><div class="line"><span class="comment">// 父类实例属性likes</span></div><div class="line"><span class="built_in">console</span>.log(student.likes); <span class="comment">// ["Basketball"]</span></div><div class="line"><span class="built_in">console</span>.log(another.likes); <span class="comment">// ["football"]</span></div><div class="line"><span class="comment">// 父类原型属性hates</span></div><div class="line"><span class="built_in">console</span>.log(student.hates); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(another.hates); <span class="comment">// undefined</span></div></pre></td></tr></table></figure>
<p>特点：</p>
<ul>
<li>创建子类实例时，可以向父类构造函数传参</li>
<li>解决了子类实例共享父类实例属性问题，但同时每个实例都有父类实例函数的副本，影响性能</li>
<li>子类使用父类构造函数增强子类实例，等于是复制父类实例属性给子类</li>
<li>父类的原型方法、原型属性，子类都无法访问</li>
<li>实例仅是子类的示例，不是父类的实例</li>
</ul>
<h2 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h2><p>通过调用父类构造函数，继承父类的属性，然后通过将父类实例作为子类原型，实现函数复用</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子类定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    People.call(<span class="keyword">this</span>, name); <span class="comment">// 关键点</span></div><div class="line">    <span class="keyword">this</span>.grade = <span class="string">'六年级'</span>;</div><div class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在学习：'</span> + type);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">Student.prototype = <span class="keyword">new</span> People(); <span class="comment">// 关键点</span></div><div class="line">Student.prototype.constructor = Student;</div><div class="line">Student.prototype.school = <span class="string">'实验小学'</span>;</div><div class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在睡觉'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类新增原型方法和属性</span></div><div class="line">People.prototype.gender = <span class="string">'male'</span>;</div><div class="line">People.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在跑步'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 测试代码</span></div><div class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'Jack'</span>);</div><div class="line"><span class="built_in">console</span>.log(student.grade); <span class="comment">// 六年级</span></div><div class="line"><span class="built_in">console</span>.log(student.study(<span class="string">'英语'</span>)); <span class="comment">// Jack在学习：英语</span></div><div class="line"><span class="built_in">console</span>.log(student.school); <span class="comment">// 实验小学</span></div><div class="line"><span class="built_in">console</span>.log(student.sleep()); <span class="comment">// Jack在睡觉</span></div><div class="line"><span class="built_in">console</span>.log(student.name); <span class="comment">// Jack</span></div><div class="line"><span class="built_in">console</span>.log(student.walk()); <span class="comment">// Jack在行走</span></div><div class="line"><span class="built_in">console</span>.log(student.age); <span class="comment">// 30</span></div><div class="line"><span class="built_in">console</span>.log(student.speak(<span class="string">'你好'</span>)); <span class="comment">// Jack说：“你好“</span></div><div class="line"><span class="built_in">console</span>.log(student.gender); <span class="comment">// male</span></div><div class="line"><span class="built_in">console</span>.log(student.run()); <span class="comment">// Jack在跑步</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> People); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></div><div class="line"><span class="comment">// another student</span></div><div class="line"><span class="keyword">var</span> another = <span class="keyword">new</span> Student(<span class="string">'Tomas'</span>);</div><div class="line">another.likes.push(<span class="string">'football'</span>);</div><div class="line"><span class="comment">// student</span></div><div class="line">student.likes.push(<span class="string">'Basketball'</span>);</div><div class="line">student.hates.push(<span class="string">'Apple'</span>);</div><div class="line"><span class="built_in">console</span>.log(another.name); <span class="comment">// Tomas</span></div><div class="line"><span class="built_in">console</span>.log(another.walk()); <span class="comment">// Tomas在行走</span></div><div class="line"><span class="comment">// 父类实例属性likes</span></div><div class="line"><span class="built_in">console</span>.log(student.likes); <span class="comment">// ["Basketball"]</span></div><div class="line"><span class="built_in">console</span>.log(another.likes); <span class="comment">// ["football"]</span></div><div class="line"><span class="comment">// 父类原型属性hates</span></div><div class="line"><span class="built_in">console</span>.log(student.hates); <span class="comment">// ["Apple"]</span></div><div class="line"><span class="built_in">console</span>.log(another.hates); <span class="comment">// ["Apple"]</span></div></pre></td></tr></table></figure>
<p>特点：</p>
<ul>
<li>实例是子类的实例，也是父类的实例</li>
<li>父类的原型方法、原型属性、实例方法和实例属性都能访问到</li>
<li>父类新增的原型方法、原型属性，子类都能访问到</li>
<li>创建子类实例时，可以向父类构造函数传参</li>
<li>子类共享父类的原型属性，不共享父类实例属性</li>
<li>调用了两次父类构造函数，生成了两份实例（子类实例将子类原型上的那份屏蔽了）</li>
</ul>
<blockquote>
<p>唯一缺点是多消耗了一点内存</p>
</blockquote>
<h2 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 子类定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    People.call(<span class="keyword">this</span>, name); <span class="comment">// 关键点</span></div><div class="line">    <span class="keyword">this</span>.grade = <span class="string">'六年级'</span>;</div><div class="line">    <span class="keyword">this</span>.study = <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在学习：'</span> + type);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// 关键点</span></div><div class="line">    <span class="comment">// 创建一个没有实例方法的类,砍掉父类的实例属性</span></div><div class="line">    <span class="keyword">var</span> Super = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</div><div class="line">    Super.prototype = People.prototype;</div><div class="line">    <span class="comment">// 将实例作为子类的原型</span></div><div class="line">    Student.prototype = <span class="keyword">new</span> Super();</div><div class="line">&#125;)();</div><div class="line">Student.prototype.constructor = Student;</div><div class="line">Student.prototype.school = <span class="string">'实验小学'</span>;</div><div class="line">Student.prototype.sleep = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在睡觉'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 父类新增原型方法和属性</span></div><div class="line">People.prototype.gender = <span class="string">'male'</span>;</div><div class="line">People.prototype.run = <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">'在跑步'</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 测试代码</span></div><div class="line"><span class="keyword">var</span> student = <span class="keyword">new</span> Student(<span class="string">'Jack'</span>);</div><div class="line"><span class="built_in">console</span>.log(student.grade); <span class="comment">// 六年级</span></div><div class="line"><span class="built_in">console</span>.log(student.study(<span class="string">'英语'</span>)); <span class="comment">// Jack在学习：英语</span></div><div class="line"><span class="built_in">console</span>.log(student.school); <span class="comment">// 实验小学</span></div><div class="line"><span class="built_in">console</span>.log(student.sleep()); <span class="comment">// Jack在睡觉</span></div><div class="line"><span class="built_in">console</span>.log(student.name); <span class="comment">// Jack</span></div><div class="line"><span class="built_in">console</span>.log(student.walk()); <span class="comment">// Jack在行走</span></div><div class="line"><span class="built_in">console</span>.log(student.age); <span class="comment">// 30</span></div><div class="line"><span class="built_in">console</span>.log(student.speak(<span class="string">'你好'</span>)); <span class="comment">// Jack说：“你好“</span></div><div class="line"><span class="built_in">console</span>.log(student.gender); <span class="comment">// male</span></div><div class="line"><span class="built_in">console</span>.log(student.run()); <span class="comment">// Jack在跑步</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> People); <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(student <span class="keyword">instanceof</span> Student); <span class="comment">// true</span></div><div class="line"><span class="comment">// another student</span></div><div class="line"><span class="keyword">var</span> another = <span class="keyword">new</span> Student(<span class="string">'Tomas'</span>);</div><div class="line">another.likes.push(<span class="string">'football'</span>);</div><div class="line"><span class="comment">// student</span></div><div class="line">student.likes.push(<span class="string">'Basketball'</span>);</div><div class="line">student.hates.push(<span class="string">'Apple'</span>);</div><div class="line"><span class="built_in">console</span>.log(another.name); <span class="comment">// Tomas</span></div><div class="line"><span class="built_in">console</span>.log(another.walk()); <span class="comment">// Tomas在行走</span></div><div class="line"><span class="comment">// 父类实例属性likes</span></div><div class="line"><span class="built_in">console</span>.log(student.likes); <span class="comment">// ["Basketball"]</span></div><div class="line"><span class="built_in">console</span>.log(another.likes); <span class="comment">// ["football"]</span></div><div class="line"><span class="comment">// 父类原型属性hates</span></div><div class="line"><span class="built_in">console</span>.log(student.hates); <span class="comment">// ["Apple"]</span></div><div class="line"><span class="built_in">console</span>.log(another.hates); <span class="comment">// ["Apple"]</span></div></pre></td></tr></table></figure>
<p>特点：</p>
<ul>
<li>包含组合继承的所有优点，并解决了父类实例属性初始化两次的问题（多消耗内存问题）</li>
</ul>
<blockquote>
<p>唯一缺点是实现稍复杂</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Android项目从eclipse迁移到Android Studio（含Library）]]></title>
      <url>https://chyrain.github.io/2017/07/17/Android%E9%A1%B9%E7%9B%AE%E4%BB%8Eeclipse%E8%BF%81%E7%A7%BB%E5%88%B0Android%20Studio%EF%BC%88%E5%90%ABLibrary%EF%BC%89/</url>
      <content type="html"><![CDATA[<h2 id="方案一：整个项目导入"><a href="#方案一：整个项目导入" class="headerlink" title="方案一：整个项目导入"></a>方案一：整个项目导入</h2><p>这个方案导入的项目会自动把依赖库也导入进来，一般小项目没问题，一键导入，如果导进来问题比较多，还是建议使用方案二，步骤和工作量大点，但是问题少容易解决。</p>
<ol>
<li>Import From eclipse</li>
</ol>
<p><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/importAS01.png" width="500" alt="chess_react" align="center"><br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/importAS02.png" width="380" alt="chess_react" align="center"></p>
<ol>
<li>Library会同时被全部导入进来成为module，有报错把所有module的AndroidManifest.xml文件里的android:allowBackup=”true”删掉，把导入的androidsupportv7包删掉改为在对应module的build.gradle里的dependencies中加上compile ‘com.android.support:appcompat-v7:23.4.0’等需要使用的support包</li>
</ol>
<h2 id="方案二：新建项目一一导入"><a href="#方案二：新建项目一一导入" class="headerlink" title="方案二：新建项目一一导入"></a>方案二：新建项目一一导入</h2><ol>
<li>在Android Studio新建项目，填写项目主包名跟原来Eclipse的主包名一样。</li>
<li>把AndroidMainfest.xml内容全部覆盖过来。</li>
<li>复制src：首先新建好eclipse下有的全部package，构建好包结构，然后将整个src/内的内容复制到app/src/main/java内，注意不要直接从Eclipse copy过去，包名会丢失的。</li>
<li>Eclipse res目录copy到Android Studio的app/src/main/res目录下就好了。</li>
<li>Eclipse的libs目录copy到app/libs，新建项目后build.gradle会有一句：compile fileTree(dir:’libs’,include: [‘*.jar’])，这个可以加载所有jar，而so文件放armeabi等文件夹内就搞定了，保持原有目录结构。</li>
<li>导入eclipse的依赖库作为module：File-&gt;New-&gt;Import Module，选择依赖库项目文件夹，最后点OK引入即可。</li>
<li>依赖保包含v4、v7包的在对应module的build.gradle里的dependencies中加上compile ‘com.android.support:appcompat-v7:23.4.0’等需要使用的support包。</li>
<li>添加module依赖，把导入的module添加到app项目依赖：app项目右键Open Module Setting -&gt; app -&gt; dependencies -&gt; + -&gt; Module Dependencies选择需要依赖的module。</li>
<li>build一下就OK了。如果有问题，根据问题去处理。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[iTerm2的使用方法]]></title>
      <url>https://chyrain.github.io/2017/04/06/iTerm2%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      <content type="html"><![CDATA[<h2 id="iTerm2"><a href="#iTerm2" class="headerlink" title="iTerm2"></a>iTerm2</h2><p>iTerm2 是 MAC 下最好的终端工具。</p>
<h3 id="标签变色"><a href="#标签变色" class="headerlink" title="标签变色"></a>标签变色</h3><p>iTerm2 的标签的颜色会变化，以指示该 tab 当前的状态。当该标签有新输出的时候，标签会变成洋红色；新的输出长时间没有查看，标签会变成红色。可在设置中关掉该功能。</p>
<h3 id="智能选中"><a href="#智能选中" class="headerlink" title="智能选中"></a>智能选中</h3><p>在 iTerm2 中，双击选中，三击选中整行，四击智能选中（智能规则可配置），可以识别网址，引号引起的字符串，邮箱地址等。（很多时候双击的选中就已经很智能了）</p>
<p>在 iTerm2 中，选中即复制。即任何选中状态的字符串都被放到了系统剪切板中。</p>
<h3 id="巧用-Command-键"><a href="#巧用-Command-键" class="headerlink" title="巧用 Command 键"></a>巧用 Command 键</h3><p>按住⌘键:</p>
<ul>
<li>可以拖拽选中的字符串；</li>
<li>点击 url：调用默认浏览器访问该网址；</li>
<li>点击文件：调用默认程序打开文件；</li>
<li>如果文件名是filename:42，且默认文本编辑器是Macvim、Textmate或BBEdit，将会直接打开到这一行；</li>
<li>点击文件夹：在 finder 中打开该文件夹；</li>
<li>同时按住option键，可以以矩形选中，类似于vim中的ctrl v操作。</li>
</ul>
<h3 id="Meta-键"><a href="#Meta-键" class="headerlink" title="Meta 键"></a>Meta 键</h3><p>在emacs中，meta键的使用非常频繁，而 OSX 系统没有提供meta键。在 iTerm2 中可以选择左右两个的Option键作为meta键。官方推荐的配置如下图所示。右Option键依然是 OSX 的默认功能（输入特殊字符）。</p>
<h3 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h3><ul>
<li>切换 tab：⌘+←, ⌘+→, ⌘+{, ⌘+}。⌘+数字直接定位到该 tab；</li>
<li>新建 tab：⌘+t；</li>
<li>顺序切换 pane：⌘+[, ⌘+]；</li>
<li>按方向切换 pane：⌘+Option+方向键；</li>
<li>切分屏幕：⌘+d 水平切分，⌘+Shift+d 垂直切分；</li>
<li>智能查找，支持正则查找：⌘+f。</li>
</ul>
<h3 id="自动完成"><a href="#自动完成" class="headerlink" title="自动完成"></a>自动完成</h3><p>iTerm2 可以自动补齐命令，输入若干字符，按⌘+d弹出自动补齐窗口，列出曾经使用过的命令。</p>
<p>iTerm2 autocomplete<br>iTerm2 也可以使用历史记录，按⌘+Shift+h弹出历史记录窗口。</p>
<h3 id="Expose-Tabs"><a href="#Expose-Tabs" class="headerlink" title="Exposé Tabs"></a>Exposé Tabs</h3><p>⌘+Option+e全屏展示所有的 tab，可以搜索。</p>
<h3 id="高亮当前鼠标的位置"><a href="#高亮当前鼠标的位置" class="headerlink" title="高亮当前鼠标的位置"></a>高亮当前鼠标的位置</h3><p>一个标签页中开的窗口太多，有时候会找不到当前的鼠标，⌘+/找到它。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[各种awesome项目汇总]]></title>
      <url>https://chyrain.github.io/2017/04/05/%E5%90%84%E7%A7%8Dawesome%E9%A1%B9%E7%9B%AE%E6%B1%87%E6%80%BB/</url>
      <content type="html"><![CDATA[<blockquote>
<p>awesome projects stars more than 1k (2017-04-05 update).</p>
</blockquote>
<h2 id="综合"><a href="#综合" class="headerlink" title="综合"></a>综合</h2><ul>
<li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="external">awesome</a></li>
<li><a href="https://github.com/bayandin/awesome-awesomeness" target="_blank" rel="external">awesome-awesomeness</a></li>
<li><a href="https://github.com/prakhar1989/awesome-courses" target="_blank" rel="external">awesome-courses (计算机科学)</a></li>
<li><a href="https://github.com/Kickball/awesome-selfhosted" target="_blank" rel="external">awesome-selfhosted</a></li>
<li><a href="https://github.com/lk-geimfari/awesomo" target="_blank" rel="external">awesomo</a></li>
<li><a href="https://github.com/jobbole/awesome-programming-books" target="_blank" rel="external">awesome-programming-books</a></li>
</ul>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul>
<li><a href="https://github.com/willianjusten/awesome-svg" target="_blank" rel="external">awesome-svg</a></li>
<li><a href="https://github.com/wbkd/awesome-d3" target="_blank" rel="external">awesome-d3</a></li>
<li><a href="https://github.com/jobbole/awesome-javascript-cn" target="_blank" rel="external">awesome-javascript-cn (JavaScript 资源大全中文版)</a></li>
<li><a href="https://github.com/ChromeDevTools/awesome-chrome-devtools" target="_blank" rel="external">awesome-chrome-devtools</a></li>
</ul>
<h3 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h3><ul>
<li><a href="https://github.com/sindresorhus/awesome-nodejs" target="_blank" rel="external">awesome-nodejs</a></li>
<li><a href="https://github.com/xgrommx/awesome-redux" target="_blank" rel="external">awesome-redux</a></li>
<li><a href="https://github.com/sindresorhus/awesome-npm" target="_blank" rel="external">awesome-npm</a></li>
<li><a href="https://github.com/sqreen/awesome-nodejs-projects" target="_blank" rel="external">awesome-nodejs-projects</a></li>
</ul>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ul>
<li><a href="https://github.com/enaqx/awesome-react" target="_blank" rel="external">awesome-react</a></li>
<li><a href="https://github.com/brillout/awesome-react-components" target="_blank" rel="external">swesome-react-components</a></li>
<li><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="external">awesome-react-native</a></li>
</ul>
<h3 id="Vue"><a href="#Vue" class="headerlink" title="Vue"></a>Vue</h3><ul>
<li><a href="https://github.com/vuejs/awesome-vue" target="_blank" rel="external">awesome-vue</a></li>
</ul>
<h3 id="Angular"><a href="#Angular" class="headerlink" title="Angular"></a>Angular</h3><ul>
<li><a href="https://github.com/AngularClass/awesome-angular" target="_blank" rel="external">awesome-angular</a></li>
<li><a href="https://github.com/gianarb/awesome-angularjs" target="_blank" rel="external">awesome-angularjs</a></li>
</ul>
<h2 id="Electron"><a href="#Electron" class="headerlink" title="Electron"></a>Electron</h2><ul>
<li><a href="https://github.com/sindresorhus/awesome-electron" target="_blank" rel="external">awesome-electron</a></li>
<li><a href="https://github.com/monostable/awesome-electronics" target="_blank" rel="external">awesome-electronics</a></li>
</ul>
<h2 id="语言or框架"><a href="#语言or框架" class="headerlink" title="语言or框架"></a>语言or框架</h2><ul>
<li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="external">awesome-python</a></li>
<li><a href="https://github.com/markets/awesome-ruby" target="_blank" rel="external">awesome-ruby</a></li>
<li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="external">awesome-go</a></li>
<li><a href="https://github.com/ziadoz/awesome-php" target="_blank" rel="external">awesome-php</a></li>
<li><a href="https://github.com/akullpp/awesome-java" target="_blank" rel="external">awesone-java</a></li>
<li><a href="https://github.com/matteocrippa/awesome-swift" target="_blank" rel="external">awesome-swift</a></li>
<li><a href="https://github.com/fffaraz/awesome-cpp" target="_blank" rel="external">awesome-cpp</a></li>
<li><a href="https://github.com/h4cc/awesome-elixir" target="_blank" rel="external">awesome-elixir</a></li>
<li><a href="https://github.com/veggiemonk/awesome-docker" target="_blank" rel="external">awesome-docker</a></li>
<li><a href="https://github.com/rosarior/awesome-django" target="_blank" rel="external">awesome-django</a></li>
<li><a href="https://github.com/hsavit1/Awesome-Swift-Education" target="_blank" rel="external">Awesome-Swift-Education</a></li>
<li><a href="https://github.com/jobbole/awesome-java-cn" target="_blank" rel="external">awesome-java-cn</a></li>
<li><a href="https://github.com/Wolg/awesome-swift" target="_blank" rel="external">awesome-swift</a></li>
<li><a href="https://github.com/lzyzsd/Awesome-RxJava" target="_blank" rel="external">Awesome-RxJava</a></li>
<li><a href="https://github.com/qinwf/awesome-R" target="_blank" rel="external">awesome-R</a></li>
<li><a href="https://github.com/jobbole/awesome-c-cn" target="_blank" rel="external">awesome-c-cn</a></li>
</ul>
<h2 id="Android"><a href="#Android" class="headerlink" title="Android"></a>Android</h2><ul>
<li><a href="https://github.com/wasabeef/awesome-android-ui" target="_blank" rel="external">awesome-android-ui</a></li>
<li><a href="https://github.com/snowdream/awesome-android" target="_blank" rel="external">awesome-android</a></li>
<li><a href="https://github.com/Freelander/Android_Data" target="_blank" rel="external">Android_Data</a></li>
<li><a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="external">awesome-android</a></li>
<li><a href="https://github.com/wasabeef/awesome-android-libraries" target="_blank" rel="external">awesome-android-libraries</a></li>
<li><a href="https://github.com/tangqi92/Android-Tips" target="_blank" rel="external">Android-Tips</a></li>
<li><a href="https://github.com/Yalantis/Context-Menu.Android" target="_blank" rel="external">Context-Menu.Android</a></li>
<li><a href="https://github.com/mzlogin/awesome-adb" target="_blank" rel="external">awesome-adb</a></li>
<li><a href="https://github.com/Juude/awesome-android-performance" target="_blank" rel="external">awesome-android-performance</a></li>
<li><a href="https://github.com/ashishb/android-security-awesome" target="_blank" rel="external">android-security-awesome</a></li>
<li><a href="https://github.com/jiang111/awesome-android-tips" target="_blank" rel="external">awesome-android-tips</a></li>
</ul>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul>
<li><a href="https://github.com/vsouza/awesome-ios" target="_blank" rel="external">awesome-ios</a></li>
<li><a href="https://github.com/dkhamsing/open-source-ios-apps" target="_blank" rel="external">open-source-ios-apps</a></li>
<li><a href="https://github.com/cjwirth/awesome-ios-ui" target="_blank" rel="external">awesome-ios-ui</a></li>
<li><a href="https://github.com/ameizi/awesome-ios-animation" target="_blank" rel="external">awesome-ios-animation</a></li>
<li><a href="https://github.com/jobbole/awesome-ios-cn" target="_blank" rel="external">awesome-ios-cn (iOS 资源大全中文版)</a></li>
<li><a href="https://github.com/Tim9Liu9/TimLiu-iOS" target="_blank" rel="external">TimLiu-iOS（iOS开发常用三方库、插件、知名博客等等）</a></li>
</ul>
<h2 id="机器学习-人工智能"><a href="#机器学习-人工智能" class="headerlink" title="机器学习|人工智能"></a>机器学习|人工智能</h2><ul>
<li><a href="https://github.com/josephmisiti/awesome-machine-learning" target="_blank" rel="external">awesome-machine-learning</a></li>
<li><a href="https://github.com/jtoy/awesome-tensorflow" target="_blank" rel="external">awesome-tensorflow</a></li>
</ul>
<h2 id="数据挖掘"><a href="#数据挖掘" class="headerlink" title="数据挖掘"></a>数据挖掘</h2><ul>
<li><a href="https://github.com/lorien/awesome-web-scraping" target="_blank" rel="external">awesome-web-scraping</a></li>
</ul>
<h2 id="网络安全-黑客"><a href="#网络安全-黑客" class="headerlink" title="网络安全|黑客"></a>网络安全|黑客</h2><ul>
<li><a href="https://github.com/carpedm20/awesome-hacking" target="_blank" rel="external">awesome-hacking</a></li>
<li><a href="https://github.com/Hack-with-Github/Awesome-Hacking" target="_blank" rel="external">Awesome-Hacking</a></li>
</ul>
<h2 id="design"><a href="#design" class="headerlink" title="design"></a>design</h2><ul>
<li><a href="https://github.com/gztchan/awesome-design" target="_blank" rel="external">awesome-design</a></li>
<li><a href="https://github.com/heyalexej/awesome-images" target="_blank" rel="external">awesome-images</a></li>
</ul>
<h2 id="面试问题"><a href="#面试问题" class="headerlink" title="面试问题"></a>面试问题</h2><ul>
<li><a href="https://github.com/MaximAbramchuck/awesome-interview-questions" target="_blank" rel="external">awesome-interview-questions</a></li>
</ul>
<h2 id="微信小程序"><a href="#微信小程序" class="headerlink" title="微信小程序"></a>微信小程序</h2><ul>
<li><a href="https://github.com/justjavac/awesome-wechat-weapp" target="_blank" rel="external">awesome-wechat-weapp</a></li>
<li><a href="https://github.com/Aufree/awesome-wechat-weapp" target="_blank" rel="external">awesome-wechat-weapp</a></li>
<li><a href="https://github.com/opendigg/awesome-github-wechat-weapp" target="_blank" rel="external">awesome-github-wechat-weapp</a></li>
</ul>
<h2 id="MAC应用"><a href="#MAC应用" class="headerlink" title="MAC应用"></a>MAC应用</h2><ul>
<li><a href="https://github.com/jaywcjlove/awesome-mac" target="_blank" rel="external">awesome-mac</a></li>
<li><a href="https://github.com/iCHAIT/awesome-macOS" target="_blank" rel="external">awesome-macOS</a></li>
</ul>
<h2 id="Linux应用"><a href="#Linux应用" class="headerlink" title="Linux应用"></a>Linux应用</h2><ul>
<li><a href="https://github.com/VoLuong/Awesome-Linux-Software" target="_blank" rel="external">Awesome-Linux-Software</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Sublime Text 3 使用总结]]></title>
      <url>https://chyrain.github.io/2017/04/05/Sublime-Text3%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h2><ul>
<li>链接：<a href="https://www.douban.com/note/362268947/" target="_blank" rel="external">Sublime Text 3 快捷键总结</a></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[git项目管理]]></title>
      <url>https://chyrain.github.io/2017/04/05/git%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
      <content type="html"><![CDATA[<h2 id="优秀文章"><a href="#优秀文章" class="headerlink" title="优秀文章"></a>优秀文章</h2><blockquote>
<p> 修改于2017-04-05</p>
</blockquote>
<ul>
<li>链接：<a href="https://segmentfault.com/a/1190000002413519" target="_blank" rel="external">git协同开发与分支模型</a></li>
<li>链接：<a href="https://segmentfault.com/a/1190000003728094" target="_blank" rel="external">git基础操作汇总</a></li>
</ul>
<h2 id="Git笔记"><a href="#Git笔记" class="headerlink" title="Git笔记"></a>Git笔记</h2><p>学习Git: <a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">https://git-scm.com/book/zh/v2</a></p>
<ul>
<li><p>放弃本地所有修改，强制更新</p>
<p>  git fetch --all<br>  git reset --hard origin/master</p>
</li>
<li><p>删除本地tag</p>
<p>  git tag -d ‘tagname’</p>
</li>
<li><p>删除远程tag</p>
<p>  git push origin --delete tag ‘tagname’</p>
<p>  or</p>
<p>  git tag -d ‘tagname’<br>  git push origin :refs/tags/‘tagname’</p>
</li>
<li><p>本地tag推送到远程</p>
<p>  git push --tags</p>
</li>
<li><p>获取远程tag</p>
<p>  git fetch origin tag ‘tagname’</p>
</li>
<li><p>删除远程分支</p>
<p>  git push origin --delete ‘branchName’</p>
<p>  or</p>
<p>  git push origin :‘branchName’</p>
</li>
<li><p>本地clone后更新远程库内容</p>
<p>  如果你不是fork的项目的话：</p>
<pre><code>git pull
</code></pre><p>  即可。如果你是fork的话，把原来的项目添加到：</p>
<pre><code>git remote add usp [主项目地址]
</code></pre><p>  然后：</p>
<pre><code>git fetch ups &amp;&amp; git merge ups/master
</code></pre></li>
<li><p>merge合并<br>  合并dev到当前分枝，--no-ff保留目的分支dev的commit记录，即使dev被删除</p>
<p>  git merge --no-ff -m “merge dev with no-ff” dev</p>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[网页录音实现方案]]></title>
      <url>https://chyrain.github.io/2017/03/28/%E7%BD%91%E9%A1%B5%E5%BD%95%E9%9F%B3%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</url>
      <content type="html"><![CDATA[<h2 id="H5实现"><a href="#H5实现" class="headerlink" title="H5实现"></a>H5实现</h2><p><a href="https://github.com/mattdiamond/Recorderjs" target="_blank" rel="external">RecorderJS</a><br>原理：使用H5的getUserMedia接口，不支持IE</p>
<h2 id="flash实现"><a href="#flash实现" class="headerlink" title="flash实现"></a>flash实现</h2><p><a href="https://github.com/michalstocki/FlashWavRecorder" target="_blank" rel="external">FlashWavRecoeder</a></p>
<p>此外，还有：<br><a href="https://github.com/uikoo9/recorder-online-upload" target="_blank" rel="external">https://github.com/uikoo9/recorder-online-upload</a></p>
<h2 id="综合兼容"><a href="#综合兼容" class="headerlink" title="综合兼容"></a>综合兼容</h2><p><a href="https://github.com/jwagener-soundcloud/recorder.js" target="_blank" rel="external">https://github.com/jwagener-soundcloud/recorder.js</a></p>
<p>这个插件基于 swfObject.js，低版本浏览器中使用 flash 实现录音功能，在高版本支持 HTML5 的浏览器中使用 Audio 实现，同时它还封装好了上传功能，支持上传到服务器和 SoundCloud。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[JS-基础问题不基础]]></title>
      <url>https://chyrain.github.io/2017/02/28/JS-%E5%9F%BA%E7%A1%80%E9%97%AE%E9%A2%98%E4%B8%8D%E5%9F%BA%E7%A1%80/</url>
      <content type="html"><![CDATA[<h2 id="JS基础问题"><a href="#JS基础问题" class="headerlink" title="JS基础问题"></a>JS基础问题</h2><p>推荐：<a href="https://book.douban.com/subject/26351021/" target="_blank" rel="external">《你不知道的Javascript》</a></p>
<h3 id="1-引用传递与值传递"><a href="#1-引用传递与值传递" class="headerlink" title="1. 引用传递与值传递"></a>1. 引用传递与值传递</h3><p><strong>js 中什么类型是引用传递, 什么类型是值传递? 如何将值类型的变量以引用的方式传递?</strong></p>
<blockquote>
<p>简单点说, <strong><code>对象</code></strong>是<code>引用传递</code>, <strong><code>基础类型</code></strong>是<code>值传递</code>, 通过将基础类型包装 (boxing) 可以以引用的方式传递.</p>
</blockquote>
<p>仔细查看并理解下面代码：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">changeStuff</span>(<span class="params">a, b, c</span>)</span></div><div class="line">&#123;</div><div class="line">  a = a * <span class="number">10</span>;</div><div class="line">  b.item = <span class="string">"changed"</span>;</div><div class="line">  c = &#123;<span class="attr">item</span>: <span class="string">"changed"</span>&#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line"><span class="keyword">var</span> obj1 = &#123;<span class="attr">item</span>: <span class="string">"unchanged"</span>&#125;;</div><div class="line"><span class="keyword">var</span> obj2 = &#123;<span class="attr">item</span>: <span class="string">"unchanged"</span>&#125;;</div><div class="line"></div><div class="line">changeStuff(num, obj1, obj2);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(num);</div><div class="line"><span class="built_in">console</span>.log(obj1.item);    </div><div class="line"><span class="built_in">console</span>.log(obj2.item);</div></pre></td></tr></table></figure></p>
<p>(类推C++)指针与引用的区别（C++语言中，函数的参数和返回值的传递方式有三种：值传递、指针传递和引用传递）：</p>
<ul>
<li>指针是一个实体，而引用仅是个别名</li>
<li>引用被创建的同时必须被初始化（指针则可以在任何时候被初始化）。</li>
<li>不能有NULL 引用，引用必须与合法的存储单元关联（指针则可以是NULL）。</li>
<li>一旦引用被初始化，就不能改变引用的关系（指针则可以随时改变所指的对象）。</li>
<li>“sizeof 引用”得到的是所指向的变量（对象）的大小，而“sizeof指针”得到的是指针本身（所指向的变量或对象的地址）的大小；</li>
<li>引用没有 const，指针有 const，const 的指针不可变；</li>
</ul>
<p>引用是一种特殊的操作被限定的指针(必须初始化不为空，不用判空，不可重新赋值到其他对象的引用)，指针是一把可以砍树、割草、割断绳子的刀，引用是一把剪绳子的剪刀，引用可以干的事指针也可以，但是引用比较安全，为什么要用引用，其实即“用适当的工具做恰如其分的工作”。指针能够毫无约束地操作内存中的如何东西，尽管指针功能强大，但是非常危险。 如果的确只需要借用一下某个对象的“别名”，那么就用“引用”，而不要用“指针”，以免发生意外。比如说，某人需要一份证明，本来在文件上盖上公章的印子就行了，如果把取公章的钥匙交给他，那么他就获得了不该有的权利。</p>
<h3 id="2-和"><a href="#2-和" class="headerlink" title="2. ==和==="></a>2. <code>==</code>和<code>===</code></h3><ul>
<li>==， 两边值类型不同的时候，会先进行类型转换，再比较。 </li>
<li>===，不做类型转换，类型不同的一定不等。</li>
</ul>
<blockquote>
<p>下面分别说明：<br>先说 ===，这个比较简单。下面的规则用来判断两个值是否===相等：<br>1、如果类型不同，就[不相等]<br>2、如果两个都是数值，并且是同一个值，那么[相等]；(！例外)的是，如果其中至少一个是NaN，那么[不相等]。（判断一个值是否是NaN，只能用isNaN()来判断）<br>3、如果两个都是字符串，每个位置的字符都一样，那么[相等]；否则[不相等]。<br>4、如果两个值都是true，或者都是false，那么[相等]。<br>5、如果两个值都引用同一个对象或函数，那么[相等]；否则[不相等]。<br>6、如果两个值都是null，或者都是undefined，那么[相等]。<br>再说 ==，根据以下规则：<br>1、如果两个值类型相同，进行 === 比较。<br>2、如果两个值类型不同，他们可能相等。根据下面规则进行类型转换再比较：<br>a、如果一个是null、一个是undefined，那么[相等]。<br>b、如果一个是字符串，一个是数值，把字符串转换成数值再进行比较。<br>c、如果任一值是 true，把它转换成 1 再比较；如果任一值是 false，把它转换成 0 再比较。<br>d、如果一个是对象，另一个是数值或字符串，把对象转换成基础类型的值再比较。对象转换成基础类型，利用它的toString或者valueOf方法。 js核心内置类，会尝试valueOf先于toString；例外的是Date，Date利用的是toString转换。非js核心的对象，令说（比较麻 烦，我也不大懂）<br>e、任何其他组合，都[不相等]。</p>
<p>主要注意区分<code>Nan</code>、<code>undefined</code>、<code>null</code>间的判断。</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> == <span class="string">'1'</span>        <span class="comment">//true</span></div><div class="line"><span class="number">1</span> === <span class="string">'1'</span>       <span class="comment">//false</span></div><div class="line"><span class="string">'123'</span> === <span class="string">'123'</span> <span class="comment">//true</span></div><div class="line"><span class="number">1</span> === <span class="number">1</span>         <span class="comment">//true</span></div><div class="line">[<span class="number">1</span>] == [<span class="number">1</span>]      <span class="comment">//false</span></div><div class="line">&#123;&#125; == &#123;&#125;        <span class="comment">//false</span></div><div class="line"><span class="number">1</span> == <span class="literal">true</span>       <span class="comment">//true</span></div><div class="line"><span class="number">1</span> === <span class="literal">true</span>      <span class="comment">//false</span></div><div class="line"><span class="number">2</span> == <span class="literal">true</span>       <span class="comment">//false</span></div><div class="line"><span class="number">0</span> == <span class="literal">false</span>      <span class="comment">//true</span></div><div class="line"><span class="number">0</span> === <span class="literal">false</span>     <span class="comment">//false</span></div><div class="line"><span class="keyword">var</span> a = [<span class="number">1</span>], b = a;</div><div class="line">a === b         <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="literal">null</span> === <span class="literal">null</span>           <span class="comment">//true</span></div><div class="line"><span class="literal">undefined</span> == <span class="literal">undefined</span>  <span class="comment">//true</span></div><div class="line"><span class="literal">undefined</span> == <span class="literal">null</span>       <span class="comment">//true</span></div><div class="line"><span class="literal">undefined</span> === <span class="literal">null</span>      <span class="comment">//false</span></div><div class="line"><span class="literal">undefined</span> == <span class="literal">NaN</span>        <span class="comment">//false</span></div><div class="line"><span class="literal">null</span> == <span class="literal">NaN</span>             <span class="comment">//false</span></div><div class="line"><span class="literal">NaN</span> == <span class="literal">NaN</span>              <span class="comment">//false ***注意***</span></div><div class="line"><span class="literal">NaN</span> === <span class="literal">NaN</span>             <span class="comment">//false ***注意***</span></div><div class="line"><span class="keyword">void</span> <span class="number">0</span> === <span class="literal">undefined</span>    <span class="comment">//true</span></div><div class="line"><span class="keyword">void</span> <span class="number">0</span> == <span class="literal">NaN</span>           <span class="comment">//false</span></div></pre></td></tr></table></figure>
<h3 id="3-类型判断typeof"><a href="#3-类型判断typeof" class="headerlink" title="3. 类型判断typeof"></a>3. 类型判断<code>typeof</code></h3><p><strong>你知道下面typeof运算的结果吗？</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span>(<span class="number">1</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">NaN</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">Number</span>.MIN_VALUE);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">Infinity</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="string">"123"</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">true</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">window</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">document</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">null</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">eval</span>);</div><div class="line"><span class="keyword">typeof</span>(<span class="built_in">Date</span>);</div><div class="line"><span class="keyword">typeof</span>(sss);</div><div class="line"><span class="keyword">typeof</span>(<span class="literal">undefined</span>);</div></pre></td></tr></table></figure>
<p>看看你会几个？<br>我们来试试看看结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">alert(typeof(1));                   // number</div><div class="line">alert(typeof(NaN));                 // number</div><div class="line">alert(typeof(Number.MIN_VALUE));    // number</div><div class="line">alert(typeof(Infinity));            // number  </div><div class="line">alert(typeof(&quot;123&quot;));               // string</div><div class="line">alert(typeof(true));                // boolean</div><div class="line">alert(typeof(window));              // object</div><div class="line">alert(typeof(document));            // object</div><div class="line">alert(typeof(null));                // object</div><div class="line">alert(typeof(eval));                // function</div><div class="line">alert(typeof(Date));                // function</div><div class="line">alert(typeof(sss));                 // undefined</div><div class="line">alert(typeof(undefined));           // undefined</div></pre></td></tr></table></figure>
<p>如果看了以后，不是很明白的话，请看下面：<br>typeof是一个一元运算符，它返回的结果 始终是一个字符串，对不同的操作数，它返回不同的结果。<br>具体的规则如下：</p>
<ol>
<li><p>对于数字类型的操作数而言， typeof 返回的值是 number。比如说：typeof(1)，返回的值就是number。<br>上面是举的常规数字，对于非常规的数字类型而言，其结果返回的也是number。比如typeof(NaN)，NaN在<br>JavaScript中代表的是特殊非数字值，虽然它本身是一个数字类型。<br>在JavaScript中，特殊的数字类型还有几种：<br>Infinity 表示无穷大特殊值<br>NaN　　　　　　　　　　　　特殊的非数字值<br>Number.MAX_VALUE　　　　　可表示的最大数字<br>Number.MIN_VALUE　　　　　可表示的最小数字（与零最接近）<br>Number.NaN　　　　　 　　　特殊的非数字值<br>Number.POSITIVE_INFINITY　表示正无穷大的特殊值<br>Number.NEGATIVE_INFINITY  表 示负无穷大的特殊值<br>以上特殊类型，在用typeof进行运算进，其结果都将是number。</p>
</li>
<li><p>对于字符串类型， typeof 返回的值是 string。比如typeof(“123”)返回的值是string。 </p>
</li>
<li>对于布尔类型， typeof 返回的值是 boolean 。比如typeof(true)返回的值是boolean。</li>
<li>对于对象、数组、null 返回的值是 object 。比如typeof(window)，typeof(document)，typeof(null)返回的值都是object。</li>
<li>对于函数类型，返回的值是 function。比如：typeof(eval)，typeof(Date)返回的值都是function。</li>
<li>如 果运算数是没有定义的（比如说不存在的变量、函数或者undefined），将返回undefined。比如：typeof(sss)、typeof(undefined)都返回undefined。</li>
</ol>
<h3 id="4-作用域"><a href="#4-作用域" class="headerlink" title="4. 作用域"></a>4. 作用域</h3><p><strong><code>let</code> 和 <code>var</code> 的区别？</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> me = <span class="string">'go'</span>;  <span class="comment">// globally scoped</span></div><div class="line"><span class="keyword">var</span> i = <span class="string">'able'</span>; <span class="comment">// globally scoped</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.me); <span class="comment">// undefined</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.i); <span class="comment">// 'able'</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">allyIlliterate</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//tuce is *not* visible out here</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>( <span class="keyword">let</span> tuce = <span class="number">0</span>; tuce &lt; <span class="number">5</span>; tuce++ ) &#123;</div><div class="line">        <span class="comment">//tuce is only visible in here (and in the for() parentheses)</span></div><div class="line">        <span class="comment">//and there is a separate tuce variable for each iteration of the loop</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//tuce is *not* visible out here</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">byE40</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="comment">//nish *is* visible out here</span></div><div class="line"></div><div class="line">    <span class="keyword">for</span>( <span class="keyword">var</span> nish = <span class="number">0</span>; nish &lt; <span class="number">5</span>; nish++ ) &#123;</div><div class="line">        <span class="comment">//nish is visible to the whole function</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">//nish *is* visible out here</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>var的作用域：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> MyLike = <span class="string">'C#'</span>;</div><div class="line">YouLike = <span class="string">'C++'</span>;</div><div class="line">alert(<span class="string">'我喜欢：'</span> + MyLike + <span class="string">" 你喜欢："</span> + YouLike);</div><div class="line"><span class="comment">//输出：我喜欢：C# 你喜欢：C++</span></div><div class="line">ChangeLike();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">ChangeLike</span>(<span class="params"></span>) </span>&#123;</div><div class="line"></div><div class="line">    alert(MyLike + <span class="string">'是我喜欢 '</span> + YouLike + <span class="string">'是你喜欢'</span>); <span class="comment">//undefined是我喜欢 C++是你喜欢</span></div><div class="line">    <span class="keyword">var</span> MyLike = <span class="string">'JS'</span>;</div><div class="line">    YouLike = <span class="string">'JAVA'</span>;</div><div class="line">    alert(MyLike + <span class="string">'是我喜欢 '</span> + YouLike + <span class="string">'是你喜欢'</span>)<span class="comment">//JS是我喜欢 JAVA是你喜欢</span></div><div class="line">&#125;</div><div class="line">alert(MyLike + <span class="string">'是我喜欢 '</span> + YouLike + <span class="string">'是你喜欢'</span>)<span class="comment">//C#是我喜欢 JAVA是你喜欢</span></div></pre></td></tr></table></figure>
<p>相对于let的区别:</p>
<ol>
<li><p>块级作用域if</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">flag</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="keyword">var</span> a = <span class="string">'js'</span></div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 这里也可以访问 a</span></div><div class="line">&#125;</div><div class="line">变量a在<span class="keyword">if</span>块里声明的，但在<span class="keyword">else</span>块和<span class="keyword">if</span>外都可以访问到val, 把<span class="keyword">var</span>换成<span class="keyword">let</span>后：</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">flag</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (flag) &#123;</div><div class="line">        <span class="keyword">let</span> a = <span class="string">'js'</span></div><div class="line">    &#125; </div><div class="line">    <span class="comment">// 这里也访问不到 a</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>块级作用域for</p>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer i: '</span> + i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'inner i: '</span>+i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">outer i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">1</span></div></pre></td></tr></table></figure>
<p>可以看到，外层循环被打断了，因为ｉ为全局变量所以 i 的值被内层循环修改了， 把内层循环的var换成let后：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'outer i: '</span> + i);</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'inner i: '</span>+i);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>执行结果如下：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">outer i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">1</span></div><div class="line">test.html:<span class="number">10</span> outer i: <span class="number">1</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">0</span></div><div class="line">test.html:<span class="number">12</span> inner i: <span class="number">1</span></div></pre></td></tr></table></figure>
<ol>
<li>变量提升</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//先使用后声明</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// undefined</span></div><div class="line"><span class="keyword">var</span> a;</div><div class="line"></div><div class="line"><span class="comment">//变量val先使用后声明，输出undefined，也不报错。把var换成let，就报错了</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// Uncaught ReferenceError: a is not defined</span></div><div class="line"><span class="keyword">let</span> a;</div><div class="line"></div><div class="line"><span class="comment">//先判断后声明</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a == <span class="string">'undefined'</span>) &#123;</div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> a = <span class="string">''</span></div><div class="line"></div><div class="line"><span class="comment">//把var换成let，if处报语法错  Uncaught ReferenceError: a is not defined</span></div><div class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a == <span class="string">'undefined'</span>) &#123; <span class="comment">// Uncaught ReferenceError: a is not defined</span></div><div class="line">    <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="string">''</span></div></pre></td></tr></table></figure>
<p>ES6规定，如果代码块中存在let，这个区块从一开始就形成了封闭作用域,凡是在声明之前就使用，就会报错。即在代码块内，在let声明之前使用变量都是不可用的。</p>
<ol>
<li>覆盖声明</li>
</ol>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="keyword">let</span> me = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">let</span> me = <span class="string">'bar'</span>; <span class="comment">// SyntaxError: Identifier 'me' has already been declared</span></div><div class="line"><span class="meta"></span></div><div class="line">'use strict';</div><div class="line"><span class="keyword">var</span> me = <span class="string">'foo'</span>;</div><div class="line"><span class="keyword">var</span> me = <span class="string">'bar'</span>; <span class="comment">// No problem, `me` is replaced.</span></div></pre></td></tr></table></figure>
<h3 id="5-箭头函数-与-function-的区别"><a href="#5-箭头函数-与-function-的区别" class="headerlink" title="5. 箭头函数 与 function 的区别"></a>5. 箭头函数 与 function 的区别</h3><ul>
<li>function: function内this对象指向函数执行者，可使用bind(this)改变函数this指向，或者使用call(this)来调用时改变this指向。</li>
<li>箭头函数: 函数内部的this是词法作用域，由上下文确定。</li>
</ul>
<h3 id="6-内存释放"><a href="#6-内存释放" class="headerlink" title="6. 内存释放"></a>6. 内存释放</h3><p><a href="https://eggggger.xyz/2016/10/22/node-gc/" target="_blank" rel="external">《Node.js 垃圾回收》</a></p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[AWS配置shadowsocks和node.js]]></title>
      <url>https://chyrain.github.io/2017/01/21/AWS%E9%85%8D%E7%BD%AEshadowsocks%E5%92%8Cnode.js/</url>
      <content type="html"><![CDATA[<p>听说AWS绑定信用卡免费使用一年，屁颠屁颠跑去开了个账户，折腾了半天，搞了个shadowsocks代理(不懂是什么？google一下你就知道了，对了，有了它你就能google了)，装了个node.js，这里简要说说。</p>
<h2 id="申请AWS"><a href="#申请AWS" class="headerlink" title="申请AWS"></a>申请AWS</h2><p>首先是注册账户并绑定信用卡，这个不需要我多说了，打开<a href="http://aws.amazon.com/cn/" target="_blank" rel="external">AWS官网</a>，按照操作提示进行即可，绑定信用卡会有一个电话打来，让你打开键盘输入网页上显示的PIN码，绑定成功后选择支持方案为“基本（免费）”，即创建成功。</p>
<h2 id="创建和配置EC2"><a href="#创建和配置EC2" class="headerlink" title="创建和配置EC2"></a>创建和配置EC2</h2><p>（网上看到一篇类似的配置文章可作为参考：<a href="http://www.cnblogs.com/gyouxu/p/3617906.html" target="_blank" rel="external">http://www.cnblogs.com/gyouxu/p/3617906.html</a>）</p>
<p>进入AWS选择第一个：EC2，即云中的虚拟服务器，进入控制台选择地区，然后点击“启动实例”，之后要选择一个系统映像（AMI），我选择的是第一个“Amazon Linux AMI (HVM)”，大部分的Linux操作系统在Amazon EC2中是可以免费使用的，但是不包括SuSe Linux Enterprise Server 和 Red Hat Enterprise Linux (RHEL)，然后根据提示都选择默认的下一步，存储好像是限制30G，我填的10G，其他都没变，流量和存储超出限额的话是会计费的，到时候会在信用卡上扣费。最后点击“启动”，需要创建密钥对，输入名称、密码，点击下载密钥对（一个*.pem文件），保存到电脑上，ssh连接的时候需要用到。</p>
<p>注意EC2控制面板有个<code>弹性IP（Elastic IP）</code>如果申请了Elastic IP而没有与任何Instance绑定的话，每小时会收1美分，如果已经与某一Instance绑定则不会收费，所以没有用到的时候千万不要申请，避免被无辜扣费。</p>
<p>详细问题可查看：<a href="https://aws.amazon.com/cn/ec2/faqs/" target="_blank" rel="external">AWS FAQ</a></p>
<h2 id="连接EC2服务器"><a href="#连接EC2服务器" class="headerlink" title="连接EC2服务器"></a>连接EC2服务器</h2><p>下载<em>.pem文件后会提示一个连接远程服务器的命令，在你的shell终端里执行这个命令（注意：</em>.pem文件要在终端运行当前目录下，且权限为“400”才可以成功连接）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 首先，找到刚刚保存的*.pem文件，比如文件名叫amazon.pem，确认文件路径，</div><div class="line"># 打开终端，进到*.pem文件所在目录，</div><div class="line"># 执行chmod 400 *.pem 修改文件权限</div><div class="line">ssh -i &quot;pem文件名.pem&quot; 服务器用户账号名@你的服务器节点和ip信息</div></pre></td></tr></table></figure></p>
<p>上传文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scp -i pem文件.pem 上传的文件 服务器用户账号名@你的服务器节点和ip信息:/home/ec2-user/接收文件路径</div></pre></td></tr></table></figure></p>
<h2 id="安装配置shadowsocks"><a href="#安装配置shadowsocks" class="headerlink" title="安装配置shadowsocks"></a>安装配置shadowsocks</h2><blockquote>
<p>注：以下安装配置都是针对Amazon Linux AMI，也即CentOS Linux系统的，其他系统安装配置方法会有所不同。</p>
</blockquote>
<h3 id="安装shadowsocks"><a href="#安装shadowsocks" class="headerlink" title="安装shadowsocks"></a>安装shadowsocks</h3><p>首先我们需要安装python包管理工具，绕个弯然后用pip安装shadowsocks：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ sudo yum install python-setuptools #安装python包管理工具pip</div><div class="line">$ sudo easy_install pip</div><div class="line">$ sudo pip install shadowsocks</div></pre></td></tr></table></figure></p>
<h3 id="配置shadowsocks"><a href="#配置shadowsocks" class="headerlink" title="配置shadowsocks"></a>配置shadowsocks</h3><p>创建并配置shadowsocks.json（ps：可能有人不会用vi，这里简单说下，vi打开文件后，按i即可进入编辑状态，编辑完后，按esc退出编辑状态，按:进入命令状态，输入wq即可保存并退出，还不懂的话自行搜索vi用法吧）:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /etc/shadowsocks.json</div><div class="line"></div><div class="line">#在文件里输入如下内容，其中端口和连接秘密自己填写，连接时用到</div><div class="line">&#123;</div><div class="line">    &quot;server&quot;:&quot;0.0.0.0&quot;,</div><div class="line">    &quot;server_port&quot;:端口,</div><div class="line">    &quot;local_address&quot;:&quot;127.0.0.1&quot;,</div><div class="line">    &quot;local_port&quot;:1080,</div><div class="line">    &quot;password&quot;:&quot;连接密码&quot;,</div><div class="line">    &quot;timeout&quot;:300,</div><div class="line">    &quot;method&quot;:&quot;aes-256-cfb&quot;,</div><div class="line">    &quot;fast_open&quot;:false</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="运行shadowsocks"><a href="#运行shadowsocks" class="headerlink" title="运行shadowsocks"></a>运行shadowsocks</h3><p>安装配置好shadowsocks后，便可以运行了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ssserver -c /etc/shadowsocks.json -d start #启动shadowsocks</div></pre></td></tr></table></figure></p>
<h3 id="AWS配置入站端口"><a href="#AWS配置入站端口" class="headerlink" title="AWS配置入站端口"></a>AWS配置入站端口</h3><p>配置好shaodowsocks后，还需要将配置中的端口打开,这样客户端的服务才能链接得上EC2中的shadowsocks服务，<br>首先打开正在运行的实例，向右滚动表格，记录下<code>公有IP</code>：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss1.png" alt="公有IP"><br>然后到最后一项<code>安全组</code>，点击进入<code>编辑入站规则</code>：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss2.png" alt="安全组"><br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss3.png" alt="选择编辑"><br>认是开启了一个22端口（这是给ssh访问的），再建一个如下图红框标示的端口，我的shadowsocks配置的端口是1080，所以这里就开启1080，填入你上面配置的端口，因为下文需要安装node作为http服务器，也顺便开了个80端口：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss4.png" alt="入站规则"></p>
<h3 id="shadowsocks客户端配置"><a href="#shadowsocks客户端配置" class="headerlink" title="shadowsocks客户端配置"></a>shadowsocks客户端配置</h3><p>进入<a href="https://shadowsocks.com/client.html" target="_blank" rel="external">下载页</a>，选择对应平台的客户端下载。</p>
<p>打开客户端，配置要填的东西就这三个东西：</p>
<ul>
<li>地址：服务器实例的外网ip，端口</li>
<li>密码：shadowsocks配置的密码</li>
<li>加密：aes-256-cfb<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss5.png" alt="shadowsocks客户端配置"></li>
</ul>
<p>默认是选择自动代理模式，这个模式下，GWF白名单的站点不会通过代理访问，当然也可以通过chrome插件Proxy SwitchyOmega实现chrome浏览器的局部代理，配置也非常简单，如下图：<br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/AWS_ss6.png" alt="SwitchyOmega配置"></p>
<h2 id="安装配置node-js"><a href="#安装配置node-js" class="headerlink" title="安装配置node.js"></a>安装配置node.js</h2><h3 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h3><p>在个人目录下新建一个packages文件夹用来存放安装包，然后下载node.js并解压：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ mkdir packages &amp; cd packages/</div><div class="line">$ wget http://nodejs.org/dist/v6.9.4/node-v6.9.4.tar.gz #版本号可替换成你当前最新的node版本</div><div class="line">$ tar -zxvf node-v6.9.4.tar.gz</div></pre></td></tr></table></figure></p>
<p>解压好了需要编译安装node，这里需要用到gcc-c++，如果没有的话就需要安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo yum update #先更新yum</div><div class="line">$ sudo yum install gcc-c++ make</div></pre></td></tr></table></figure></p>
<p>编译安装node，编译过程较久，请耐心等待：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ cd node-v6.9.4 #进入解压后的文件夹</div><div class="line">$ ./configure --prefix=/usr/local/node #配置安装路径</div><div class="line">$ make #编译，时间较长</div><div class="line">$ sudo make install #完成安装</div></pre></td></tr></table></figure></p>
<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>安装完成了，这时候执行<code>node -v</code>是找不到命令的，node安装在<code>/usr/local/node/</code>下，因为node的安装路径还不在环境变量中，下面来配置node运行的环境变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo vi /etc/profile</div></pre></td></tr></table></figure></p>
<p>在<code>export PATH USER LOGNAME MAIL HOSTNAME HISTSIZE HISTCONTROL</code>这一行前面添加两行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">export NODE_HOME=/usr/local/node</div><div class="line">export PATH=$NODE_HOME/bin:$PATH</div></pre></td></tr></table></figure></p>
<p>然后输入命令<code>source /etc/pro</code>来使编辑立即生效，这时输入<code>node -v</code>发现已成功配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ node -v</div><div class="line">v6.9.4</div></pre></td></tr></table></figure></p>
<p>最后，运行node作为http服务器的话要开启端口，就是编辑上面的AWS实例的<code>安全组</code>，添加<code>入站规则</code>允许80端口就好了。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信小程序-ToolTip信息提示组件]]></title>
      <url>https://chyrain.github.io/2017/01/20/WXA-ToolTip/</url>
      <content type="html"><![CDATA[<h1 id="WXA-ToolTip"><a href="#WXA-ToolTip" class="headerlink" title="WXA-ToolTip"></a>WXA-ToolTip</h1><p>微信小程序-ToolTip信息提示组件</p>
<p><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/tooltip.gif" alt="tooltip"></p>
<h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p><a href="https://github.com/Chyrain/WXA-ToolTip.git" target="_blank" rel="external">https://github.com/Chyrain/WXA-ToolTip.git</a></p>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>将ToolTip文件夹复制到pages文件夹内</p>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul>
<li><p>在需要使用ToolTip的页面对应的.wxml文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;import src=&quot;../ToolTip/toolTip.wxml&quot;/&gt;</div><div class="line"></div><div class="line">&lt;!-- 引入toolTip模板 --&gt;</div><div class="line">&lt;template is=&quot;toolTip&quot; data=&quot;&#123;&#123;_toolTip_&#125;&#125;&quot;/&gt;</div></pre></td></tr></table></figure>
</li>
<li><p>在需要使用ToolTip的页面对应的.wxss文件顶部添加：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">@import &quot;./ToolTip/toolTip.wxss&quot;;</div></pre></td></tr></table></figure>
</li>
<li><p>在.js中调用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">// 在顶部引入toolTip.js</div><div class="line">var toolTip = require(&apos;../ToolTip/toolTip.js&apos;);</div><div class="line"></div><div class="line">// 在onLoad中初始化toolTip</div><div class="line">toolTip.init(this);</div><div class="line"></div><div class="line">// 调用showToolTip显示提示信息，参数:</div><div class="line">// type:类型包含&apos;success&apos;|&apos;info&apos;|&apos;warn&apos;|&apos;error&apos;, </div><div class="line">// text:内容</div><div class="line">// delay:延迟消失时间,不填不自动消失,只有success|info类型会自动消失</div><div class="line">toolTip.showToolTip(&apos;success&apos;, &apos;显示success提示&apos;, 2000);</div></pre></td></tr></table></figure></li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[有意思的JS]]></title>
      <url>https://chyrain.github.io/2017/01/19/%E6%9C%89%E6%84%8F%E6%80%9D%E7%9A%84JS/</url>
      <content type="html"><![CDATA[<h2 id="函数闭包-amp-柯里化"><a href="#函数闭包-amp-柯里化" class="headerlink" title="函数闭包&amp;柯里化"></a>函数闭包&amp;柯里化</h2><h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><p>有这么一道题：</p>
<blockquote>
<p>要实现一个函数，主要功能是对参数进行加法运算，但是参数传递方式略有不同：</p>
<p><code>CISDI_Cal(0).toString() //输出0</code><br><code>CISDI_Cal(0)(1).toString() //输出1</code><br><code>CISDI_Cal(0)(1)(2).toString() //输出3</code><br><code>var v = CISDI_Cal(0)(1); v(2).toString() //输出3</code></p>
</blockquote>
<p>这个题考察的是javascript里面常用的函数闭包，从示例可以看到：</p>
<ol>
<li>从第二个示例<code>CISDI_Cal(n)</code>返回的是一个函数对象，从第三和四示例可以看到<code>CISDI_Cal(n)(n)</code>返回的也是一个函数对象；</li>
<li><code>CISDI_Cal(0).toString()</code>返回了累加的结果，说明每个返回的函数对象都有<code>toString</code>方法；</li>
<li>多次函数调用累加得到结果，故前一函数获得参数累加后的值保留到了后一函数进行累加。</li>
</ol>
<p>由上面分析可知，<code>CISDI_Cal</code>内部有一个函数，这个函数执行后对输入进行了累加并返回了一个同样的函数，这个函数有<code>toString</code>方法输出累加结果：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">CISDI_Cal</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a</span>) </span>&#123;</div><div class="line">        n += a;</div><div class="line">        <span class="keyword">return</span> add;</div><div class="line">    &#125;</div><div class="line">    add.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">return</span> n;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> add;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这个例子讲的是函数闭包，过上面这种特殊的函数写法，可以让一个函数读取一个与自己不同作用域的局部变量，上面的<code>n</code>是函数<code>CISDI_Cal</code>内的局部变量，对<code>add</code>是可见的，但是反过来就不行，<code>add</code>内部的局部变量，对<code>CISDI_Cal</code>就是不可见的，既然<code>add</code>可以读取<code>CISDI_Cal</code>中的局部变量，那么只要把<code>add</code>作为返回值，我们就可以在<code>CISDI_Cal</code>外部读取它的内部变量，简单一句话来说函数闭包就是 <strong>函数内包含子函数，并最终return子函数</strong> ，<br>闭包函数的最大价值在于：我们可以在函数的外部（即子函数），直接读取该函数的局部变量。再仔细研究，就会发现<code>CISDI_Cal</code>函数就如同一个“类”，而其定义的局部变量就如同该“类”的全局变量；而子函数<code>add</code>函数，则如同这个“类”的方法，可以直接使用这个“类”的全局变量n。</p>
<h3 id="闭包函数的主要作用"><a href="#闭包函数的主要作用" class="headerlink" title="闭包函数的主要作用"></a>闭包函数的主要作用</h3><ol>
<li>缓存：可以实现数据缓存，我们可以把一个需要长期用到的变量设为闭包函数的局部变量，在子函数里面直接使用它。因此局部变量只定义初始化一次，但我们可以多次调用子函数并使用该变量。这比起我们在子函数中定义初始化变量，多次调用则多次初始化的做法，效率更高。闭包函数常见的一种用途就是，我们可以通过此实现计数功能。在闭包函数定义一个计数变量，而在子函数中对其进行++的操作。这样每次调用闭包函数，计数变量就会加1。</li>
<li>实现封装：如同前面所说，闭包函数就如同一个“类”，只有在该闭包函数里的方法才可以使用其局部变量，闭包函数之外的方法是不能读取其局部变量的。这就实现了面向对象的封装性，更安全更可靠。</li>
</ol>
<h3 id="那什么是柯里化呢？"><a href="#那什么是柯里化呢？" class="headerlink" title="那什么是柯里化呢？"></a>那什么是柯里化呢？</h3><p>额，这么说吧…利用柯里化机制的函数function就是闭包函数。</p>
<blockquote>
<p><em>柯里化（Currying）</em>，又称部分求值<em>（Partial Evaluation）</em>，是把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下的参数而且返回结果的新函数的技术。</p>
</blockquote>
<p>百科上的定义是针对众多函数式语言而言的，按照Stoyan Stefanov(《JavaScript Pattern》作者)的说法，所谓“柯里化”就是使函数理解并处理部分应用.举个栗子的话，就是下面这个(来自<a href="http://www.zhangxinxu.com/wordpress/2013/02/js-currying/" target="_blank" rel="external">张鑫旭</a>)：</p>
<blockquote>
<p>柯南身子虽小，但是里面住的却是大柯南，也就是一个function里面还有个function。不同柯南处理不同情况，例如，小柯南可以和…稍等，他女朋友叫什么的忘了，我查查…哦，毛利兰一起洗澡澡；但是大柯南就不行。小柯南不能当面指正犯人，需借助小五郎；但是，大柯南就可以直接质问指出凶手。就类似于，内外function处理不同的参数。如果代码表示就是(小柯南=smallKenan; 大柯南=bigKenan; 小柯南嗑药会变大柯南)：</p>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> smallKenan = <span class="function"><span class="keyword">function</span>(<span class="params">action</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> bigKenan = <span class="function"><span class="keyword">function</span>(<span class="params">doing</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> result = <span class="string">""</span>;</div><div class="line">        <span class="keyword">if</span> (action === <span class="string">"take drugs"</span>) &#123;</div><div class="line">            <span class="keyword">if</span> (doing === <span class="string">"bathWithGirlFriend"</span>) &#123;</div><div class="line">                result = <span class="string">"尖叫，新一，你这个色狼，然后一巴掌，脸煮熟了~"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doing === <span class="string">"pointOutKiller"</span>) &#123;</div><div class="line">                result = <span class="string">"新一，这个案子就交给你的，快点找出谁是凶手吧~"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            <span class="keyword">if</span> (doing === <span class="string">"bathWithGirlFriend"</span>) &#123;</div><div class="line">                result = <span class="string">"来吧，柯南，一起洗澡吧~"</span>;</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (doing === <span class="string">"pointOutKiller"</span>) &#123;</div><div class="line">                result = <span class="string">"小孩子家，滚一边去！"</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(result);</div><div class="line">        <span class="keyword">return</span> <span class="built_in">arguments</span>.callee; <span class="comment">// 等同于return bigKenan</span></div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">return</span> bigKenan;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">// 小柯南吃药了，然后和毛利兰洗澡，凶案现场指证犯人；结果是……</span></div><div class="line">smallKenan(<span class="string">"take drugs"</span>)(<span class="string">"bathWithGirlFriend"</span>)(<span class="string">"pointOutKiller"</span>);</div></pre></td></tr></table></figure>
<p>结果如下：</p>
<blockquote>
<p>尖叫，新一，你这个色狼，然后一巴掌，脸煮熟了~<br>新一，这个案子就交给你的，快点找出谁是凶手吧~</p>
</blockquote>
<p>“吃药”、“洗澡”、“指出凶手”就可以看成三个参数，其中，“吃药”确实是小柯南使用的，而后面的是“洗澡”、“指出凶手”虽然跟在smallKenan()后面，实际上是大柯南使用的。这个就是柯里化，参数部分使用。外部函数处理部分应用，剩下的由外部函数的返回函数处理。</p>
<p><strong>柯里化有3个常见作用：1. 参数复用；2. 提前返回；3. 延迟计算/运行。</strong></p>
<h4 id="1-参数复用"><a href="#1-参数复用" class="headerlink" title="1.参数复用"></a>1.参数复用</h4><p>前面第一个栗子就是，每次<code>add</code>都需要一个n参与计算，并保存计算结果，通过柯里化过程，<code>add</code>无需添加这个多余的参数。</p>
<h4 id="2-提前返回"><a href="#2-提前返回" class="headerlink" title="2.提前返回"></a>2.提前返回</h4><p>很常见的一个例子，兼容现代浏览器以及IE浏览器的事件添加方法。我们正常情况可能会这样写：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addEvent = <span class="function"><span class="keyword">function</span>(<span class="params">el, type, fn, capture</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">        el.addEventListener(type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            fn.call(el, e);</div><div class="line">        &#125;, capture);</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">        el.attachEvent(<span class="string">"on"</span> + type, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">            fn.call(el, e);</div><div class="line">        &#125;);</div><div class="line">    &#125; </div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>上面的方法有什么问题呢？很显然，我们每次使用addEvent为元素添加事件的时候，(eg. IE6/IE7)都会走一遍if…else if …，其实只要一次判定就可以了，怎么做？–柯里化。改为下面这样子的代码：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> addEvent = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">window</span>.addEventListener) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, sType, fn, capture</span>) </span>&#123;</div><div class="line">            el.addEventListener(sType, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                fn.call(el, e);</div><div class="line">            &#125;, (capture));</div><div class="line">        &#125;;</div><div class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">window</span>.attachEvent) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">el, sType, fn, capture</span>) </span>&#123;</div><div class="line">            el.attachEvent(<span class="string">"on"</span> + sType, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</div><div class="line">                fn.call(el, e);</div><div class="line">            &#125;);</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;)();</div></pre></td></tr></table></figure>
<p>初始addEvent的执行其实值实现了部分的应用（只有一次的if…else if…判定），而剩余的参数应用都是其返回函数实现的，典型的柯里化。</p>
<h4 id="3-延迟计算"><a href="#3-延迟计算" class="headerlink" title="3.延迟计算"></a>3.延迟计算</h4><p>一般而言，延迟计算或运行是没有必要的，因为一天花10块钱和月末花300块钱没什么本质区别——只是心里好受点（温水炖青蛙）。嘛，毕竟只是个人看法，您可能会不这么认为。举个例子，我每周末都要去钓鱼，我想知道我12月份4个周末总共钓了几斤鱼，把一些所谓的模式、概念抛开，我们可能就会下面这样实现：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fishWeight = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> addWeight = <span class="function"><span class="keyword">function</span>(<span class="params">weight</span>) </span>&#123;</div><div class="line">    fishWeight += weight;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">addWeight(<span class="number">2.3</span>);</div><div class="line">addWeight(<span class="number">6.5</span>);</div><div class="line">addWeight(<span class="number">1.2</span>);</div><div class="line">addWeight(<span class="number">2.5</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fishWeight);   <span class="comment">// 12.5</span></div></pre></td></tr></table></figure>
<p>每次addWeight都会累加鱼的总重量。<br>若是有柯里化实现，则会是下面这样：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> curryWeight = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> _fishWeight = [];</div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">arguments</span>.length === <span class="number">0</span>) &#123;</div><div class="line">            <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, _fishWeight);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            _fishWeight = _fishWeight.concat([].slice.call(<span class="built_in">arguments</span>));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div><div class="line"><span class="keyword">var</span> fishWeight = <span class="number">0</span>;</div><div class="line"><span class="keyword">var</span> addWeight = curryWeight(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> i=<span class="number">0</span>; len = <span class="built_in">arguments</span>.length;</div><div class="line">    <span class="keyword">for</span> (i; i&lt;len; i+=<span class="number">1</span>) &#123;</div><div class="line">        fishWeight += <span class="built_in">arguments</span>[i];</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">addWeight(<span class="number">2.3</span>);</div><div class="line">addWeight(<span class="number">6.5</span>);</div><div class="line">addWeight(<span class="number">1.2</span>);</div><div class="line">addWeight(<span class="number">2.5</span>);</div><div class="line">addWeight();    <span class="comment">//  这里才计算</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(fishWeight);    <span class="comment">// 12.5</span></div></pre></td></tr></table></figure>
<blockquote>
<p>部分内容转载自<a href="http://www.zhangxinxu.com" target="_blank" rel="external">张鑫旭-鑫空间-鑫生活</a></p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[在MAC上使用SVN]]></title>
      <url>https://chyrain.github.io/2017/01/16/SVN%E5%9C%A8MAC%E4%B8%8A%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      <content type="html"><![CDATA[<h2 id="SVN在MAC"><a href="#SVN在MAC" class="headerlink" title="SVN在MAC"></a>SVN在MAC</h2><ul>
<li>checkout一个远程库</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn checkout https://svn.duapp.com/appid8dt61afdcf --username=chy19910810@163.com --password=chy10350722. ./baidu</div></pre></td></tr></table></figure>
<ul>
<li>从本地导入代码到服务器(第一次初始化导入)，在终端中输入</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">svn import /Users/apple/Documents/eclipse_workspace/weibo svn://localhost/mycode/weibo --username=mj --password=123 -m &quot;初始化导入&quot;</div></pre></td></tr></table></figure>
<ul>
<li>提交代码到服务器：svn commit -m “修改了main.m文件”</li>
<li>更新服务器端的代码到客户端：svn update</li>
<li>svn的其他用法，可以在终端输入：svn help</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[微信抢红包神器，安卓党的福音]]></title>
      <url>https://chyrain.github.io/2017/01/05/%E5%BE%AE%E4%BF%A1%E6%8A%A2%E7%BA%A2%E5%8C%85%E7%A5%9E%E5%99%A8%EF%BC%8C%E5%AE%89%E5%8D%93%E5%85%9A%E7%9A%84%E7%A6%8F%E9%9F%B3/</url>
      <content type="html"><![CDATA[<h2 id="微信红包助手"><a href="#微信红包助手" class="headerlink" title="微信红包助手"></a>微信红包助手</h2><p><a href="http://chyrain.com/app/wxbot/app.html" target="_blank" rel="external"><br><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/V5WxBot_m.gif" width="330" alt="chess_react" align="center"><br></a></p>
<h3 id="更新说明"><a href="#更新说明" class="headerlink" title="更新说明"></a>更新说明</h3><ol>
<li>使用手机时，自动识别微信通知，快速抢红包</li>
<li>屏幕未解锁，发出红包提醒</li>
<li>取消屏幕密码，息屏也能自动抢红包</li>
</ol>
<h3 id="应用介绍"><a href="#应用介绍" class="headerlink" title="应用介绍"></a>应用介绍</h3><p>微信红包提醒，自动抢红包，让你的小伙伴们惊讶吧！</p>
<blockquote>
<p>注：本软件仅供学习使用，完全模拟人工操作，抢红包速度取决于你手机的性能与网络，不涉及任何第三方软件接口，本软件无病毒、不收集用户隐私信息，禁止使用本软件参与赌博活动。一切因使用本软件造成的任何后果，本软件责任人概不负责，亦不承担任何法律责任!<br>本应用源于codyboy的qianghongbao(github)项目，经过改进和再次开发以适应当前版本的微信，不做任何盈利性目的，特此声明，同时感谢原作者，如有侵权请联系客服告知。<br>应用截图</p>
</blockquote>
<h3 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h3><ol>
<li>进入“V5红包助手”，需要打开“微信”开关和“快速监听通知栏”开关，并进入右上角菜单页的“打开辅助服务”和“打开通知栏服务”检查对应服务是否被允许（魅族手机打开辅助服务需要在打开“打开辅助服务”后进入“无障碍”，再选择打开“V5红包助手”）。</li>
<li>进入微信，确保 微信 -&gt; 我 -&gt; 设置 -&gt; 新消息提醒 -&gt; 通知显示消息详情保持打开状态，且红包所在群聊不能开启消息免打扰。</li>
<li>确保V5红包助手处于运行状态，不被系统后台清理，各系统手机设置不同，一般在省电管理中可以找到对应设置项。（例如：<br> 魅族：手机管家-&gt;省电模式-&gt;待机耗电管理-&gt;选择保持运行的耗电应用开启“V5红包助手”的对应开关；<br> 三星：设置-&gt;电池-&gt;应用程序省电[详情]-&gt;找到”V5红包助手”并点击选择“已禁用”选项）</li>
<li>仅支持Android 4.3及以上系统。</li>
<li>为防止微信跟踪发现到异常抢红包行为导致账号使用异常，请避免频繁使用红包助手抢红包，并尽量设置延迟拆红包时间来防止微信捕捉到异常抢红包行为（进入“V5红包助手“-“微信设置”-“设置延迟拆红包/查看手气时间”值为1000毫秒以上)，因使用”V5红包助手”出现的后果本应用概不负责。</li>
</ol>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[2016年终总结]]></title>
      <url>https://chyrain.github.io/2016/12/23/2016%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<h1 id="2016年终总结"><a href="#2016年终总结" class="headerlink" title="2016年终总结"></a>2016年终总结</h1><blockquote>
<p>“时间是一切财富中最宝贵的财富。。。” — 狭缩德</p>
</blockquote>
<h2 id="迅捷的2016"><a href="#迅捷的2016" class="headerlink" title="迅捷的2016"></a>迅捷的2016</h2><blockquote>
<p><em>——人生天地之间，若白驹过隙，忽然而已。蓦然回首，头上似霜雪，脸上似山川。</em></p>
</blockquote>
<p><strong>一年过去了，总结自己有以下几个遗憾：</strong></p>
<ul>
<li>没有时间坚持技术博客写作，尽管在不断给自己的某某云服务充值，博客内容始终空空如也</li>
<li>没能坚持走一条完整的技术路线，而是四处涉猎，缺哪补哪</li>
<li>工资不够花（好吧，我知道你也一样）</li>
</ul>
<p><strong>一年过去了，我都干了些啥：</strong></p>
<ul>
<li>公司Android平台App的全新2.x版本的升级，以及功能更新和维护，从原先的开放链接下载到陆续上架到应用宝、豌豆荚、360手机助手，最近还将推出小米市场专版</li>
<li>公司iOS平台App的业务完善和发布，以及上架这一年的常规功能更新和维护</li>
<li>公司Android和iOS两个平台的SDK接口的逐步完善和稳定，不定时地充当这两个sdk的技术客服</li>
<li>从9月底开始接手公司HTML5开发维护任务，完成了大概13个座席版本和10个客户版本的release功能升级和bug维护</li>
<li>拿了驾照，经过了前后6个月时间，利用个别零散的休息日，也时而请下假，算是比较轻松地拿下了驾照</li>
<li>总结：几乎把所有时间给了公司，白天上班，晚上回来经常加班加点完善产品</li>
</ul>
<p><strong>一年过去了，同样也会有如下几个收获：</strong></p>
<ul>
<li>横跨三大技术路线(其实并不想…)，从Android到iOS再到H5的“无缝衔接”，当然，这很让人头大，就像熟悉了Eclipse的切换到Android Studio，从Eclipse切换到Xcode再切换到Sublime Text，这其中的快捷键使用，还有java、OC和js的语法经常方寸大乱。</li>
<li>重拾大学时期接触过的网页开发知识，发现如今前端技术架构已发生巨变，WVVM架构和组件化的思路是一大亮点(与App开发越发接近)</li>
<li>公司客服系统的所有前端产品算是都让我给承包了，感到责任重于泰山啊😹</li>
<li>获得温柔贤淑的女票一枚</li>
</ul>
<p><strong>这一年的自我感觉：</strong></p>
<ul>
<li>感觉能力提升不大，但思维方式改变比较多</li>
<li>开发的同时也注重产品思维</li>
<li>看到大牛的博客依然莫名的兴奋</li>
<li>执行力决定效果，杜绝了大部分的光说不练</li>
</ul>
<h2 id="2017？"><a href="#2017？" class="headerlink" title="2017？"></a>2017？</h2><p>身体是革命的本钱，这一年发现眼神越来越不好了，经常有莫名的闪光和模糊，毕竟作为程序员一整天面对显示屏，这个日后一定得好好保护。未来一年，不需要太多的计划，有时间多出去走走，把生活过得更像生活一些，而不只是工作。</p>
<p>计划：</p>
<ul>
<li>利用空闲时间做一款让自己满意的作品（网页竞价推广过滤插件，H5跨平台桌面应用，个人微信智能助手，抢红包利器，精美个人博客页）</li>
<li>带女票去一个远点的地方旅游</li>
<li>提升薪资到自己能够接受的水平</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[React实现国际象棋]]></title>
      <url>https://chyrain.github.io/2016/11/17/Chess-With-React/</url>
      <content type="html"><![CDATA[<h2 id="ChessWithReact"><a href="#ChessWithReact" class="headerlink" title="ChessWithReact"></a>ChessWithReact</h2><p>A chess web game use <a href="https://facebook.github.io/react" target="_blank" rel="external">react</a> and <a href="http://gaearon.github.io/react-dnd/" target="_blank" rel="external">react-dnd</a>.</p>
<p>本实例参考<code>react-dnd</code>官方Tutorial实例，并进行扩展和改进。</p>
<h2 id="Sample"><a href="#Sample" class="headerlink" title="Sample"></a>Sample</h2><p><img src="https://raw.githubusercontent.com/Chyrain/MDPictures/master/res/chess_react.gif" width="330" alt="chess_react" align="center"></p>
<h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><p><a href="https://github.com/Chyrain/ChessWithReact.git" target="_blank" rel="external">github地址</a></p>
<h2 id="License"><a href="#License" class="headerlink" title="License"></a>License</h2><blockquote>
<p>  MIT License<br>  Copyright (c) 2016 <a href="http://chyrain.com" target="_blank" rel="external">Chyrain</a></p>
<p>  Permission is hereby granted, free of charge, to any person obtaining a copy<br>    of this software and associated documentation files (the “Software”), to deal<br>    in the Software without restriction, including without limitation the rights<br>    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<br>    copies of the Software, and to permit persons to whom the Software is<br>    furnished to do so, subject to the following conditions:</p>
<p>  The above copyright notice and this permission notice shall be included in all<br>    copies or substantial portions of the Software.</p>
</blockquote>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[sudo 命令的一些小技巧]]></title>
      <url>https://chyrain.github.io/2016/03/17/sudo%20Tips/</url>
      <content type="html"><![CDATA[<h2 id="sudo"><a href="#sudo" class="headerlink" title="sudo"></a>sudo</h2><blockquote>
<p>在Linux下，我们需要使用sudo命令，让普通用户也能执行一些root命令，本文对常用的一些sudo操作以及平时没有发现的小技巧进行简单介绍。</p>
</blockquote>
<h3 id="1-授权"><a href="#1-授权" class="headerlink" title="1. 授权"></a>1. 授权</h3><p>普通用户如果没有权限访问某些文件或者执行某个命令时，要是该用户获得root授权，就可以通过在要执行的命令前加上sudo，临时切换到root用户的权限完成相关操作。</p>
<p>怎样让用户可以临时获取root权限呢？这就需要在<code>/etc/sudoers</code>文件中进行配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#授权给单个用户所有命令的执行权限</div><div class="line">username ALL=(ALL) ALL</div></pre></td></tr></table></figure>
<p>上面这个例子中：</p>
<ul>
<li>username: 允许使用suod的用户名</li>
<li>ALL: 允许从任何终端(机器)使用sudo</li>
<li>(ALL): 允许以任何用户身份执行sudo</li>
<li>ALL: 允许sudo权限执行任何命令</li>
</ul>
<p>如果我们想让用户<code>chyrain</code>只能在本机（主机名为<code>work-pc</code>）以<code>root</code>账户执行<code>/bin/chown</code>、<code>/bin/chmod</code>这两条命令，那么就应该这样配置：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">chyrain work-pc=(root) /bin/chown,/bin/chmod</div></pre></td></tr></table></figure>
<p>当你的帐号在<code>/etc/sudoers</code>文件中被授予 sudo 的权限，那么你就可以将任何 root 命令作为 sudo 命令的参数，使用 root 权限来执行该命令。首次使用会要求你输入当前用户的密码，系统确实输入正确即以 root 权限来执行 mount 命令，接下来一段时间（默认为5分钟）再次使用 sudo 命令就不需要输密码了。</p>
<h3 id="2-执行root命令后忘记加sudo"><a href="#2-执行root命令后忘记加sudo" class="headerlink" title="2. 执行root命令后忘记加sudo"></a>2. 执行root命令后忘记加sudo</h3><p>我们会碰到这样一种情形，当我们输入一个长长的命令，果断地敲下回车之后出现无权限操作，才发现忘记在命令前面加sudo了，一般我们的做法是按 ↑ 回到上一条命令，在该命令之前加上sudo，再执行该命令。</p>
<p>其实，我们并不需要这样，只要输入<code>sudo !!</code>即可，这里的<code>!!</code>代表上一条命令。如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">$ cat /etc/sudoers</div><div class="line">cat: cannot open /etc/sudoers for reading: Permission denied</div><div class="line"></div><div class="line">$ sudo !!</div><div class="line">sudo cat /etc/sudoers</div><div class="line">## sudoers file.</div><div class="line">##</div><div class="line">## This file MUST be edited with the &apos;visudo&apos; command as root.</div><div class="line">## Failure to use &apos;visudo&apos; may result in syntax or file permission errors</div><div class="line">## that prevent sudo from running.</div><div class="line">##</div><div class="line">## See the sudoers man page for the details on how to write a sudoers file.</div><div class="line">##</div><div class="line">## User privilege specification</div><div class="line">##</div><div class="line">root ALL=(ALL) ALL</div><div class="line">%admin  ALL=(ALL) ALL</div><div class="line">#</div></pre></td></tr></table></figure>
<h3 id="3-vim编辑完成后发现忘记使用sudo无法保存"><a href="#3-vim编辑完成后发现忘记使用sudo无法保存" class="headerlink" title="3. vim编辑完成后发现忘记使用sudo无法保存"></a>3. vim编辑完成后发现忘记使用sudo无法保存</h3><p>我们经常会遇到这样的一个囧境：使用 <code>vim</code> 对某个文件进行编辑，编辑完之后，按 ESC 之后回到普通模式，再按 <code>:wq</code> 准备保存退出时，发现没有权限对该文件进行修改，我们在使用 vim 命令时忘记在前面加 sudo 了。我就经常出现这种问题，之前的做法是只能不保存强退，再加上 sudo 重新编辑。</p>
<p>但是今后我们再也不需要用这么愚蠢的做法了，我们可以在 vim 的普通模式下，按 <code>:w !sudo tee %</code> ，这样就可以 root 权限来保存文件了，你也无需因为自己一时忘记加个 sudo 而沮丧懊恼了！</p>
<h3 id="4-shell-内置命令如何使用-sudo"><a href="#4-shell-内置命令如何使用-sudo" class="headerlink" title="4. shell 内置命令如何使用 sudo"></a>4. shell 内置命令如何使用 sudo</h3><p>shell 是一个交互式的应用程序，在执行外部命令时通过 fork 来创建一个子进程，再通过 exec 来加载外部命令的程序来执行，但是如果一个命令是 shell 内置命令，那么只能直接由 shell 来运行。sudo 的意思是，以别的用户（如root）的权限来 fork 一个进程，加载程序并运行，因此 sudo 后面不能跟 shell 的内置命令，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ sudo cd /sys/kernel/debugfs</div><div class="line">sudo: cd: command not found</div></pre></td></tr></table></figure>
<p>在这种情况，我们又没有 root 账户的密码，我们怎样执行该命令呢？有种办法就是使用 <code>sudo</code> 获得root shell 的权限，然后 <em>在root shell 中执行该命令</em> 。进入root shell 很简单，输入sudo bash 确认本用户的密码即可，此时你会发现命令提示符显示当前是 root。一旦获得root shell，你可以执行任何命令而不需要在每条命令前输入sudo了。</p>
<p>另外，常用的shell 内置命令在这里 有简单介绍，我们可以使用 type 命令来查看命令的类型，如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ type ls</div><div class="line">ls is /bin/ls</div><div class="line">$ type umask</div><div class="line">umask is a shell builtin</div></pre></td></tr></table></figure>
<h3 id="5-sudo操作记录日志"><a href="#5-sudo操作记录日志" class="headerlink" title="5. sudo操作记录日志"></a>5. sudo操作记录日志</h3><p>作为一个 Linux 系统的管理员，不仅可以让指定的用户或用户组作为root用户或其它用户来运行某些命令，还能将指定的用户所输入的命令和参数作详细的记录。而sudo的日志功能就可以用户跟踪用户输入的命令，这不仅能增进系统的安全性，还能用来进行故障检修。但是要记录sudo的日志还要一些简单的配置：</p>
<ul>
<li><p>创建sudo日志文件<br>  我们将sudo日志文件放置在<code>/var/log/sudo.log</code>文件中：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo touch /var/log/sudo.log</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/rsyslog.conf</code>配置文件<br>  我的系统为Ubuntu为该名字，但有些系统名为<code>/etc/syslog.conf</code>，注意不同发行版本之间的差别，在该文件加入下面一行：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">local2.debug    /var/log/sudo.log    #空白不能用空格，必须用tab</div></pre></td></tr></table></figure>
</li>
<li><p>修改<code>/etc/sudoers</code>配置文件<br>  注意网上很多关于sudo日志文件配置的都缺少这一步，在该文件中加入下面一行：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Defaults    logfile=/var/log/sudo.log</div></pre></td></tr></table></figure>
</li>
<li><p>重启syslog服务</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ sudo service rsysylog restart</div></pre></td></tr></table></figure>
</li>
<li><p>查看suod日志记录<br>  经过上面配置，sudo的命令记录都会记录到文件<code>/var/log/sudo.log</code>中，例如我们执行几条sudo命令之后，查看该文件的记录如下：</p>
  <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">$ cat sudo.log</div><div class="line">Nov 17 22:23:52 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/bin/cat /etc/sudoers</div><div class="line">Nov 17 22:24:42 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/bin/ls</div><div class="line">Nov 17 22:28:12 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/usr/sbin/service rsyslog restart</div><div class="line">Nov 17 22:29:26 : chyrain : TTY=pts/1 ; PWD=/var/log ; USER=root ; COMMAND=/bin/ls /root/</div></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>https://chyrain.github.io/2015/05/16/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>https://chyrain.github.io/index.html</url>
      <content type="html"><![CDATA[<h1 id="About"><a href="#About" class="headerlink" title="About"></a>About</h1><ul>
<li>Chyrain<blockquote>
<ul>
<li>chyrain.com</li>
</ul>
</blockquote>
</li>
</ul>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>https://chyrain.github.io/about/index.html</url>
      <content type="html"><![CDATA[<h1 id="Chyrain"><a href="#Chyrain" class="headerlink" title="Chyrain"></a>Chyrain</h1><pre><code>&gt; Home: **[chyrain.github.io](https://chyrain.github.io)**
&gt; E-mail: chyrain_v5kf@qq.com
&gt; Github: [Chyrain](https://github.com/Chyrain)
&gt; Graduated from: BUPT
&gt; Experience: [@TP-LINK](http://www.tp-link.com.cn/) iOS development engineer, [@V5KF](https://www.v5kf.com) iOS &amp; Android &amp; FrontEnd development engineer.
&gt; Skills: Android, iOS, javascript(React, webpack, nodejs)
</code></pre>]]></content>
    </entry>
    
  
</search>
